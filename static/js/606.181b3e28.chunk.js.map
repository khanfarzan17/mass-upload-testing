{"version":3,"file":"static/js/606.181b3e28.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","hooks/useToast.js","components/FileUploader/FileUploader.jsx","components/Modal/customModal.jsx","components/ErrorPopup/ErrorPopup.jsx","pages/mass-upload/massUpload.jsx","utils/downloadTemplate.js","massuUploadIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import React, { useState } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\n\r\nconst FileUpload = ({\r\n  fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n  multiple = true,\r\n  onUpload,\r\n  onReset,\r\n}) => {\r\n  const [files, setFiles] = useState([]);\r\n\r\n  const handleChange = (selectedFiles) => {\r\n    const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n    setFiles(fileArray);\r\n\r\n    // Callback function to send files to parent component\r\n    if (onUpload) {\r\n      onUpload(fileArray);\r\n    }\r\n  };\r\n\r\n  const handleClearFiles = () => {\r\n    setFiles([]);\r\n    if (onUpload) {\r\n      onUpload([]);\r\n    }\r\n    // Call the reset function to clear all states\r\n    if (onReset) {\r\n      onReset();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"file-upload-container\">\r\n      <h2>Drag & Drop Files</h2>\r\n      <div className=\"upload-area\">\r\n        <FileUploader\r\n          multiple={multiple}\r\n          handleChange={handleChange}\r\n          name=\"file\"\r\n          types={fileTypes}\r\n        />\r\n        <div className=\"file-list\">\r\n          {files.length > 0 ? (\r\n            files.map((file, index) => (\r\n              <div className=\"mb-4\"\r\n                key={index}\r\n                style={{ display: \"flex\", alignItems: \"center\" }}\r\n              >\r\n                <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                <button\r\n                  onClick={handleClearFiles}\r\n                  style={{\r\n                    background: \"none\",\r\n                    border: \"none\",\r\n                    cursor: \"pointer\",\r\n                    color: \"red\",\r\n                  }}\r\n                >\r\n                  X\r\n                </button>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>No files uploaded yet.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport {\r\n  useReactTable,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  console.log(\"Errors in ErrorPopup:\", errors);\r\n\r\n  const [sorting, setSorting] = React.useState([]);\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        header: \"Row Number\",\r\n        accessorFn: (errorString) => {\r\n          const rowMatch = errorString.match(/Row (\\d+):/);\r\n          return rowMatch ? parseInt(rowMatch[1], 10) : null;\r\n        },\r\n        cell: (info) => info.getValue() || \"-\",\r\n      },\r\n      {\r\n        header: \"Error Description\",\r\n        accessorFn: (errorString) => {\r\n          const rowMatch = errorString.match(/Row (\\d+):/);\r\n          return rowMatch ? errorString.split(\": \")[1] : errorString;\r\n        },\r\n        cell: (info) => info.getValue(),\r\n      },\r\n      {\r\n        header: \"Column Name\",\r\n        accessorFn: (errorString) => {\r\n          const columnMatch = errorString.match(/\"([^\"]*)\" is required/);\r\n          return columnMatch ? columnMatch[1] : null;\r\n        },\r\n        cell: (info) => info.getValue() || \"-\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const table = useReactTable({\r\n    columns,\r\n    data: errors,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    onSortingChange: setSorting,\r\n    state: {\r\n      sorting,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Alert variant=\"info\" className=\"text-center text-sm-start mb-3\">\r\n        <strong>Note:</strong> Below reports show only uploaded spreadsheet\r\n        error rows. To resolve below issues, do the required changes in the\r\n        spreadsheet and re-import.\r\n      </Alert>\r\n      <div className=\"table-responsive\">\r\n        <Table striped bordered hover>\r\n          <thead className=\"table-light\">\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <tr key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => {\r\n                  return (\r\n                    <th key={header.id} colSpan={header.colSpan}>\r\n                      <div\r\n                        className={\r\n                          header.column.getCanSort()\r\n                            ? \"cursor-pointer select-none\"\r\n                            : \"\"\r\n                        }\r\n                        onClick={header.column.getToggleSortingHandler()}\r\n                      >\r\n                        {flexRender(\r\n                          header.column.columnDef.header,\r\n                          header.getContext()\r\n                        )}\r\n                        {/* Sorting indicator */}\r\n                        {header.column.getIsSorted() === \"asc\"\r\n                          ? \"↑\"\r\n                          : header.column.getIsSorted() === \"desc\"\r\n                          ? \"↓\"\r\n                          : null}\r\n                      </div>\r\n                    </th>\r\n                  );\r\n                })}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody>\r\n            {table.getRowModel().rows.length > 0 ? (\r\n              table.getRowModel().rows.map((row) => (\r\n                <tr key={row.id}>\r\n                  {row.getVisibleCells().map((cell) => (\r\n                    <td key={cell.id}>\r\n                      {flexRender(\r\n                        cell.column.columnDef.cell,\r\n                        cell.getContext()\r\n                      )}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={3} className=\"text-center\">\r\n                  No Errors Found\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","import React, { useState } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack, Spinner, Alert, Table } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst MassUpload = () => {\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n\r\n  // Function to validate the uploaded file\r\n  const validateFile = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsBinaryString(file);\r\n\r\n      reader.onload = (e) => {\r\n        const workbook = XLSX.read(e.target.result, { type: \"binary\" });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n\r\n        // 🟢 Extract headers explicitly even if there is no row data\r\n        const headers = XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0];\r\n\r\n        if (!headers || headers.length === 0) {\r\n          reject([\"The uploaded file has no content or Empty.\"]);\r\n          return;\r\n        }\r\n        // 🔥 Extract actual sheet data (excluding headers)\r\n        const sheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n        console.log(\"sheetData\", sheetData);\r\n\r\n        if (sheetData.length === 0) {\r\n          reject([\r\n            \"The uploaded file contains only headers but no data. Please add at least one row.\",\r\n          ]);\r\n          return;\r\n        }\r\n\r\n        // Extract headers from first row\r\n        const fileHeaders = Object.keys(sheetData[0]);\r\n\r\n        // 🔥 **NEW: Check for duplicate headers**\r\n        const headerCounts = {};\r\n        fileHeaders.forEach((header) => {\r\n          headerCounts[header] = (headerCounts[header] || 0) + 1;\r\n        });\r\n\r\n        const duplicateHeaders = Object.keys(headerCounts).filter(\r\n          (header) => headerCounts[header] > 1\r\n        );\r\n\r\n        if (duplicateHeaders.length > 0) {\r\n          reject([`Duplicate headers found: ${duplicateHeaders.join(\", \")}`]);\r\n          return;\r\n        }\r\n\r\n        // Determine matching operation based on headers\r\n        let matchedOperation = null;\r\n        for (const [key, value] of Object.entries(config.MassUpload)) {\r\n          if (\r\n            value.fileHeaders.every((header) => fileHeaders.includes(header))\r\n          ) {\r\n            matchedOperation = key;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (!matchedOperation) {\r\n          reject([\"File headers do not match any expected template.\"]);\r\n          return;\r\n        }\r\n\r\n        const expectedHeaders = config.MassUpload[matchedOperation].fileHeaders;\r\n        console.log(\"Expected Headers\", expectedHeaders);\r\n        const mandatoryAttributes =\r\n          config.MassUpload[matchedOperation].mandatoryAttributes;\r\n\r\n        console.log(\"Mandatory Attributes\", mandatoryAttributes);\r\n        // Validate missing headers\r\n        const missingHeaders = expectedHeaders.filter(\r\n          (header) => !fileHeaders.includes(header)\r\n        );\r\n        if (missingHeaders.length > 0) {\r\n          reject([`Missing required headers: ${missingHeaders.join(\", \")}`]);\r\n          return;\r\n        }\r\n\r\n        // Validate mandatory fields are not empty\r\n        const validationErrors = [];\r\n        sheetData.forEach((row, index) => {\r\n          mandatoryAttributes.forEach((field) => {\r\n            if (!row[field] || row[field].toString().trim() === \"\") {\r\n              validationErrors.push(\r\n                `Row ${index + 2}: \"${field}\" is required but is empty.`\r\n              );\r\n            }\r\n          });\r\n        });\r\n\r\n        if (validationErrors.length > 0) {\r\n          console.log(\"Rejecting with validation errors:\", validationErrors); // ADDED LOG HERE\r\n          reject(validationErrors);\r\n        } else {\r\n          console.log(\"Resolving validation\"); // ADDED LOG HERE\r\n          resolve();\r\n        }\r\n      };\r\n\r\n      reader.onerror = () => reject([\"File reading failed.\"]);\r\n    });\r\n  };\r\n\r\n  const handleFileUpload = (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    setIsValidating(true);\r\n    validateFile(files[0])\r\n      .then(() => {\r\n        console.log(\"Validation successful (inside .then)\");\r\n        setErrors([]);\r\n        setIsValidating(false);\r\n        showSuccessToast(\" No Error File validated successfully!\"); // Show success toast\r\n      })\r\n      .catch((validationErrors) => {\r\n        console.log(\"Validation failed (inside .catch\", validationErrors);\r\n        setErrors(validationErrors);\r\n        setIsValidating(false);\r\n        setErrorModalShow(true);\r\n      });\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    // Reset all states to their initial values\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n\r\n    // Reset the dropdown\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    // Show toast message\r\n    showSuccessToast(\"Widget reset successfully!\");\r\n  };\r\n\r\n  console.log(\"Operation Choice:\", errors);\r\n\r\n  return (\r\n    <>\r\n      <Stack className=\"mt-3\" gap={4}>\r\n        {/* Choose operation and download template */}\r\n        <Stack direction=\"horizontal\">\r\n          <Form.Select\r\n            aria-label=\"Choose Operations\"\r\n            style={{\r\n              fontSize: \"11px\",\r\n              width: \"30%\",\r\n              border: \"1px solid #007bff\",\r\n              outline: \"none\",\r\n              borderRadius: \"8px\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onChange={(e) => setOperationChoice(e.target.value)}\r\n          >\r\n            <option value=\"\">Choose Operations</option>\r\n            <option value=\"1\">Physical Product/Raw Material</option>\r\n            <option value=\"2\">Physical Product Structure</option>\r\n            <option value=\"3\">Document</option>\r\n            <option value=\"4\">Physical Product-Document</option>\r\n          </Form.Select>\r\n\r\n          <CustomButton\r\n            variant=\"link ms-auto \"\r\n            onClick={handleDownloadTemplate}\r\n            text=\"Download Template\"\r\n          />\r\n        </Stack>\r\n\r\n        {/* Drag and Drop File Upload */}\r\n        <FileUpload\r\n          fileTypes={[\"XLSX\"]}\r\n          multiple={false}\r\n          onUpload={handleFileUpload}\r\n          onReset={handleReset}\r\n        />\r\n\r\n        {/* Show loader while validating */}\r\n        {isValidating && <Loader />}\r\n\r\n        {/* Submit Button and Content Error Button */}\r\n        <Stack direction=\"horizontal\" gap={2}>\r\n          <Form.Check type=\"checkbox\" label=\"Background\" />\r\n          <div className=\"ms-auto d-flex gap-5\">\r\n            {errors.length > 0 && (\r\n              <CustomButton\r\n                variant=\"danger\"\r\n                onClick={() => setShowContentErrors(true)}\r\n                text={`Content Errors (${errors.length})`}\r\n              />\r\n            )}\r\n            <CustomButton\r\n              variant=\"primary\"\r\n              onClick={() => setModalShow(true)}\r\n              text=\"Submit\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* Content Errors Modal */}\r\n      <CustomModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        title=\"Content Errors\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setShowContentErrors(false),\r\n          },\r\n        ]}\r\n      >\r\n        <ErrorPopup errors={errors} />\r\n      </CustomModal>\r\n\r\n      {/* Confirmation Modal */}\r\n      <CustomModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        title=\"Custom Modal Title\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Cancel\",\r\n            variant: \"danger\",\r\n            onClick: () => setModalShow(false),\r\n          },\r\n          {\r\n            label: \"Confirm\",\r\n            variant: \"success\",\r\n            onClick: () => alert(\"Confirmed!\"),\r\n          },\r\n        ]}\r\n      >\r\n        <p>This is a reusable modal component with dynamic content.</p>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","useToast","showToast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","toast","showSuccessToast","options","arguments","length","undefined","showErrorToast","showInfoToast","showWarningToast","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","handleClearFiles","FileUploader","handleChange","selectedFiles","fileArray","name","types","map","file","index","display","alignItems","background","border","cursor","color","show","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","btn","label","errors","console","log","sorting","setSorting","React","columns","header","accessorFn","errorString","rowMatch","match","parseInt","cell","info","getValue","split","columnMatch","table","useReactTable","data","getCoreRowModel","getSortedRowModel","onSortingChange","state","_Fragment","Alert","Table","striped","bordered","hover","getHeaderGroups","headerGroup","headers","colSpan","column","getCanSort","getToggleSortingHandler","flexRender","columnDef","getContext","getIsSorted","id","getRowModel","rows","row","getVisibleCells","MassUpload","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","isValidating","setIsValidating","operationChoice","setOperationChoice","setErrors","Stack","gap","direction","Form","Select","fontSize","outline","borderRadius","fontWeight","onChange","e","target","value","CustomButton","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","window","open","downloadTemplate","FileUpload","Promise","resolve","reject","reader","FileReader","readAsBinaryString","onload","workbook","XLSX","result","sheetName","SheetNames","worksheet","Sheets","sheet_to_json","sheetData","defval","fileHeaders","Object","keys","headerCounts","forEach","duplicateHeaders","filter","concat","join","matchedOperation","key","entries","config","every","includes","expectedHeaders","mandatoryAttributes","missingHeaders","validationErrors","field","toString","trim","push","onerror","then","catch","handleReset","selectElement","document","querySelector","Check","CustomModal","ErrorPopup","alert","root","widget","hasOnLoadRun","addEvent","warn","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","error"],"sourceRoot":""}