{"version":3,"file":"static/js/908.875eb0f9.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Modal/customModal.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Alert/ReusableAlert.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","hooks/Mass-Upload/useMassUpload.js","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","pages/mass-upload/mapSheetData.js","pages/mass-upload/massUpload.jsx","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n    // const handleDragOver = (event) => {\r\n    //   if (disabled) {\r\n    //     event.preventDefault();\r\n    //     event.stopPropagation();\r\n    //     showErrorToast(\"Please choose an operation from the drop-down first\");\r\n    //   } else {\r\n    //     // Allow drag-over behavior for valid file uploads\r\n    //     event.preventDefault();\r\n    //     event.dataTransfer.dropEffect = \"copy\";\r\n    //   }\r\n    // };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled ? \"Please select an operation first\" : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\"❌ Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            if (!row[field] || row[field].toString().trim() === \"\") {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace = row[\"Collaborative Space\"]?.trim() || \"\";\r\n            if (\r\n              !userCollabSpace ||\r\n              !collabSpaceTitles.includes(userCollabSpace)\r\n            ) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\"❌ Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\"❌ Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  options,\r\n  onChange,\r\n  size,\r\n  className,\r\n}) => {\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{options.defaultLabel}</option> {/* Default option */}\r\n      {options.list.map((option, attrIndex) => (\r\n        <option key={attrIndex} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React, { useMemo } from \"react\";\r\nimport { AutoSizer, List, CellMeasurer, CellMeasurerCache } from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  console.log(`[ErrorPopup.jsx] errors:`, errors);\r\n\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div\r\n          style={style}\r\n          className=\"table-row\"\r\n        >\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\"> \r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\nimport \"./staticTable.css\";\r\n\r\n/**\r\n * A reusable table component focused only on presentation\r\n */\r\nconst StaticTable = ({\r\n  columnHeaders, // Array of pre-processed column data objects\r\n  handleSelectChange, // Callback when selection changes\r\n  dropdownOptions = [], // Pre-processed dropdown options\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, hasNLS, currentMapping, defaultLabel } = column;\r\n\r\n          return (\r\n            <tr key={index}>\r\n              <td>{header}</td>\r\n              <td>\r\n                <CustomSelect\r\n                  index={index}\r\n                  selectedValue={currentMapping?.uiLabel || header}\r\n                  onChange={(index, value) => {\r\n                    handleSelectChange(header, value);\r\n                  }}\r\n                  size=\"lg\"\r\n                  className=\"w-100\"\r\n                  disabled={!hasNLS}\r\n                  options={{\r\n                    defaultLabel: defaultLabel,\r\n                    list: dropdownOptions,\r\n                  }}\r\n                />\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = () => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async () => {\r\n    try {\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      /// Extract attribute groups\r\n      // const attributeGroups = [\r\n      //   ...new Set(groupData.map((item) => item.groupNLS)),\r\n      // ];\r\n      // console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n      ];\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      const allNLSValues = [...new Set([...apiNlsValues, ...systemNlsValues])];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge only non-system API attributes with your hardcoded ones\r\n      const mergeAttributes = [...filteredGroupData, ...systemAttributes];\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name,\r\n        group: attr.groupNLS || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\"Mapped Attributes (for dropdown) excluding System Attributes:\", dropdownOptions);\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchColumnMapping();\r\n  }, []);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import React, { useEffect } from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n\r\n  const { mappedAttributes } = useMassUpload(); // Gets UI/backend name mappings\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n\r\n  useEffect(() => {\r\n    if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n      console.log(\"Mapped Attributes updated:\", mappedAttributes);\r\n    }\r\n  }, [mappedAttributes]);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    // Simple case-insensitive exact matching\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    console.log(\r\n      `Checking if header '${header}' matches any NLS value:`,\r\n      hasMatch\r\n    );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table\r\n  const prepareDropdownOptions = () => {\r\n    return dropdownOptions.map((attr) => ({\r\n      value: attr.uiLabel,\r\n      label: attr.uiLabel,\r\n    }));\r\n  };\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    // Get backend name for the selected UI label\r\n    const backendName = getBackendNameForUILabel(value);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => ({\r\n      header,\r\n      isMandatory: mandatoryAttributes.includes(header),\r\n      hasNLS: hasMatchingNLS(header),\r\n      currentMapping: selectedMappings[header],\r\n      defaultLabel: hasMatchingNLS(header)\r\n        ? header\r\n        : \"Please select from Drop Down\",\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={prepareDropdownOptions()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n  const { mappedAttributes } = useMassUpload();\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, use column name as attribute\r\n            simplifiedMappings[columnName] = columnName;\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: columnName,\r\n              isMandatory: false,\r\n              autoMapped: false,\r\n            };\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","const OPERATION_TYPES = {\r\n  PHYSICAL_PRODUCT: \"1\",\r\n  PRODUCT_STRUCTURE: \"2\",\r\n  DOCUMENT: \"3\",\r\n  PRODUCT_DOCUMENT: \"4\",\r\n};\r\n\r\n\r\nconst mappers = {\r\n  // Physical Product/Raw Material mapper\r\n  [OPERATION_TYPES.PHYSICAL_PRODUCT]: (row) => {\r\n    // Get the value and convert to lowercase for case-insensitive comparison\r\n    const productType =\r\n      row[\"Physical product/Raw Material\"]?.toLowerCase()?.trim() || \"\";\r\n\r\n    let type;\r\n    if (productType.includes(\"physical product\")) {\r\n      type = \"VPMReference\";\r\n    } else if (productType.includes(\"raw material\")) {\r\n      type = \"Raw_Material\";\r\n    } else {\r\n      type = \"\"; // Default empty if neither matches\r\n    }\r\n\r\n    return {\r\n      type,\r\n      title: row[\"Title\"] || \"\",\r\n      attributes: {\r\n        description: row[\"Description\"] || \"\",\r\n        path: row[\"Item Catalog Category\"] || \"\",\r\n        \"dseno:EnterpriseAttributes\": {\r\n          \"XP_VPMReference_Ext.EMR_ERP_PrimaryUOM\":\r\n            row[\"Unit Of Measure\"] || row[\"Unit of Measure\"] || \"\",\r\n        },\r\n        \"dseng:EnterpriseReference\": {\r\n          partNumber: row[\"EIN Number\"] || \"\",\r\n        },\r\n      },\r\n      classificationType: row[\"Type\"] || \"\",\r\n      collabspace: row[\"Collaborative Space\"] || row[\"Collabspace\"] || \"\",\r\n    };\r\n  },\r\n\r\n  // Product Structure mapper\r\n  [OPERATION_TYPES.PRODUCT_STRUCTURE]: (row) => ({\r\n    parentId: row[\"Parent EIN\"] || \"\",\r\n    childId: row[\"Child EIN\"] || \"\",\r\n    relationshipType: \"Product Structure\",\r\n    attributes: {\r\n      quantity: row[\"Quantity\"] || \"1\",\r\n      unit: row[\"Unit\"] || \"Each\",\r\n    },\r\n  }),\r\n\r\n  // Document mapper\r\n  [OPERATION_TYPES.DOCUMENT]: (row) => ({\r\n    type: \"Document\",\r\n    title: row[\"Document Name\"] || \"\",\r\n    attributes: {\r\n      description: row[\"Description\"] || \"\",\r\n      \"document:attributes\": {\r\n        documentType: row[\"Document Type\"] || \"\",\r\n        revision: row[\"Revision\"] || \"\",\r\n      },\r\n    },\r\n    collabspace: row[\"Collaborative Space\"] || row[\"Collabspace\"] || \"\",\r\n  }),\r\n\r\n  // Product-Document mapper\r\n  [OPERATION_TYPES.PRODUCT_DOCUMENT]: (row) => ({\r\n    productId: row[\"Product EIN\"] || \"\",\r\n    documentId: row[\"Document Name\"] || \"\",\r\n    relationshipType: row[\"Relationship Type\"] || \"Reference\",\r\n  }),\r\n};\r\n\r\nconst processInChunks = (items, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < items.length; i += chunkSize) {\r\n    chunks.push(items.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst mapsheetData = (sheetData, operationType, chunkSize = 1000) => {\r\n  if (!Array.isArray(sheetData) || sheetData.length === 0) {\r\n    return { items: [], chunks: [], totalItems: 0, totalChunks: 0 };\r\n  }\r\n\r\n  // Add debug logging\r\n  console.log(\"Raw Sheet Data:\", sheetData);\r\n  console.log(\"Operation Type:\", operationType);\r\n\r\n  const mapper = mappers[operationType];\r\n  if (!mapper) {\r\n    console.error(`No mapper found for operation type: ${operationType}`);\r\n    return { items: [], chunks: [], totalItems: 0, totalChunks: 0 };\r\n  }\r\n\r\n  const items = sheetData.map((row, index) => {\r\n    const mappedItem = mapper(row);\r\n\r\n    return mappedItem;\r\n  });\r\n\r\n  const chunks = processInChunks(items, chunkSize);\r\n\r\n  const result = {\r\n    items,\r\n    chunks,\r\n    totalItems: items.length,\r\n    totalChunks: chunks.length,\r\n    originalData: sheetData // Store original data for future mappings\r\n  };\r\n\r\n  console.log(\"Final mapped data:\", result);\r\n  return result;\r\n};\r\n\r\nexport default mapsheetData;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport { globalCollabSpaceTitles } from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport mapsheetData from \"./mapSheetData\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadPhysicalProduct\",\r\n  2: \"/massUpload/uploadProductStructure\",\r\n  3: \"/massUpload/uploadDocument\",\r\n  4: \"/massUpload/uploadProductDocument\",\r\n};\r\n\r\n// Replace the transformSheetDataWithMappings function with this implementation\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData // Add this parameter\r\n) => {\r\n  // Debug log column names and some sample values\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n\r\n  // Extract group information from mappedAttributes\r\n  const { mappedData = [], attributesByGroup = {} } =\r\n    mappedAttributesData || {};\r\n\r\n  // Create a map of backend attribute names to their groups\r\n  const attributeGroupMap = {};\r\n  if (Array.isArray(mappedData)) {\r\n    mappedData.forEach((option) => {\r\n      attributeGroupMap[option.backendName] = option.group || \"System\";\r\n    });\r\n  }\r\n\r\n  console.log(\"Attribute to group mapping:\", attributeGroupMap);\r\n\r\n  // Basic structure definitions for operations\r\n  const baseStructureDefinitions = {\r\n    // Physical Product/Raw Material\r\n    1: {\r\n      rootAttributes: [\"type\", \"title\", \"classificationType\", \"collabspace\"],\r\n    },\r\n    // Product Structure\r\n    2: {\r\n      rootAttributes: [\"parentId\", \"childId\", \"relationshipType\"],\r\n    },\r\n    // Document\r\n    3: {\r\n      rootAttributes: [\"type\", \"title\", \"collabspace\"],\r\n    },\r\n    // Product-Document\r\n    4: {\r\n      rootAttributes: [\"productId\", \"documentId\", \"relationshipType\"],\r\n    },\r\n  };\r\n\r\n  // Root attributes that should not be nested\r\n  const rootAttrs = baseStructureDefinitions[operationType]?.rootAttributes || [\r\n    \"type\",\r\n    \"title\",\r\n  ];\r\n\r\n  // Special column mappings that need specific paths\r\n  const specialPathMappings = {\r\n    \"EIN Number\": \"attributes.dseng:EnterpriseReference.partNumber\",\r\n  };\r\n\r\n  // Map backend attributes to their paths based on attribute groups\r\n  // Update the getPathForAttribute function in transformSheetDataWithMappings\r\n\r\n  const getPathForAttribute = (backendName, columnName) => {\r\n    // Special case for type column mapping to classificationType\r\n    if (\r\n      backendName === \"type\" &&\r\n      columnName.toLowerCase() !== \"physical product/raw material\"\r\n    ) {\r\n      console.log(\r\n        `Column \"${columnName}\" with backend name \"type\" is mapped to \"classificationType\"`\r\n      );\r\n      return \"classificationType\";\r\n    }\r\n\r\n    // Special case for title, description, and collabspace - always at root level\r\n    if (\r\n      backendName === \"title\" ||\r\n      backendName === \"description\" ||\r\n      backendName.toLowerCase() === \"collabspace\"\r\n    ) {\r\n      console.log(`${backendName} is placed at root level`);\r\n      return backendName;\r\n    }\r\n\r\n    // Handle special cases first (takes precedence)\r\n    if (specialPathMappings[columnName]) {\r\n      return specialPathMappings[columnName];\r\n    }\r\n\r\n    // Root attributes go at the top level\r\n    if (rootAttrs.includes(backendName)) {\r\n      return backendName;\r\n    }\r\n\r\n    // Use the group information to determine the path\r\n    const group = attributeGroupMap[backendName];\r\n    console.log(\r\n      `Determining path for attribute: ${backendName}, Group: ${\r\n        group || \"unknown\"\r\n      }`\r\n    );\r\n\r\n    // EIN Number always goes to dseng:EnterpriseReference\r\n    if (columnName === \"EIN Number\" || backendName === \"PartNumber\") {\r\n      return `attributes.dseng:EnterpriseReference.partNumber`;\r\n    }\r\n\r\n    if (group) {\r\n      // System Attributes go directly under attributes\r\n      if (group === \"System Attributes\") {\r\n        console.log(\r\n          `${backendName} is a System Attribute - placed directly under attributes`\r\n        );\r\n        return `attributes.${backendName}`;\r\n      }\r\n\r\n      // Object Attributes go to dseno:EnterpriseAttributes\r\n      else if (group === \"Object Attributes\") {\r\n        console.log(\r\n          `${backendName} is an Object Attribute - placed under dseno:EnterpriseAttributes`\r\n        );\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      }\r\n\r\n      // Packaging Weight and Dimensions go to dseno:EnterpriseAttributes\r\n      else if (group === \"Packaging Weight and Dimensions\") {\r\n        console.log(\r\n          `${backendName} is a Packaging Attribute - placed under dseno:EnterpriseAttributes`\r\n        );\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      }\r\n\r\n      // Legacy handling for other group names that contain specific patterns\r\n      else if (\r\n        group.includes(\"EnterpriseReference\") ||\r\n        group.includes(\"dseng:\")\r\n      ) {\r\n        console.log(\r\n          `${backendName} contains EnterpriseReference in group - placed under dseng:EnterpriseReference`\r\n        );\r\n        return `attributes.dseng:EnterpriseReference.${backendName}`;\r\n      } else if (\r\n        group.includes(\"EnterpriseAttributes\") ||\r\n        group.includes(\"dseno:\") ||\r\n        group.includes(\"XP_VPMReference_Ext\")\r\n      ) {\r\n        console.log(\r\n          `${backendName} contains EnterpriseAttributes in group - placed under dseno:EnterpriseAttributes`\r\n        );\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      } else if (\r\n        group.includes(\"document\") ||\r\n        group === \"document:attributes\"\r\n      ) {\r\n        console.log(\r\n          `${backendName} is a Document Attribute - placed under document:attributes`\r\n        );\r\n        return `attributes.document:attributes.${backendName}`;\r\n      }\r\n\r\n      // Default all other groups to system attributes\r\n      console.log(\r\n        `${backendName} has unknown group: ${group} - defaulting to System Attribute`\r\n      );\r\n      return `attributes.${backendName}`;\r\n    }\r\n\r\n    // Fallback for attributes without group information - default to system attributes\r\n    console.log(\r\n      `${backendName} has no group information - defaulting to System Attribute`\r\n    );\r\n    return `attributes.${backendName}`;\r\n  };\r\n\r\n  // Transform each row in the sheet data\r\n  const transformedItems = sheetData.map((row) => {\r\n    // Initialize the structure with empty nested objects\r\n    const transformedRow = {};\r\n\r\n    // Process each cell in the row\r\n    Object.entries(row).forEach(([columnName, value]) => {\r\n      // Skip unmapped columns\r\n      if (!columnMappings[columnName]) return;\r\n\r\n      const backendName = columnMappings[columnName];\r\n      const path = getPathForAttribute(backendName, columnName);\r\n\r\n      // Add this debug log\r\n      if (\r\n        backendName === \"title\" ||\r\n        backendName === \"description\" ||\r\n        backendName.toLowerCase() === \"collabspace\"\r\n      ) {\r\n        console.log(`Placing ${backendName} at path: ${path}`);\r\n      }\r\n\r\n      // Skip if no path determined\r\n      if (!path) return;\r\n\r\n      // Build the nested structure\r\n      const pathParts = path.split(\".\");\r\n      let current = transformedRow;\r\n\r\n      // Create nested objects\r\n      for (let i = 0; i < pathParts.length - 1; i++) {\r\n        const part = pathParts[i];\r\n        if (!current[part]) {\r\n          current[part] = {};\r\n        }\r\n        current = current[part];\r\n      }\r\n\r\n      // Set the value at the final path location\r\n      current[pathParts[pathParts.length - 1]] = value;\r\n    });\r\n\r\n    // Handle physical product type determination\r\n    if (operationType === \"1\") {\r\n      // Find the column header regardless of case\r\n      const productTypeColumn = Object.keys(row).find(\r\n        (key) =>\r\n          key.toLowerCase().includes(\"physical product\") ||\r\n          key.toLowerCase().includes(\"raw material\")\r\n      );\r\n\r\n      if (productTypeColumn && row[productTypeColumn]) {\r\n        const productType = row[productTypeColumn].toLowerCase().trim();\r\n        transformedRow.type = productType.includes(\"physical product\")\r\n          ? \"VPMReference\"\r\n          : productType.includes(\"raw material\")\r\n          ? \"Raw_Material\"\r\n          : \"\";\r\n\r\n        console.log(\r\n          `Product type determined: ${transformedRow.type} from value: ${row[productTypeColumn]}`\r\n        );\r\n      }\r\n    }\r\n\r\n    // For document, default type to \"Document\"\r\n    if (operationType === \"3\" && !transformedRow.type) {\r\n      transformedRow.type = \"Document\";\r\n    }\r\n\r\n    return transformedRow;\r\n  });\r\n\r\n  // Add this before returning the final result\r\n  if (transformedItems.length > 0) {\r\n    console.log(\r\n      \"Sample transformed item structure:\",\r\n      JSON.stringify(transformedItems[0], null, 2)\r\n    );\r\n  }\r\n\r\n  // Prepare data in chunks for API submission\r\n  const CHUNK_SIZE = 1000;\r\n  const chunks = [];\r\n\r\n  for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n    chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n  }\r\n\r\n  return {\r\n    chunks,\r\n    totalChunks: chunks.length,\r\n    totalItems: transformedItems.length,\r\n    originalData: sheetData,\r\n    mappings: columnMappings,\r\n  };\r\n};\r\n// Generate automatic column mappings\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  // Helper function to check if column has matching NLS\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  // Helper function to get backend name for a column with NLS match\r\n  const getBackendNameForHeader = (header) => {\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  // Special mapping for known attributes that might not have NLS matches\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  // Process all column headers\r\n  columnHeaders.forEach((columnName) => {\r\n    // Column was not manually mapped\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      // Also add to simplified mappings\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n    // Then handle columns with NLS matches OR mandatory columns\r\n    else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      // Also add to simplified mappings\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false); // New state for spreadsheet modal\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef(); // Add this ref\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const { mappedAttributes, refreshMapping } = useMassUpload();\r\n\r\n  useEffect(() => {\r\n    // Log the global variable directly to verify its contents\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      // Map sheet data to JSON format with operation type\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        // Generate initial mapping with default column names\r\n        const mappedData = mapsheetData(sheetData, operationChoice);\r\n        console.log(\"Mapped JSON data:\", mappedData);\r\n\r\n        // Store original data for potential future manual mapping\r\n        mappedData.originalData = sheetData;\r\n        setFormattedData(mappedData);\r\n\r\n        // Once mappedAttributes is refreshed, apply automatic mapping\r\n        await refreshMapping(operationChoice);\r\n\r\n        // Apply automatic column mapping (wait for mappedAttributes to be updated)\r\n        setTimeout(() => {\r\n          console.log(\r\n            \"Applying automatic column mapping with:\",\r\n            mappedAttributes\r\n          );\r\n          if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n            // Generate mappings automatically\r\n            const { simplifiedMappings } = generateColumnMappings(\r\n              headers,\r\n              mandatoryAttributes,\r\n              mappedAttributes\r\n            );\r\n\r\n            console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n            // Apply mappings to transform the data\r\n            if (Object.keys(simplifiedMappings).length > 0) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                sheetData,\r\n                simplifiedMappings,\r\n                operationChoice,\r\n                mappedAttributes // Pass mappedAttributes here\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data automatically mapped with ${\r\n                  Object.keys(simplifiedMappings).length\r\n                } columns`\r\n              );\r\n            }\r\n          }\r\n        }, 500); // Small delay to ensure mappedAttributes is ready\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(\"File validated successfully!\");\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      // If there's a template mismatch, show error and reset widget\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(\r\n          \"The template uploaded and the selected operation do not match\"\r\n        );\r\n        handleReset(true); // Pass true to skip success toast\r\n        // Clear the file uploader\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Only set these states if it's not a template mismatch\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    // Reset all states to their initial values\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null); // Add this line\r\n\r\n    // Reset the dropdown\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    // Only show success toast if not skipped\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(\"Widget reset successfully!\");\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false); // Close content errors modal\r\n    setShowSpreadsheetModal(true); // Open spreadsheet modal\r\n  };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value); // Debug log\r\n    setOperationChoice(value);\r\n    // Add this line to fetch mapping data when operation changes\r\n    refreshMapping(value);\r\n  };\r\n\r\n  // Add this useEffect to monitor state changes\r\n  useEffect(() => {\r\n    console.log(\"Operation Choice updated:\", operationChoice);\r\n  }, [operationChoice]);\r\n\r\n  // It will be disabled if no file is uploaded (no headers) or if there are validation errors.\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled = columnHeaders.length === 0; // Disable if no file uploaded\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      if (!formattedData) {\r\n        showErrorToast(\"No data to submit\");\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(\"Invalid operation type\");\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks } = formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n\r\n      showSuccessToast(`Starting upload of ${totalChunks} chunks...`);\r\n\r\n      for (let i = 0; i < chunks.length; i++) {\r\n        try {\r\n          const chunk = chunks[i];\r\n          const response = await api.post(endpoint, {\r\n            items: chunk,\r\n          });\r\n\r\n          if (response.status === 200) {\r\n            successCount++;\r\n            if (i % 5 === 0) {\r\n              // Show progress every 5 chunks\r\n              showSuccessToast(\r\n                `Processed ${i + 1} of ${totalChunks} chunks...`\r\n              );\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(`Chunk ${i + 1} failed:`, error);\r\n          failureCount++;\r\n        }\r\n      }\r\n\r\n      const finalMessage = `Upload complete: ${successCount} chunks successful, ${failureCount} failed`;\r\n      if (failureCount > 0) {\r\n        showErrorToast(finalMessage);\r\n      } else {\r\n        showSuccessToast(\"Upload successful!\");\r\n        setModalShow(false);\r\n        handleReset();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`Upload failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  // Add this computed value for FileUpload component\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <Stack className=\"mt-3\" gap={4}>\r\n        {/* Choose operation and download template */}\r\n        <Stack direction=\"horizontal\">\r\n          <CustomSelect\r\n            selectedValue={operationChoice}\r\n            onChange={handleOperationChange}\r\n            size=\"lg\"\r\n            className=\"w-50\"\r\n            options={{\r\n              defaultLabel: \"Choose Operations\",\r\n              list: [\r\n                { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                { value: \"2\", label: \"Physical Product Structure\" },\r\n                { value: \"3\", label: \"Document\" },\r\n                { value: \"4\", label: \"Physical Product-Document\" },\r\n              ],\r\n            }}\r\n          />\r\n          {/* Conditionally render multiple file input for Document type */}\r\n          <div className=\"p-2 ms-auto\">\r\n            {operationChoice === \"3\" && (\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control type=\"file\" multiple />\r\n              </Form.Group>\r\n            )}\r\n          </div>\r\n          <div className=\"p-2\">\r\n            <CustomButton\r\n              variant=\"link ms-auto\"\r\n              size=\"lg\"\r\n              onClick={handleDownloadTemplate}\r\n              text=\"Download Template\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n\r\n        {/* Drag and Drop File Upload */}\r\n        {/* Modified FileUpload with disabled state */}\r\n        <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n          <FileUpload\r\n            ref={fileUploaderRef}\r\n            fileTypes={[\"XLSX\"]}\r\n            multiple={false}\r\n            onUpload={handleFileUpload}\r\n            onReset={handleReset}\r\n            disabled={isFileUploadDisabled}\r\n            message={\r\n              isFileUploadDisabled\r\n                ? \"Please select an operation first\"\r\n                : \"Drag & Drop your files here or Click to browse\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/* Show loader while validating */}\r\n        {isValidating && <Loader />}\r\n\r\n        {/* Submit Button and Content Error Button */}\r\n        <Stack direction=\"horizontal\" gap={2}>\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          />\r\n          <div className=\"ms-auto d-flex gap-5\">\r\n            {errors.length > 0 && (\r\n              <CustomButton\r\n                variant=\"danger\"\r\n                onClick={() => setShowContentErrors(true)}\r\n                text={`Content Errors (${errors.length})`}\r\n              />\r\n            )}\r\n\r\n            <CustomButton\r\n              variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n              onClick={handleOpenSpreadsheetModal}\r\n              text=\"Manage Spreadsheet Columns\"\r\n              disabled={manageSpreadsheetDisabled}\r\n            />\r\n\r\n            <CustomButton\r\n              variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n              disabled={submitDisabled}\r\n              size=\"lg\"\r\n              onClick={() => setModalShow(true)}\r\n              text=\"Submit\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* Content Errors Modal */}\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      {/* Confirmation Modal */}\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      {/* Column Mapping */}\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        existingMappings={formattedData?.mappings ? formattedData.mappings : {}}\r\n        onColumnsMapped={(mappings, finalMapping) => {\r\n          console.log(\"Column mappings received:\", mappings);\r\n\r\n          // Store the column mappings\r\n          const columnMappings = mappings;\r\n\r\n          // Transform the sheet data using the column mappings\r\n          if (formattedData && formattedData.originalData) {\r\n            const transformedData = transformSheetDataWithMappings(\r\n              formattedData.originalData,\r\n              columnMappings,\r\n              operationChoice,\r\n              mappedAttributes // Pass mappedAttributes here\r\n            );\r\n\r\n            setFormattedData(transformedData);\r\n            showSuccessToast(\r\n              `Data mapped successfully with ${\r\n                Object.keys(mappings).length\r\n              } columns`\r\n            );\r\n          } else {\r\n            showErrorToast(\r\n              \"No sheet data available to transform with mappings\"\r\n            );\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","show","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","map","btn","index","label","useToast","showToast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","toast","showSuccessToast","options","arguments","length","undefined","showErrorToast","showInfoToast","showWarningToast","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","_config$MassUpload$ma","_config$MassUpload$ma2","console","log","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","errors","headers","Array","isArray","error","reader","FileReader","readAsBinaryString","onload","async","workbook","XLSX","e","target","result","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","includes","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","i","push","slice","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","chunkIndex","chunk","progress","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$CollaborativeSp","userCollabSpace","valueToValidate","columnName","_row$columnName","some","prefix","startsWith","_row$columnName2","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","onChange","Form","Select","value","defaultLabel","list","option","attrIndex","Alert","processedErrors","useMemo","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","split","join","rowNumber","columns","Object","values","sort","a","b","Number","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","parent","CellMeasurer","columnIndex","rowIndex","column","err","ReusableAlert","_Fragment","AutoSizer","_ref3","List","rowCount","rowHeight","deferredMeasurementCache","CustomModal","ErrorPopup","onConfirm","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","hasNLS","currentMapping","CustomSelect","uiLabel","useMassUpload","mappedAttributes","setMappedAttributes","ENOVIA_BASE_URL","process","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","item","nls","systemAttributes","groupNLS","attributeGroups","apiNlsValues","systemNlsValues","allNLSValues","Set","filteredGroupData","filter","attr","relevantAttributes","deploymentExtension","mappedData","backendName","group","attributesByGroup","find","useEffect","refreshMapping","selectedMappings","setSelectedMappings","keys","hasMatchingNLS","warn","normalizedHeader","toLowerCase","hasMatch","StaticTable","isMandatory","columnHeader","opt","getBackendNameForUILabel","prev","mappedAttribute","onColumnsMapped","existingMappings","errorMessage","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","OPERATION_TYPES","mappers","_row$PhysicalProduct","_row$PhysicalProduct$","productType","attributes","description","path","partNumber","classificationType","collabspace","parentId","childId","relationshipType","quantity","unit","documentType","revision","productId","documentId","operationType","items","totalItems","totalChunks","mapper","processInChunks","originalData","API_ENDPOINTS","transformSheetDataWithMappings","mappedAttributesData","_baseStructureDefinit","attributeGroupMap","rootAttrs","rootAttributes","specialPathMappings","transformedItems","transformedRow","entries","getPathForAttribute","pathParts","part","productTypeColumn","JSON","stringify","mappings","generateColumnMappings","isSpecial","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","operationChoice","setOperationChoice","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","globalCollabSpaceTitles","handleReset","selectElement","document","querySelector","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","Stack","gap","direction","Group","controlId","Control","CustomButton","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","window","open","downloadTemplate","FileUpload","validationResult","mapsheetData","setTimeout","transformedData","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","Check","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","endpoint","successCount","failureCount","api","post","status","finalMessage","ColumnMappingModal","root","widget","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","securityContext1","getValue","WAFData","loadWAFData","csrfURL","response","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue"],"sourceRoot":""}