{"version":3,"file":"static/js/364.ffa354bf.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Modal/customModal.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Alert/ReusableAlert.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","hooks/Mass-Upload/useMassUpload.js","hooks/Mass-Upload/useMassUploadDocument.js","pages/mass-upload/massUpload.jsx","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n    // const handleDragOver = (event) => {\r\n    //   if (disabled) {\r\n    //     event.preventDefault();\r\n    //     event.stopPropagation();\r\n    //     showErrorToast(\"Please choose an operation from the drop-down first\");\r\n    //   } else {\r\n    //     // Allow drag-over behavior for valid file uploads\r\n    //     event.preventDefault();\r\n    //     event.dataTransfer.dropEffect = \"copy\";\r\n    //   }\r\n    // };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled ? \"Please select an operation first\" : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\"❌ Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map(title => title.toLowerCase());\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            if (!row[field] || row[field].toString().trim() === \"\") {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace = row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (!userCollabSpace || !lowerCaseCollabSpaceTitles.includes(userCollabSpace)) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n\r\n            \r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n             // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n             if (matchedOperation === \"Physical Product Structure\") {\r\n              columnName = \"Quantity\";\r\n              const quantityValue = row[columnName]?.toString().trim();\r\n              if (quantityValue) {\r\n                const numQuantity = Number(quantityValue);\r\n                if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                  validationErrors.push(\r\n                    `Row ${globalRowIndex + 2}: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                  );\r\n                  console.log(\r\n                    \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                    quantityValue\r\n                  );\r\n                }\r\n              }\r\n            }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\"❌ Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  options,\r\n  onChange,\r\n  size,\r\n  className,\r\n}) => {\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{options.defaultLabel}</option> {/* Default option */}\r\n      {options.list.map((option, attrIndex) => (\r\n        <option key={attrIndex} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\nimport \"./staticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || header}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import React from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n  dropdownOptions,\r\n  allNLSValues,\r\n  operationChoice,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  console.log(\"MappedList - Received dropdownOptions:\", dropdownOptions);\r\n  console.log(\"MappedList - Received operationChoice:\", operationChoice);\r\n  console.log(\"MappedList - Received allNLSValues:\", allNLSValues);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    console.log(\r\n      `Checking if header '${header}' matches any NLS value:`,\r\n      hasMatch\r\n    );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    console.log(\"Finding backend name for UI label:\", uiLabel);\r\n    console.log(\"Current dropdown options:\", dropdownOptions);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available\");\r\n      return uiLabel;\r\n    }\r\n\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    console.log(\"Found option:\", option);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    console.log(\"Preparing dropdown options for column:\", currentColumnHeader);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available for filtering\");\r\n      return [];\r\n    }\r\n\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader)\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    const filteredOptions = dropdownOptions\r\n      .filter((attr) => !selectedValues.includes(attr.uiLabel))\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n\r\n    return filteredOptions;\r\n  };\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    console.log(\r\n      \"Selection changed for column:\",\r\n      columnHeader,\r\n      \"to value:\",\r\n      value\r\n    );\r\n\r\n    const backendName = getBackendNameForUILabel(value);\r\n    console.log(\"Mapped backend name:\", backendName);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        disabled: hasNLS && isMandatory,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n  dropdownOptions, // Receive dropdownOptions\r\n  allNLSValues, // Add this prop\r\n  operationChoice, // Add operation choice\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  console.log(\"ColumnMappingModal NLS values:\", allNLSValues);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, use column name as attribute\r\n            simplifiedMappings[columnName] = columnName;\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: columnName,\r\n              isMandatory: false,\r\n              autoMapped: false,\r\n            };\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  console.log(\r\n    \"ColumnMappingModal - received dropdownOptions:\",\r\n    dropdownOptions\r\n  );\r\n  console.log(\"ColumnMappingModal - operation choice:\", operationChoice);\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n        dropdownOptions={dropdownOptions}\r\n        allNLSValues={allNLSValues} // Pass this to MappedList\r\n        operationChoice={operationChoice} // Pass operation choice\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = (initialOperationChoice) => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const [operationChoice, setOperationChoice] = useState(initialOperationChoice);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async (operation = null) => {\r\n    try {\r\n      // Use the passed operation or fall back to state\r\n      const effectiveOperation = operation || operationChoice;\r\n      console.log(\"Fetching column mapping for operation:\", effectiveOperation);\r\n\r\n      if (!effectiveOperation) {\r\n        console.log(\"No operation specified, skipping fetch\");\r\n        return;\r\n      }\r\n\r\n      // Update state if a new operation is passed\r\n      if (operation && operation !== operationChoice) {\r\n        setOperationChoice(operation);\r\n      }\r\n\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n      ];\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      const allNLSValues = [...new Set([...apiNlsValues, ...systemNlsValues])];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge only non-system API attributes with your hardcoded ones\r\n      const mergeAttributes = [...filteredGroupData, ...systemAttributes];\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationChoice) {\r\n      fetchColumnMapping();\r\n    }\r\n  }, [operationChoice]);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = (initialOperationType) => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const [mappedAttributes, setMappedAttributes] = useState({\r\n    allNLSValues: [],\r\n    dropdownOptions: [],\r\n    mappedData: [],\r\n  });\r\n  const [operationType, setOperationType] = useState(initialOperationType);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async (operation = null) => {\r\n    // Use passed operation or fall back to state\r\n    const effectiveOperation = operation || operationType;\r\n\r\n    if (effectiveOperation !== \"3\") {\r\n      console.log(\"Not document operation type, skipping fetch\");\r\n      return;\r\n    }\r\n\r\n    // Update state if new operation passed\r\n    if (operation && operation !== operationType) {\r\n      setOperationType(operation);\r\n    }\r\n\r\n    try {\r\n      console.log(\r\n        \"Fetching document data for operation type:\",\r\n        effectiveOperation\r\n      );\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      const body = {\r\n        type: \"Document\",\r\n        preferedType: \"Document\",\r\n        typeName: \"Document\",\r\n        subTypes: true,\r\n        runUXBL: true,\r\n        metrics: {\r\n          UXName: \"New\",\r\n          client_app_domain: \"3DEXPERIENCE 3DDashboard\",\r\n          client_app_name: \"ENXWDOC_AP\",\r\n        },\r\n      };\r\n\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        API_URL,\r\n        body,\r\n        headers\r\n      );\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\r\n          \"Failed to fetch document data. Invalid response structure.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\r\n        \"Full documentInfo structure:\",\r\n        JSON.stringify(documentInfo, null, 2)\r\n      );\r\n\r\n      // Check different possible paths for extensionAttributes\r\n      const extensionAttributes =\r\n        documentInfo?.extensionAttributes ||\r\n        documentInfo?.attributes?.extensionAttributes ||\r\n        [];\r\n\r\n      console.log(\"Found extensionAttributes:\", extensionAttributes);\r\n\r\n      // Your hardcoded document attributes\r\n      const DocumentsAttributes = [\r\n        {\r\n          name: \"description\",\r\n          nls: \"Description\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"name\",\r\n          nls: \"Document Name\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"type\",\r\n          nls: \"Document Type\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"title\",\r\n          nls: \"Title\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\",\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n      ];\r\n\r\n      // Extract dropdown options only if extensionAttributes exists\r\n      if (extensionAttributes && extensionAttributes.length > 0) {\r\n        // Extract all NLS values from API\r\n        const apiNlsValues = extensionAttributes.map((attr) => attr.nls);\r\n        console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n        // Extract NLS values from hardcoded attributes\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n        console.log(\"Hardcoded NLS Values:\", hardcodedNlsValues);\r\n\r\n        // Combine both NLS value sets (using Set to remove duplicates)\r\n        const allNLSValues = [\r\n          ...new Set([...apiNlsValues, ...hardcodedNlsValues]),\r\n        ];\r\n        console.log(\r\n          \"Document Operation - All Combined NLS Values:\",\r\n          allNLSValues\r\n        );\r\n\r\n        // Process API attributes (with name splitting)\r\n        const apiOptions = extensionAttributes.map((attr) => {\r\n          // Extract the attribute name after the dot\r\n          const fullName = attr.name;\r\n          const nameParts = fullName.split(\".\");\r\n          const extractedName = nameParts.length > 1 ? nameParts[1] : fullName;\r\n\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: extractedName,\r\n            fullName: attr.name,\r\n            group: \"API Attributes\",\r\n          };\r\n        });\r\n\r\n        // Process hardcoded attributes\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        // Combine both for mappedData\r\n        const combinedMappedData = [...apiOptions, ...hardcodedOptions];\r\n\r\n        console.log(\"Document Operation - API Dropdown Options:\", apiOptions);\r\n        console.log(\r\n          \"Document Operation - Combined Mapped Data:\",\r\n          combinedMappedData\r\n        );\r\n\r\n        // Update state with specific configurations for each property\r\n        setMappedAttributes({\r\n          allNLSValues: allNLSValues, // Combined NLS values for matching\r\n          dropdownOptions: apiOptions, // Only API options for dropdown\r\n          mappedData: combinedMappedData, // Both API and hardcoded for payload\r\n        });\r\n      } else {\r\n        // If no API attributes, use hardcoded ones for everything\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n\r\n        // Create hardcoded options for mappedData when no API data exists\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        setMappedAttributes({\r\n          allNLSValues: hardcodedNlsValues, // Use hardcoded NLS for matching\r\n          dropdownOptions: [], // Empty dropdown options as requested\r\n          mappedData: hardcodedOptions, // Use hardcoded options for payload\r\n        });\r\n      }\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationType === \"3\") {\r\n      fetchDocumentData();\r\n    }\r\n  }, [operationType]);\r\n\r\n  // Return structure matching useMassUpload\r\n  return {\r\n    mappedAttributes,\r\n    refreshMapping: fetchDocumentData,\r\n  };\r\n};\r\n\r\nexport default useFetchDocumentData;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport { globalCollabSpaceTitles } from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadPhysicalProduct\",\r\n  2: \"/massUpload/uploadProductStructure\",\r\n  3: \"/massUpload/uploadDocument\",\r\n  4: \"/massUpload/uploadProductDocument\",\r\n};\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData\r\n) => {\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped data in Massupload:\", mappedData);\r\n\r\n  // For Document operation type (3), use different processing logic\r\n  if (operationType === \"3\") {\r\n    console.log(\"Processing document data with operation type 3\");\r\n\r\n    // Transform each row into document format\r\n    const documentItems = sheetData.map((row) => {\r\n      // Create document structure with dataelements\r\n      const documentItem = {\r\n        dataelements: {},\r\n      };\r\n\r\n      // Process each column in the row\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (!columnMappings[columnName] || !value) return;\r\n\r\n        const backendFieldName = columnMappings[columnName]; // Mapped backend field name\r\n\r\n        // Only these two fields go to the root level\r\n        if (backendFieldName === \"Document Type\") {\r\n          documentItem[\"Classification Type\"] = value;\r\n        }\r\n        // Map \"Document Name\" to \"name\" inside dataelements\r\n        else if (backendFieldName === \"Document Name\") {\r\n          documentItem.dataelements[\"name\"] = value;\r\n        }\r\n        // Everything else goes inside dataelements\r\n        else {\r\n          documentItem.dataelements[backendFieldName] = value;\r\n        }\r\n      });\r\n\r\n      return documentItem;\r\n    });\r\n\r\n    // Log sample document for verification\r\n    if (documentItems.length > 0) {\r\n      console.log(\r\n        \"Sample document structure:\",\r\n        JSON.stringify(documentItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < documentItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(documentItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: documentItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      // Special field to indicate this is document data\r\n      isDocumentPayload: true,\r\n      documents: documentItems,\r\n    };\r\n  } else {\r\n    // KEEP EXISTING CODE FOR PHYSICAL PRODUCTS (operations 1, 2, 4)\r\n    console.log(\r\n      \"Processing physical product data with operation type:\",\r\n      operationType\r\n    );\r\n\r\n    const attributeGroupMap = {};\r\n    if (Array.isArray(mappedData)) {\r\n      mappedData.forEach((option) => {\r\n        attributeGroupMap[option.backendName] = option.group || \"System\";\r\n        if (option.fullName) {\r\n          attributeGroupMap[`fullName:${option.backendName}`] = option.fullName;\r\n        }\r\n        console.log(\r\n          `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n        );\r\n      });\r\n    }\r\n\r\n    // The rest of your existing code for physical products...\r\n    const getPathForAttribute = (backendName, columnName) => {\r\n      if (\r\n        backendName === \"title\" ||\r\n        backendName === \"type\" ||\r\n        backendName === \"classificationType\" ||\r\n        backendName === \"collabspaceTitle\"\r\n      ) {\r\n        if (backendName === \"collabspaceTitle\") {\r\n          console.log(\"collabspaceTitle mapped to root collabspace\");\r\n          return \"collabspaceTitle\";\r\n        }\r\n\r\n        console.log(`${backendName} placed at root level`);\r\n        return backendName;\r\n      }\r\n\r\n      if (\r\n        columnName === \"EIN Number\" ||\r\n        backendName === \"PartNumber\" ||\r\n        backendName === \"Part Number\"\r\n      ) {\r\n        console.log(\r\n          \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n        );\r\n        return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n      }\r\n\r\n      if (backendName === \"description\") {\r\n        console.log(\"Description mapped to attributes.description\");\r\n        return \"attributes.description\";\r\n      }\r\n\r\n      const group = attributeGroupMap[backendName];\r\n      console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n      if (!group) {\r\n        console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n        return null;\r\n      }\r\n\r\n      if (group === \"System Attributes\") {\r\n        return `attributes.${backendName}`;\r\n      } else {\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      }\r\n    };\r\n\r\n    const transformedItems = sheetData.map((row) => {\r\n      const transformedRow = {};\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (!columnMappings[columnName]) return;\r\n\r\n        const uiLabelBackendName = columnMappings[columnName];\r\n\r\n        const systemAttributeMappings = {\r\n          Title: \"title\",\r\n          Description: \"description\",\r\n          \"Collaborative Space\": \"collabspaceTitle\",\r\n          \"Collab Space\": \"collabspaceTitle\",\r\n          Type: \"type\",\r\n        };\r\n\r\n        const backendName =\r\n          systemAttributeMappings[uiLabelBackendName] ||\r\n          mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n            ?.backendName ||\r\n          uiLabelBackendName;\r\n\r\n        const path = getPathForAttribute(backendName, columnName);\r\n\r\n        if (\r\n          backendName === \"title\" ||\r\n          backendName === \"description\" ||\r\n          backendName.toLowerCase() === \"collabspace\"\r\n        ) {\r\n          console.log(`Placing ${backendName} at path: ${path}`);\r\n        }\r\n\r\n        if (!path) return;\r\n\r\n        const pathParts = path.split(\".\");\r\n        let current = transformedRow;\r\n\r\n        for (let i = 0; i < pathParts.length - 1; i++) {\r\n          const part = pathParts[i];\r\n          if (!current[part]) {\r\n            current[part] = {};\r\n          }\r\n          current = current[part];\r\n        }\r\n\r\n        current[pathParts[pathParts.length - 1]] = value;\r\n      });\r\n\r\n      if (operationType === \"1\") {\r\n        const productTypeColumn = Object.keys(row).find(\r\n          (key) =>\r\n            key.toLowerCase().includes(\"physical product\") ||\r\n            key.toLowerCase().includes(\"raw material\")\r\n        );\r\n\r\n        if (productTypeColumn && row[productTypeColumn]) {\r\n          const productType = row[productTypeColumn].toLowerCase().trim();\r\n          transformedRow.type = productType.includes(\"physical product\")\r\n            ? \"VPMReference\"\r\n            : productType.includes(\"raw material\")\r\n            ? \"Raw_Material\"\r\n            : \"\";\r\n\r\n          console.log(\r\n            `Product type determined: ${transformedRow.type} from value: ${row[productTypeColumn]}`\r\n          );\r\n        }\r\n      }\r\n\r\n      return transformedRow;\r\n    });\r\n\r\n    if (transformedItems.length > 0) {\r\n      console.log(\r\n        \"Sample transformed item structure:\",\r\n        JSON.stringify(transformedItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: transformedItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      isDocumentPayload: false,\r\n    };\r\n  }\r\n};\r\n\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabspaceTitle\",\r\n    \"Collab Space\": \"collabspaceTitle\",\r\n    Type: \"type\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  const getBackendNameForHeader = (header) => {\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  columnHeaders.forEach((columnName) => {\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    } else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false);\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef();\r\n  const [formattedData, setFormattedData] = useState(null);\r\n\r\n  const {\r\n    mappedAttributes: productMappedAttributes,\r\n    refreshMapping: refreshProductMapping,\r\n  } = useMassUpload();\r\n  const {\r\n    mappedAttributes: documentMappedAttributes,\r\n    refreshMapping: refreshDocumentMapping,\r\n  } = useFetchDocumentData(operationChoice);\r\n\r\n  const getActiveData = () => {\r\n    console.log(\"Getting active data for operation:\", operationChoice);\r\n\r\n    switch (operationChoice) {\r\n      case \"1\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"2\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"3\":\r\n        return {\r\n          mappedAttributes: documentMappedAttributes,\r\n          refreshMapping: refreshDocumentMapping,\r\n        };\r\n      case \"4\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      default:\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n    }\r\n  };\r\n\r\n  const { mappedAttributes, refreshMapping } = getActiveData();\r\n\r\n  console.log(\"Active operation:\", operationChoice);\r\n  console.log(\"Active mappedAttributes:\", mappedAttributes);\r\n\r\n  const handleRefreshForCurrentOperation = async (operation) => {\r\n    try {\r\n      console.log(\"Refreshing data for operation:\", operation);\r\n      const { refreshMapping } = getActiveData();\r\n      await refreshMapping(operation);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value);\r\n    setOperationChoice(value);\r\n    handleRefreshForCurrentOperation(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n  }, []);\r\n  console.log(\"widget window\", window.widget);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        setFormattedData({ originalData: sheetData });\r\n\r\n        await handleRefreshForCurrentOperation(operationChoice);\r\n\r\n        setTimeout(() => {\r\n          console.log(\r\n            \"Applying automatic column mapping with:\",\r\n            mappedAttributes\r\n          );\r\n          if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n            const { simplifiedMappings } = generateColumnMappings(\r\n              headers,\r\n              mandatoryAttributes,\r\n              mappedAttributes\r\n            );\r\n\r\n            console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n            if (Object.keys(simplifiedMappings).length > 0) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                sheetData,\r\n                simplifiedMappings,\r\n                operationChoice,\r\n                mappedAttributes\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data automatically mapped with ${\r\n                  Object.keys(simplifiedMappings).length\r\n                } columns`\r\n              );\r\n            }\r\n          }\r\n        }, 500);\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(\"File validated successfully!\");\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(\r\n          \"The template uploaded and the selected operation do not match\"\r\n        );\r\n        handleReset(true);\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null);\r\n\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(\"Widget reset successfully!\");\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(true);\r\n  };\r\n\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled = columnHeaders.length === 0;\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      if (!formattedData) {\r\n        showErrorToast(\"No data to submit\");\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(\"Invalid operation type\");\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks, isDocumentPayload, documents } =\r\n        formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n\r\n      showSuccessToast(`Starting upload of ${totalChunks} chunks...`);\r\n\r\n      // For document payload, use the specific structure\r\n      if (operationChoice === \"3\" && isDocumentPayload) {\r\n        try {\r\n          // Create document-specific chunks if needed\r\n          const docChunks = [];\r\n          for (let i = 0; i < documents.length; i += 1000) {\r\n            docChunks.push(documents.slice(i, i + 1000));\r\n          }\r\n\r\n          for (let i = 0; i < docChunks.length; i++) {\r\n            const response = await api.post(endpoint, {\r\n              documents: docChunks[i],\r\n            });\r\n\r\n            if (response.status === 200) {\r\n              successCount++;\r\n              if (i % 5 === 0) {\r\n                showSuccessToast(\r\n                  `Processed ${i + 1} of ${docChunks.length} document chunks...`\r\n                );\r\n              }\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Document upload failed:\", error);\r\n          failureCount++;\r\n        }\r\n      } else {\r\n        // Use existing physical product structure\r\n        for (let i = 0; i < chunks.length; i++) {\r\n          try {\r\n            const chunk = chunks[i];\r\n            const response = await api.post(endpoint, {\r\n              items: chunk,\r\n            });\r\n\r\n            if (response.status === 200) {\r\n              successCount++;\r\n              if (i % 5 === 0) {\r\n                showSuccessToast(\r\n                  `Processed ${i + 1} of ${totalChunks} chunks...`\r\n                );\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error(`Chunk ${i + 1} failed:`, error);\r\n            failureCount++;\r\n          }\r\n        }\r\n      }\r\n\r\n      const finalMessage = `Upload complete: ${successCount} chunks successful, ${failureCount} failed`;\r\n      if (failureCount > 0) {\r\n        showErrorToast(finalMessage);\r\n      } else {\r\n        showSuccessToast(\"Upload successful!\");\r\n        setModalShow(false);\r\n        handleReset();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`Upload failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid d-flex justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div\r\n          className=\"w-100\"\r\n          style={{ maxWidth: \"1200px\", maxHeight: \"500px\" }}\r\n        >\r\n          <Stack className=\"mt-3\" gap={4}>\r\n            <Stack direction=\"horizontal\">\r\n              <CustomSelect\r\n                selectedValue={operationChoice}\r\n                onChange={handleOperationChange}\r\n                size=\"lg\"\r\n                className=\"w-50\"\r\n                options={{\r\n                  defaultLabel: \"Choose Operations\",\r\n                  list: [\r\n                    { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                    { value: \"2\", label: \"Physical Product Structure\" },\r\n                    { value: \"3\", label: \"Document\" },\r\n                    { value: \"4\", label: \"Physical Product-Document\" },\r\n                  ],\r\n                }}\r\n              />\r\n              <div className=\"ms-auto\">\r\n                <CustomButton\r\n                  variant=\"link\"\r\n                  size=\"lg\"\r\n                  onClick={handleDownloadTemplate}\r\n                  text=\"Download Template\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n\r\n            <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n              <FileUpload\r\n                ref={fileUploaderRef}\r\n                fileTypes={[\"XLSX\"]}\r\n                multiple={false}\r\n                onUpload={handleFileUpload}\r\n                onReset={handleReset}\r\n                disabled={isFileUploadDisabled}\r\n                message={\r\n                  isFileUploadDisabled\r\n                    ? \"Please select an operation first\"\r\n                    : \"Drag & Drop your files here or Click to browse\"\r\n                }\r\n              />\r\n            </div>\r\n\r\n            {isValidating && <Loader />}\r\n\r\n            <Stack direction=\"horizontal\" gap={2}>\r\n              <div className=\"ms-auto d-flex gap-5\">\r\n                {errors.length > 0 && (\r\n                  <CustomButton\r\n                    variant=\"danger\"\r\n                    onClick={() => setShowContentErrors(true)}\r\n                    text={`Content Errors (${errors.length})`}\r\n                  />\r\n                )}\r\n\r\n                <CustomButton\r\n                  variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n                  onClick={handleOpenSpreadsheetModal}\r\n                  text=\"Manage Spreadsheet Columns\"\r\n                  disabled={manageSpreadsheetDisabled}\r\n                />\r\n\r\n                <CustomButton\r\n                  variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n                  disabled={submitDisabled}\r\n                  size=\"lg\"\r\n                  onClick={() => setModalShow(true)}\r\n                  text=\"Submit\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        existingMappings={formattedData?.mappings ? formattedData.mappings : {}}\r\n        dropdownOptions={mappedAttributes?.dropdownOptions}\r\n        allNLSValues={mappedAttributes?.allNLSValues}\r\n        operationChoice={operationChoice}\r\n        onColumnsMapped={(mappings, finalMapping) => {\r\n          console.log(\"Column mappings received:\", mappings);\r\n\r\n          const columnMappings = mappings;\r\n\r\n          if (formattedData && formattedData.originalData) {\r\n            const transformedData = transformSheetDataWithMappings(\r\n              formattedData.originalData,\r\n              columnMappings,\r\n              operationChoice,\r\n              mappedAttributes\r\n            );\r\n\r\n            setFormattedData(transformedData);\r\n            showSuccessToast(\r\n              `Data mapped successfully with ${\r\n                Object.keys(mappings).length\r\n              } columns`\r\n            );\r\n          } else {\r\n            showErrorToast(\r\n              \"No sheet data available to transform with mappings\"\r\n            );\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","show","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","map","btn","index","label","useToast","showToast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","toast","showSuccessToast","options","arguments","length","undefined","showErrorToast","showInfoToast","showWarningToast","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","_config$MassUpload$ma","_config$MassUpload$ma2","console","log","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","errors","headers","Array","isArray","error","reader","FileReader","readAsBinaryString","onload","async","workbook","XLSX","e","target","result","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","includes","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","i","push","slice","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","toLowerCase","chunkIndex","chunk","progress","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","Number","valueToValidate","columnName","_row$columnName","some","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","onChange","Form","Select","value","defaultLabel","list","option","attrIndex","Alert","processedErrors","useMemo","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","split","join","rowNumber","columns","Object","values","sort","a","b","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","parent","CellMeasurer","columnIndex","rowIndex","column","err","ReusableAlert","_Fragment","AutoSizer","_ref3","List","rowCount","rowHeight","deferredMeasurementCache","CustomModal","ErrorPopup","onConfirm","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","currentMapping","filteredOptions","CustomSelect","uiLabel","selectedMappings","setSelectedMappings","allNLSValues","operationChoice","StaticTable","hasNLS","warn","normalizedHeader","hasMatch","nls","hasMatchingNLS","isMandatory","columnHeader","backendName","find","opt","getBackendNameForUILabel","prev","mappedAttribute","currentColumnHeader","selectedValues","entries","filter","_","mapping","attr","prepareDropdownOptions","onColumnsMapped","existingMappings","useEffect","keys","errorMessage","handleOkClick","group","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","initialOperationChoice","mappedAttributes","setMappedAttributes","setOperationChoice","ENOVIA_BASE_URL","process","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","effectiveOperation","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","item","systemAttributes","groupNLS","attributeGroups","apiNlsValues","systemNlsValues","Set","filteredGroupData","relevantAttributes","deploymentExtension","mappedData","attributesByGroup","refreshMapping","initialOperationType","documentData","setDocumentData","operationType","setOperationType","API_URL","fetchDocumentData","_documentInfo$attribu","body","preferedType","typeName","subTypes","runUXBL","metrics","UXName","client_app_domain","client_app_name","response","status","documentInfo","JSON","stringify","extensionAttributes","attributes","DocumentsAttributes","hardcodedNlsValues","apiOptions","fullName","nameParts","extractedName","hardcodedOptions","combinedMappedData","API_ENDPOINTS","transformSheetDataWithMappings","mappedAttributesData","documentItems","documentItem","dataelements","backendFieldName","CHUNK_SIZE","totalChunks","totalItems","originalData","mappings","isDocumentPayload","documents","attributeGroupMap","getPathForAttribute","transformedItems","transformedRow","_mappedData$find","uiLabelBackendName","Description","Type","path","pathParts","part","productTypeColumn","productType","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","productMappedAttributes","refreshProductMapping","useMassUpload","documentMappedAttributes","refreshDocumentMapping","useFetchDocumentData","getActiveData","handleRefreshForCurrentOperation","globalCollabSpaceTitles","window","widget","handleReset","selectElement","document","querySelector","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","minHeight","maxWidth","maxHeight","Stack","gap","direction","CustomButton","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","open","downloadTemplate","FileUpload","validationResult","setTimeout","transformedData","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","endpoint","successCount","failureCount","docChunks","api","post","items","finalMessage","ColumnMappingModal","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","securityContext1","getValue","WAFData","loadWAFData","csrfURL","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue"],"sourceRoot":""}