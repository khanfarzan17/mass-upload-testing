{"version":3,"file":"static/js/217.bc6d3a41.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Modal/customModal.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Alert/ReusableAlert.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","hooks/Mass-Upload/useMassUpload.js","hooks/Mass-Upload/useMassUploadDocument.js","components/Modals/SuccessModal.jsx","pages/mass-upload/massUpload.jsx","utils/getUserDetails.js","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled\r\n            ? \"Please select an operation first to Enable File uploading \"\r\n            : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\"❌ Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map(title => title.toLowerCase());\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            // Modified check that doesn't treat 0 as empty\r\n            if (\r\n              row[field] === undefined || \r\n              row[field] === null || \r\n              (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n            ) {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace = row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (!userCollabSpace || !lowerCaseCollabSpaceTitles.includes(userCollabSpace)) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n\r\n            \r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n             // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n             if (matchedOperation === \"Physical Product Structure\") {\r\n              columnName = \"Quantity\";\r\n              const quantityValue = row[columnName]?.toString().trim();\r\n              if (quantityValue) {\r\n                const numQuantity = Number(quantityValue);\r\n                if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                  validationErrors.push(\r\n                    `Row ${globalRowIndex + 2}: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                  );\r\n                  console.log(\r\n                    \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                    quantityValue\r\n                  );\r\n                }\r\n              }\r\n            }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\"❌ Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  onChange,\r\n  size,\r\n  className,\r\n  disabled,\r\n  options,\r\n}) => {\r\n  const defaultLabel = options?.defaultLabel || \"Please select\";\r\n  const list = options?.list || [];\r\n\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n  // Check if we have grouped options (array of objects with label and options properties)\r\n  const hasGroupedOptions =\r\n    Array.isArray(list) &&\r\n    list.length > 0 &&\r\n    list[0] &&\r\n    \"label\" in list[0] &&\r\n    \"options\" in list[0];\r\n\r\n  // console.log(\"CustomSelect received options:\", {\r\n  //   list,\r\n  //   hasGroupedOptions,\r\n  //   selectedValue,\r\n  // });\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{defaultLabel}</option> {/* Default option */}\r\n      {hasGroupedOptions\r\n        ? // Render grouped options with optgroup\r\n          list.map((group, groupIndex) => (\r\n            <optgroup key={`group-${groupIndex}`} label={group.label}>\r\n              {Array.isArray(group.options) &&\r\n                group.options.map((item, optionIndex) => (\r\n                  <option\r\n                    key={`option-${groupIndex}-${optionIndex}`}\r\n                    value={item.value}\r\n                  >\r\n                    {item.label}\r\n                  </option>\r\n                ))}\r\n            </optgroup>\r\n          ))\r\n        : // Render flat list of options\r\n          list.map((item, idx) => (\r\n            <option key={`option-${idx}`} value={item.value}>\r\n              {item.label}\r\n            </option>\r\n          ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\nimport \"./staticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || header}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import React from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n  dropdownOptions,\r\n  allNLSValues,\r\n  operationChoice,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  console.log(\"MappedList - Received dropdownOptions:\", dropdownOptions);\r\n  console.log(\"MappedList - Received operationChoice:\", operationChoice);\r\n  console.log(\"MappedList - Received allNLSValues:\", allNLSValues);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    console.log(\r\n      `Checking if header '${header}' matches any NLS value:`,\r\n      hasMatch\r\n    );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    console.log(\"Finding backend name for UI label:\", uiLabel);\r\n    console.log(\"Current dropdown options:\", dropdownOptions);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available\");\r\n      return uiLabel;\r\n    }\r\n\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    console.log(\"Found option:\", option);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    console.log(\"Preparing dropdown options for column:\", currentColumnHeader);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available for filtering\");\r\n      return [];\r\n    }\r\n\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader)\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    // For operation 2, we want to group options by their categories\r\n    if (operationChoice === \"2\") {\r\n      console.log(\r\n        \"Using grouped dropdown options for Product Structure operation\"\r\n      );\r\n\r\n      // Create grouped options structure\r\n      const groupedOptions = [];\r\n\r\n      // Debug information about existing data\r\n      console.log(\"All dropdown options:\", dropdownOptions);\r\n\r\n      // Look for EBOM attributes in the dropdown options\r\n      const ebomAttributes = dropdownOptions\r\n        .filter(\r\n          (attr) =>\r\n            (attr.group === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\") &&\r\n            !selectedValues.includes(attr.uiLabel)\r\n        )\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      console.log(\"Filtered EBOM attributes:\", ebomAttributes);\r\n\r\n      // Always add EBOM Attributes group if we have any EBOM attributes\r\n      if (ebomAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"EBOM Attributes\",\r\n          options: ebomAttributes,\r\n        });\r\n      }\r\n\r\n      // Add any Part Attributes group\r\n      const partAttributes = dropdownOptions\r\n        .filter(\r\n          (attr) =>\r\n            attr.group !== \"EBOM Attributes\" &&\r\n            attr.group !== \"System Attributes\" &&\r\n            !selectedValues.includes(attr.uiLabel)\r\n        )\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      console.log(\"Filtered Part attributes:\", partAttributes);\r\n\r\n      if (partAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"Item Attributes\",\r\n          options: partAttributes,\r\n        });\r\n      }\r\n\r\n      console.log(\"Final grouped dropdown options:\", groupedOptions);\r\n      return groupedOptions;\r\n    }\r\n\r\n    // For other operations, return flat list as before\r\n    const filteredOptions = dropdownOptions\r\n      .filter((attr) => !selectedValues.includes(attr.uiLabel))\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n\r\n    return filteredOptions;\r\n  };\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    console.log(\r\n      \"Selection changed for column:\",\r\n      columnHeader,\r\n      \"to value:\",\r\n      value\r\n    );\r\n\r\n    const backendName = getBackendNameForUILabel(value);\r\n    console.log(\"Mapped backend name:\", backendName);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        disabled: hasNLS && isMandatory,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n  dropdownOptions, // Receive dropdownOptions\r\n  allNLSValues, // Add this prop\r\n  operationChoice, // Add operation choice\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  console.log(\"ColumnMappingModal NLS values:\", allNLSValues);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, don't include them in the mappings at all\r\n            // This will effectively exclude them from the payload\r\n            console.log(\r\n              `Skipping unmapped column without NLS match: ${columnName}`\r\n            );\r\n            // Don't add anything to simplifiedMappings or completeMappings\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  console.log(\r\n    \"ColumnMappingModal - received dropdownOptions:\",\r\n    dropdownOptions\r\n  );\r\n  console.log(\"ColumnMappingModal - operation choice:\", operationChoice);\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n        dropdownOptions={dropdownOptions}\r\n        allNLSValues={allNLSValues} // Pass this to MappedList\r\n        operationChoice={operationChoice} // Pass operation choice\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = (initialOperationChoice) => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const [operationChoice, setOperationChoice] = useState(initialOperationChoice);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async (operation = null) => {\r\n    try {\r\n      // Use the passed operation or fall back to state\r\n      const effectiveOperation = operation || operationChoice;\r\n      console.log(\"Fetching column mapping for operation:\", effectiveOperation);\r\n\r\n      if (!effectiveOperation) {\r\n        console.log(\"No operation specified, skipping fetch\");\r\n        return;\r\n      }\r\n\r\n      // Update state if a new operation is passed\r\n      if (operation && operation !== operationChoice) {\r\n        setOperationChoice(operation);\r\n      }\r\n\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n      ];\r\n\r\n      // Define EBOM attributes for Product Structure operation\r\n      let ebomAttributes = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomAttributes = [\r\n          {\r\n            name: \"MBOMFindNumber__e7ead0d4e78a4d7f99e9e5fd900f8fdf\",\r\n            nls: \"Find Number\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"MBOMComponentLocation__00cc2e44830642d69dd3728d8c279a75\",\r\n            nls: \"Component Location\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name:\"Level\",\r\n            nls: \"Level\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n            \r\n          }\r\n        ];\r\n      }\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Add EBOM Attributes group for operation 2\r\n      if (effectiveOperation === \"2\" && !attributeGroups.includes(\"EBOM Attributes\")) {\r\n        attributeGroups.push(\"EBOM Attributes\");\r\n      }\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      // Get NLS values from EBOM attributes when operation is 2\r\n      let ebomNlsValues = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomNlsValues = ebomAttributes.map((item) => item.nls);\r\n        console.log(\"EBOM NLS Values:\", ebomNlsValues);\r\n      }\r\n\r\n      // Combine all NLS values including EBOM attributes if operation is 2\r\n      const allNLSValues = [...new Set([...apiNlsValues, ...systemNlsValues, ...ebomNlsValues])];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge non-system API attributes with hardcoded ones and EBOM attributes\r\n      let mergeAttributes = [...filteredGroupData, ...systemAttributes];\r\n      if (effectiveOperation === \"2\") {\r\n        mergeAttributes = [...mergeAttributes, ...ebomAttributes];\r\n        console.log(\"Added EBOM attributes to merged attributes for operation 2\", mergeAttributes);\r\n      }\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\") ||\r\n            (effectiveOperation === \"2\" && attr.group === \"EBOM Attributes\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || attr.group || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n      \r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      // For operation 2, log EBOM attributes as well\r\n      if (effectiveOperation === \"2\") {\r\n        console.log(\r\n          \"EBOM Attributes found:\",\r\n          relevantAttributes.filter(\r\n            (attr) => attr.groupNLS === \"EBOM Attributes\" || attr.group === \"EBOM Attributes\"\r\n          ).length\r\n        );\r\n        console.log(\r\n          \"Sample EBOM Attribute:\",\r\n          relevantAttributes.find((attr) => attr.groupNLS === \"EBOM Attributes\" || attr.group === \"EBOM Attributes\")\r\n        );\r\n      }\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationChoice) {\r\n      fetchColumnMapping();\r\n    }\r\n  }, [operationChoice]);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = (initialOperationType) => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const [mappedAttributes, setMappedAttributes] = useState({\r\n    allNLSValues: [],\r\n    dropdownOptions: [],\r\n    mappedData: [],\r\n  });\r\n  const [operationType, setOperationType] = useState(initialOperationType);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async (operation = null) => {\r\n    // Use passed operation or fall back to state\r\n    const effectiveOperation = operation || operationType;\r\n\r\n    if (effectiveOperation !== \"3\") {\r\n      console.log(\"Not document operation type, skipping fetch\");\r\n      return;\r\n    }\r\n\r\n    // Update state if new operation passed\r\n    if (operation && operation !== operationType) {\r\n      setOperationType(operation);\r\n    }\r\n\r\n    try {\r\n      console.log(\r\n        \"Fetching document data for operation type:\",\r\n        effectiveOperation\r\n      );\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      const body = {\r\n        type: \"Document\",\r\n        preferedType: \"Document\",\r\n        typeName: \"Document\",\r\n        subTypes: true,\r\n        runUXBL: true,\r\n        metrics: {\r\n          UXName: \"New\",\r\n          client_app_domain: \"3DEXPERIENCE 3DDashboard\",\r\n          client_app_name: \"ENXWDOC_AP\",\r\n        },\r\n      };\r\n\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        API_URL,\r\n        body,\r\n        headers\r\n      );\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\r\n          \"Failed to fetch document data. Invalid response structure.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\r\n        \"Full documentInfo structure:\",\r\n        JSON.stringify(documentInfo, null, 2)\r\n      );\r\n\r\n      // Check different possible paths for extensionAttributes\r\n      const extensionAttributes =\r\n        documentInfo?.extensionAttributes ||\r\n        documentInfo?.attributes?.extensionAttributes ||\r\n        [];\r\n\r\n      console.log(\"Found extensionAttributes:\", extensionAttributes);\r\n\r\n      // Your hardcoded document attributes\r\n      const DocumentsAttributes = [\r\n        {\r\n          name: \"description\",\r\n          nls: \"Description\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"name\",\r\n          nls: \"Document Name\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"type\",\r\n          nls: \"Document Type\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"title\",\r\n          nls: \"Title\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\",\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n      ];\r\n\r\n      // Extract dropdown options only if extensionAttributes exists\r\n      if (extensionAttributes && extensionAttributes.length > 0) {\r\n        // Extract all NLS values from API\r\n        const apiNlsValues = extensionAttributes.map((attr) => attr.nls);\r\n        console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n        // Extract NLS values from hardcoded attributes\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n        console.log(\"Hardcoded NLS Values:\", hardcodedNlsValues);\r\n\r\n        // Combine both NLS value sets (using Set to remove duplicates)\r\n        const allNLSValues = [\r\n          ...new Set([...apiNlsValues, ...hardcodedNlsValues]),\r\n        ];\r\n        console.log(\r\n          \"Document Operation - All Combined NLS Values:\",\r\n          allNLSValues\r\n        );\r\n\r\n        // Process API attributes (with name splitting)\r\n        const apiOptions = extensionAttributes.map((attr) => {\r\n          // Extract the attribute name after the dot\r\n          const fullName = attr.name;\r\n          const nameParts = fullName.split(\".\");\r\n          const extractedName = nameParts.length > 1 ? nameParts[1] : fullName;\r\n\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: extractedName,\r\n            fullName: attr.name,\r\n            group: \"API Attributes\",\r\n          };\r\n        });\r\n\r\n        // Process hardcoded attributes\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        // Combine both for mappedData\r\n        const combinedMappedData = [...apiOptions, ...hardcodedOptions];\r\n\r\n        console.log(\"Document Operation - API Dropdown Options:\", apiOptions);\r\n        console.log(\r\n          \"Document Operation - Combined Mapped Data:\",\r\n          combinedMappedData\r\n        );\r\n\r\n        // Update state with specific configurations for each property\r\n        setMappedAttributes({\r\n          allNLSValues: allNLSValues, // Combined NLS values for matching\r\n          dropdownOptions: apiOptions, // Only API options for dropdown\r\n          mappedData: combinedMappedData, // Both API and hardcoded for payload\r\n        });\r\n      } else {\r\n        // If no API attributes, use hardcoded ones for everything\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n\r\n        // Create hardcoded options for mappedData when no API data exists\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        setMappedAttributes({\r\n          allNLSValues: hardcodedNlsValues, // Use hardcoded NLS for matching\r\n          dropdownOptions: [], // Empty dropdown options as requested\r\n          mappedData: hardcodedOptions, // Use hardcoded options for payload\r\n        });\r\n      }\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationType === \"3\") {\r\n      fetchDocumentData();\r\n    }\r\n  }, [operationType]);\r\n\r\n  // Return structure matching useMassUpload\r\n  return {\r\n    mappedAttributes,\r\n    refreshMapping: fetchDocumentData,\r\n  };\r\n};\r\n\r\nexport default useFetchDocumentData;\r\n","import React, { useMemo } from \"react\";\r\nimport CustomModal from \"../Modal/customModal\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"react-virtualized/styles.css\"; // Make sure to import the styles\r\nimport \"./SuccessModal.css\"; // We'll create this file for custom styling\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\nimport { handleExportExcel } from \"../../utils/helpers\"; // Import the export function\r\n\r\nconst SuccessModal = ({\r\n  show = false,\r\n  onHide = () => {},\r\n  responseData = [],\r\n}) => {\r\n  // Create a cache for cell measurements\r\n  const cache = useMemo(() => {\r\n    return new CellMeasurerCache({\r\n      fixedWidth: true,\r\n      defaultHeight: 50,\r\n    });\r\n  }, [responseData.length]);\r\n\r\n  // These are our column definitions\r\n  const columns = [\r\n    { key: \"name\", header: \"Name\", width: \"40%\" },\r\n    { key: \"revision\", header: \"Revision\", width: \"10%\" },\r\n    { key: \"status\", header: \"Status\", width: \"15%\" },\r\n    { key: \"message\", header: \"Message\", width: \"35%\" },\r\n  ];\r\n\r\n  // Handle export to Excel\r\n  const handleExport = () => {\r\n    handleExportExcel(responseData, \"upload-results.xlsx\");\r\n  };\r\n\r\n  // Reset cache when data changes\r\n  React.useEffect(() => {\r\n    cache.clearAll();\r\n  }, [responseData, cache]);\r\n\r\n  // Render an individual row\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const item = responseData[index];\r\n\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"virtualized-row\">\r\n          <div\r\n            className=\"virtualized-cell\"\r\n            style={{ width: columns[0].width }}\r\n            title={item.name}\r\n          >\r\n            {item.name}\r\n          </div>\r\n          <div\r\n            className=\"virtualized-cell\"\r\n            style={{ width: columns[1].width }}\r\n            title={item.revision}\r\n          >\r\n            {item.revision}\r\n          </div>\r\n          <div\r\n            className={`virtualized-cell status-cell ${item.status.toLowerCase()}`}\r\n            style={{ width: columns[2].width }}\r\n            title={item.status}\r\n          >\r\n            {item.status}\r\n          </div>\r\n          <div\r\n            className=\"virtualized-cell\"\r\n            style={{ width: columns[3].width }}\r\n            title={item.message}\r\n          >\r\n            {item.message}\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Upload Results\"\r\n      size=\"lg\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n\r\n        {\r\n          label: \"Export to Excel\",\r\n          variant: \"success\",\r\n          onClick: handleExport,\r\n        },\r\n      ]}\r\n    >\r\n      <div className=\"success-modal-content\">\r\n        <ReusableAlert\r\n          variant=\"success\"\r\n          message={\r\n            <>\r\n              ✅ <strong>Success:</strong> {responseData.length} item\r\n              {responseData.length > 1 ? \"s\" : \"\"} processed successfully!\r\n            </>\r\n          }\r\n          className=\"mb-3\"\r\n        />\r\n\r\n        <div className=\"virtualized-table-container\">\r\n          {/* Table Header */}\r\n          <div className=\"virtualized-header\">\r\n            {columns.map((column) => (\r\n              <div\r\n                key={column.key}\r\n                className=\"virtualized-header-cell\"\r\n                style={{ width: column.width }}\r\n              >\r\n                {column.header}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Table Body with Virtualized List */}\r\n          <div className=\"virtualized-body\">\r\n            <AutoSizer>\r\n              {({ height, width }) => (\r\n                <List\r\n                  width={width}\r\n                  height={height - 10} // Adjust to account for header\r\n                  rowCount={responseData.length}\r\n                  rowHeight={cache.rowHeight}\r\n                  deferredMeasurementCache={cache}\r\n                  rowRenderer={rowRenderer}\r\n                  overscanRowCount={5}\r\n                />\r\n              )}\r\n            </AutoSizer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default SuccessModal;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport {\r\n  globalCollabSpaceTitles,\r\n  globalCollabSpaceNames,\r\n} from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\nimport getUserDetails from \"../../utils/getUserDetails\";\r\n// import ReusableTable from \"../../components/Table/Table\";\r\nimport SuccessModal from \"../../components/Modals/SuccessModal\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadItems\",\r\n  2: \"/massUpload/uploadProductStructure\",\r\n  3: \"/massUpload/documents\",\r\n  4: \"/massUpload/uploadProductDocument\",\r\n};\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData,\r\n  collabMapping // Add this parameter\r\n) => {\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped data in Massupload:\", mappedData);\r\n\r\n  // For Document operation type (3), use different processing logic\r\n  if (operationType === \"3\") {\r\n    console.log(\"Processing document data with operation type 3\");\r\n\r\n    // Transform each row into document format\r\n    // Transform each row into document format\r\n    const documentItems = sheetData.map((row) => {\r\n      // Create separate objects for root-level data and nested dataelements\r\n      const rootData = {};\r\n      const dataelements = {};\r\n      const apiAttributes = {}; // For storing API attributes\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (\r\n          !columnMappings[columnName] ||\r\n          value === undefined ||\r\n          value === null\r\n        )\r\n          return;\r\n\r\n        const backendFieldName = columnMappings[columnName];\r\n\r\n        // Find attribute in mappedData to check if it's an API attribute\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === backendFieldName ||\r\n            attr.backendName === backendFieldName\r\n        );\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendFieldName}`,\r\n          attribute\r\n        );\r\n\r\n        // Special case handling for known fields\r\n        if (backendFieldName === \"Document Type\") {\r\n          rootData[\"classificationType\"] = value;\r\n        } else if (backendFieldName === \"Collaborative Space\") {\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (\r\n          backendFieldName.toLowerCase().includes(\"collaborative\") ||\r\n          backendFieldName.toLowerCase().includes(\"collab\")\r\n        ) {\r\n          // Try to catch variations of Collaborative Space\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (backendFieldName === \"Document Name\") {\r\n          dataelements[\"name\"] = value;\r\n        }\r\n        // For API attributes with group \"API Attributes\", include them with their fullName\r\n        else if (\r\n          attribute &&\r\n          attribute.group === \"API Attributes\" &&\r\n          attribute.fullName\r\n        ) {\r\n          // Store API attributes using their full name\r\n          dataelements[attribute.backendName] = value;\r\n\r\n          // console.log(\r\n          //   `Added API attribute: ${attribute.backendName} = ${value}`\r\n          // );\r\n        }\r\n        // For regular mapped fields that aren't API attributes\r\n        else if (attribute || backendFieldName) {\r\n          // Only include mapped fields (either through attribute lookup or direct mapping)\r\n          dataelements[backendFieldName] = value;\r\n        }\r\n        // Fields without mappings or API attribute status are excluded\r\n      });\r\n\r\n      // Combine root data, dataelements, and API attributes\r\n      return {\r\n        ...rootData,\r\n        dataelements,\r\n        // ...apiAttributes, // Include API attributes at root level\r\n      };\r\n    });\r\n\r\n    // Log sample document for verification\r\n    if (documentItems.length > 0) {\r\n      console.log(\r\n        \"Sample document structure:\",\r\n        JSON.stringify(documentItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < documentItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(documentItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: documentItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      // Special field to indicate this is document data\r\n      isDocumentPayload: true,\r\n      documents: documentItems,\r\n    };\r\n  } else {\r\n    // KEEP EXISTING CODE FOR PHYSICAL PRODUCTS (operations 1, 2, 4)\r\n    console.log(\r\n      \"Processing physical product data with operation type:\",\r\n      operationType\r\n    );\r\n\r\n    const attributeGroupMap = {};\r\n    if (Array.isArray(mappedData)) {\r\n      mappedData.forEach((option) => {\r\n        attributeGroupMap[option.backendName] = option.group || \"System\";\r\n        if (option.fullName) {\r\n          attributeGroupMap[`fullName:${option.backendName}`] = option.fullName;\r\n        }\r\n        console.log(\r\n          `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n        );\r\n      });\r\n    }\r\n\r\n    // The rest of your existing code for physical products...\r\n    const getPathForAttribute = (backendName, columnName) => {\r\n      if (operationType === \"1\" && backendName === \"title\") {\r\n        console.log(\"Operation type 1: title placed inside attributes\");\r\n        return \"attributes.title\";\r\n      }\r\n\r\n      if (\r\n        backendName === \"type\" ||\r\n        backendName === \"classificationType\" ||\r\n        backendName === \"collabSpaceTitle\"\r\n      ) {\r\n        if (backendName === \"collabSpaceTitle\") {\r\n          console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n          return \"collabSpaceTitle\";\r\n        }\r\n\r\n        console.log(`${backendName} placed at root level`);\r\n        return backendName;\r\n      }\r\n\r\n      // For the physical product operation (in getPathForAttribute)\r\n      if (backendName === \"collabSpaceTitle\") {\r\n        console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n        return \"collabSpaceTitle\";\r\n      }\r\n\r\n      // Add a special case for collabspaceName if we need it in the payload\r\n      if (backendName === \"collabspaceName\") {\r\n        console.log(\"collabspaceName mapped to root\");\r\n        return \"collabSpace\";\r\n      }\r\n\r\n      if (\r\n        columnName === \"EIN Number\" ||\r\n        backendName === \"PartNumber\" ||\r\n        backendName === \"Part Number\"\r\n      ) {\r\n        console.log(\r\n          \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n        );\r\n        return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n      }\r\n\r\n      if (backendName === \"description\") {\r\n        console.log(\"Description mapped to attributes.description\");\r\n        return \"attributes.description\";\r\n      }\r\n\r\n      const group = attributeGroupMap[backendName];\r\n      console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n      if (!group) {\r\n        console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n        return null;\r\n      }\r\n\r\n      if (group === \"System Attributes\") {\r\n        return `attributes.${backendName}`;\r\n      } else {\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      }\r\n    };\r\n\r\n    const transformedItems = sheetData.map((row) => {\r\n      const transformedRow = {};\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (!columnMappings[columnName]) return;\r\n\r\n        const uiLabelBackendName = columnMappings[columnName];\r\n\r\n        const systemAttributeMappings = {\r\n          Title: \"title\",\r\n          Description: \"description\",\r\n          \"Collaborative Space\": \"collabSpaceTitle\",\r\n          \"Collab Space\": \"collabSpaceTitle\",\r\n          Type: \"type\",\r\n        };\r\n\r\n        const backendName =\r\n          systemAttributeMappings[uiLabelBackendName] ||\r\n          mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n            ?.backendName ||\r\n          uiLabelBackendName;\r\n\r\n        // Add collabspaceName mapping here when backendName is collabspaceTitle\r\n        if (backendName === \"collabSpaceTitle\") {\r\n          // Set the title as usual\r\n          transformedRow[\"collabSpaceTitle\"] = value;\r\n\r\n          // Also set the collabspace name using the mapping\r\n          if (collabMapping && collabMapping[value]) {\r\n            transformedRow[\"collabSpace\"] = collabMapping[value];\r\n            console.log(\r\n              `Mapped collabspace title \"${value}\" to name \"${collabMapping[value]}\"`\r\n            );\r\n          } else {\r\n            console.warn(`No mapping found for collabspace title: ${value}`);\r\n          }\r\n        }\r\n\r\n        const path = getPathForAttribute(backendName, columnName);\r\n\r\n        if (\r\n          backendName === \"title\" ||\r\n          backendName === \"description\" ||\r\n          backendName.toLowerCase() === \"collabspace\"\r\n        ) {\r\n          console.log(`Placing ${backendName} at path: ${path}`);\r\n        }\r\n\r\n        if (!path) return;\r\n\r\n        const pathParts = path.split(\".\");\r\n        let current = transformedRow;\r\n\r\n        for (let i = 0; i < pathParts.length - 1; i++) {\r\n          const part = pathParts[i];\r\n          if (!current[part]) {\r\n            current[part] = {};\r\n          }\r\n          current = current[part];\r\n        }\r\n\r\n        current[pathParts[pathParts.length - 1]] = value;\r\n      });\r\n\r\n      if (operationType === \"1\") {\r\n        const productTypeColumn = Object.keys(row).find(\r\n          (key) =>\r\n            key.toLowerCase().includes(\"physical product\") ||\r\n            key.toLowerCase().includes(\"raw material\")\r\n        );\r\n\r\n        if (productTypeColumn && row[productTypeColumn]) {\r\n          const productType = row[productTypeColumn].toLowerCase().trim();\r\n          transformedRow[\"type\"] = productType.includes(\"physical product\")\r\n            ? \"VPMReference\"\r\n            : productType.includes(\"raw material\")\r\n            ? \"Raw_Material\"\r\n            : \"\";\r\n\r\n          console.log(\r\n            `Product type determined: ${transformedRow[\"type\"]} from value: ${row[productTypeColumn]}`\r\n          );\r\n        }\r\n      }\r\n\r\n      return transformedRow;\r\n    });\r\n\r\n    if (transformedItems.length > 0) {\r\n      console.log(\r\n        \"Sample transformed item structure:\",\r\n        JSON.stringify(transformedItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: transformedItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      isDocumentPayload: false,\r\n    };\r\n  }\r\n};\r\n\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabSpaceTitle\",\r\n    \"Collab Space\": \"collabSpaceTitle\",\r\n    Type: \"classificationType\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  const getBackendNameForHeader = (header) => {\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  columnHeaders.forEach((columnName) => {\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    } else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\nconst getTestData = (isSuccess = true) => {\r\n  if (isSuccess) {\r\n    return {\r\n      success: true,\r\n      responses: [\r\n        {\r\n          name: \"Amit-DOC-0000001-36\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000002-42\",\r\n          revision: \"1\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000003-51\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000004-22\",\r\n          revision: \"2\",\r\n          status: \"Failed\",\r\n          message: \"Required attribute missing\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000005-33\",\r\n          revision: \"0\",\r\n          status: \"Failed\",\r\n          message: \"Invalid document type\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000006-44\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000007-55\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000008-66\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n\r\n        {\r\n          name: \"Amit-DOC-0000009-77\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000010-88\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000011-99\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000012-00\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n      ],\r\n    };\r\n  } else {\r\n    return {\r\n      success: false,\r\n      responses: [\r\n        {\r\n          name: \"Amit-DOC-0000004-22\",\r\n          revision: \"2\",\r\n          status: \"Failed\",\r\n          message: \"Required attribute missing\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000005-33\",\r\n          revision: \"0\",\r\n          status: \"Failed\",\r\n          message: \"Invalid document type\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n};\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false);\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef();\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  const [securityContext, setSecurityContext] = useState(null); // New state for security context\r\n  const [collabNames, setCollabNames] = useState([]); // Add new state for names\r\n  const [collabMapping, setCollabMapping] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [apiResponse, setApiResponse] = useState(null);\r\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\r\n\r\n  const {\r\n    mappedAttributes: productMappedAttributes,\r\n    refreshMapping: refreshProductMapping,\r\n  } = useMassUpload();\r\n  const {\r\n    mappedAttributes: documentMappedAttributes,\r\n    refreshMapping: refreshDocumentMapping,\r\n  } = useFetchDocumentData(operationChoice);\r\n\r\n  const getActiveData = () => {\r\n    console.log(\"Getting active data for operation:\", operationChoice);\r\n\r\n    switch (operationChoice) {\r\n      case \"1\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"2\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"3\":\r\n        return {\r\n          mappedAttributes: documentMappedAttributes,\r\n          refreshMapping: refreshDocumentMapping,\r\n        };\r\n      case \"4\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      default:\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n    }\r\n  };\r\n\r\n  const { mappedAttributes, refreshMapping } = getActiveData();\r\n\r\n  console.log(\"Active operation:\", operationChoice);\r\n  console.log(\"Active mappedAttributes:\", mappedAttributes);\r\n\r\n  const handleRefreshForCurrentOperation = async (operation) => {\r\n    try {\r\n      console.log(\"Refreshing data for operation:\", operation);\r\n      const { refreshMapping } = getActiveData();\r\n      await refreshMapping(operation);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value);\r\n    setOperationChoice(value);\r\n    handleRefreshForCurrentOperation(value);\r\n  };\r\n\r\n  // Update the existing useEffect to handle collabspace names\r\n\r\n  // Update the existing useEffect to create the title-to-name mapping\r\n  useEffect(() => {\r\n    // console.log(\r\n    //   \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n    //   globalCollabSpaceTitles\r\n    // );\r\n    // console.log(\r\n    //   \"[MassUpload.jsx] Global collabSpaceNames:\",\r\n    //   globalCollabSpaceNames\r\n    // );\r\n\r\n    // Set titles and names arrays\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n\r\n    if (Array.isArray(globalCollabSpaceNames)) {\r\n      setCollabNames([...globalCollabSpaceNames]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceNames is not an array!\",\r\n        globalCollabSpaceNames\r\n      );\r\n    }\r\n\r\n    // Create a mapping object from titles to names\r\n    if (\r\n      Array.isArray(globalCollabSpaceTitles) &&\r\n      Array.isArray(globalCollabSpaceNames) &&\r\n      globalCollabSpaceTitles.length === globalCollabSpaceNames.length\r\n    ) {\r\n      const mapping = {};\r\n      for (let i = 0; i < globalCollabSpaceTitles.length; i++) {\r\n        mapping[globalCollabSpaceTitles[i]] = globalCollabSpaceNames[i];\r\n      }\r\n\r\n      setCollabMapping(mapping);\r\n      console.log(\r\n        \"[MassUpload.jsx] Collabspace title-to-name mapping:\",\r\n        mapping\r\n      );\r\n    }\r\n\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceNames:\", collabNames);\r\n  }, []);\r\n\r\n  // Add this after the existing console.log\r\n  // console.log(\"getUserDetails function\", getUserDetails);\r\n\r\n  // Add this code to actually call the function and show its response\r\n  useEffect(() => {\r\n    async function fetchUserDetails() {\r\n      try {\r\n        console.log(\"Calling getUserDetails...\");\r\n        const userData = await getUserDetails();\r\n        console.log(\" User Details Response:\", userData);\r\n        // Add this line to store the user data\r\n        setUserDetails(userData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user details:\", error);\r\n      }\r\n    }\r\n\r\n    fetchUserDetails();\r\n  }, []);\r\n  // console.log(\"widget window\", window.widget);\r\n  // Add an effect to get and set the security context\r\n  useEffect(() => {\r\n    try {\r\n      // Get security context from widget\r\n      if (window.widget && typeof window.widget.getValue === \"function\") {\r\n        const securityContextValue = window.widget.getValue(\"Credentials\");\r\n        console.log(\"Security Context:\", securityContextValue);\r\n        setSecurityContext(securityContextValue);\r\n      } else {\r\n        console.warn(\"window.widget or getValue function not available\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting security context:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        setFormattedData({ originalData: sheetData });\r\n\r\n        await handleRefreshForCurrentOperation(operationChoice);\r\n\r\n        setTimeout(() => {\r\n          console.log(\r\n            \"Applying automatic column mapping with:\",\r\n            mappedAttributes\r\n          );\r\n          if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n            const { simplifiedMappings } = generateColumnMappings(\r\n              headers,\r\n              mandatoryAttributes,\r\n              mappedAttributes\r\n            );\r\n\r\n            console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n            if (Object.keys(simplifiedMappings).length > 0) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                sheetData,\r\n                simplifiedMappings,\r\n                operationChoice,\r\n                mappedAttributes,\r\n                collabMapping // Add this parameter\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data automatically mapped with ${\r\n                  Object.keys(simplifiedMappings).length\r\n                } columns`\r\n              );\r\n            }\r\n          }\r\n        }, 500);\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(\"File validated successfully!\");\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(\r\n          \"The template uploaded and the selected operation do not match\"\r\n        );\r\n        handleReset(true);\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null);\r\n\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(\"Widget reset successfully!\");\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(true);\r\n  };\r\n\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled = columnHeaders.length === 0;\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      // Close the confirmation modal immediately\r\n      setModalShow(false);\r\n\r\n      // Show loader while submitting\r\n      setIsSubmitting(true);\r\n\r\n      if (!formattedData) {\r\n        showErrorToast(\"No data to submit\");\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(\"Invalid operation type\");\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks, isDocumentPayload, documents } =\r\n        formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n      let allResponses = []; // Array to collect all response items\r\n\r\n      // For document payload, use the specific structure\r\n      if (operationChoice === \"3\" && isDocumentPayload) {\r\n        try {\r\n          // Create document-specific chunks if needed\r\n          const docChunks = [];\r\n          for (let i = 0; i < documents.length; i += 1000) {\r\n            docChunks.push(documents.slice(i, i + 1000));\r\n          }\r\n\r\n          // Create user details object once\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          for (let i = 0; i < docChunks.length; i++) {\r\n            const response = await api.post(endpoint, {\r\n              ...userInfo,\r\n              documents: docChunks[i],\r\n            });\r\n\r\n            if (response.status === 200) {\r\n              successCount++;\r\n\r\n              // FOR TESTING: Use test data instead of actual API response\r\n              const testData = getTestData(true);\r\n              console.log(\"Using test success data:\", testData);\r\n\r\n              // Add test responses to our collection\r\n              if (Array.isArray(testData.responses)) {\r\n                allResponses = [...allResponses, ...testData.responses];\r\n              }\r\n\r\n              // Log what would normally happen\r\n              if (response.data && response.data.success === true) {\r\n                console.log(\"Real API returned success: true\");\r\n              } else {\r\n                console.log(\r\n                  \"Real API returned success: false, overriding with test data\"\r\n                );\r\n              }\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Document upload failed:\", error);\r\n          failureCount++;\r\n        }\r\n      } else {\r\n        // For other operations (physical products)\r\n        const userInfo =\r\n          operationChoice === \"1\"\r\n            ? {\r\n                ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n                ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n                ...(securityContext\r\n                  ? { securityContext: securityContext }\r\n                  : {}),\r\n                emailNotification: false,\r\n              }\r\n            : {};\r\n\r\n        for (let i = 0; i < chunks.length; i++) {\r\n          try {\r\n            const chunk = chunks[i];\r\n            const response = await api.post(endpoint, {\r\n              ...userInfo,\r\n              items: chunk,\r\n            });\r\n\r\n            if (response.status === 200) {\r\n              successCount++;\r\n\r\n              // FOR TESTING: Use test data instead of actual API response\r\n              const testData = getTestData(true);\r\n              console.log(\"Using test success data:\", testData);\r\n\r\n              // Add test responses to our collection\r\n              if (Array.isArray(testData.responses)) {\r\n                allResponses = [...allResponses, ...testData.responses];\r\n              }\r\n\r\n              // Log what would normally happen\r\n              if (response.data && response.data.success === true) {\r\n                console.log(\"Real API returned success: true\");\r\n              } else {\r\n                console.log(\r\n                  \"Real API returned success: false, overriding with test data\"\r\n                );\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error(`Chunk ${i + 1} failed:`, error);\r\n            failureCount++;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Store the collected responses for display\r\n      setApiResponse(allResponses);\r\n\r\n      const finalMessage = `Upload complete: ${successCount} chunks successful, ${failureCount} failed, ${allResponses.length} items processed`;\r\n\r\n      if (failureCount > 0) {\r\n        showErrorToast(finalMessage);\r\n      } else if (allResponses.length > 0) {\r\n        showSuccessToast(\"Upload successful!\");\r\n        setShowSuccessModal(true); // Show success modal with results\r\n      } else {\r\n        showSuccessToast(\r\n          \"Upload completed, but no response items were returned\"\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`Upload failed: ${error.message}`);\r\n    } finally {\r\n      // Hide loader regardless of success/failure\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid d-flex justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div\r\n          className=\"w-100\"\r\n          style={{ maxWidth: \"1200px\", maxHeight: \"500px\" }}\r\n        >\r\n          <Stack className=\"mt-3\" gap={4}>\r\n            <Stack direction=\"horizontal\">\r\n              <CustomSelect\r\n                selectedValue={operationChoice}\r\n                onChange={handleOperationChange}\r\n                size=\"lg\"\r\n                className=\"w-50\"\r\n                options={{\r\n                  defaultLabel: \"Choose Operations\",\r\n                  list: [\r\n                    { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                    { value: \"2\", label: \"Physical Product Structure\" },\r\n                    { value: \"3\", label: \"Document\" },\r\n                    { value: \"4\", label: \"Physical Product-Document\" },\r\n                  ],\r\n                }}\r\n              />\r\n              <div className=\"ms-auto\">\r\n                <CustomButton\r\n                  variant=\"link\"\r\n                  size=\"lg\"\r\n                  onClick={handleDownloadTemplate}\r\n                  text=\"Download Template\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n\r\n            <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n              <FileUpload\r\n                ref={fileUploaderRef}\r\n                fileTypes={[\"XLSX\"]}\r\n                multiple={false}\r\n                onUpload={handleFileUpload}\r\n                onReset={handleReset}\r\n                disabled={isFileUploadDisabled}\r\n                message={\r\n                  isFileUploadDisabled\r\n                    ? \"Please select an operation first\"\r\n                    : \"Drag & Drop your files here or Click to browse\"\r\n                }\r\n              />\r\n            </div>\r\n\r\n            {isValidating && <Loader />}\r\n\r\n            {/* Add this where you want the loader to appear */}\r\n            {isSubmitting && <Loader />}\r\n\r\n            <Stack direction=\"horizontal\" gap={2}>\r\n              {/* <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          /> */}\r\n              <div className=\"ms-auto d-flex gap-5\">\r\n                {errors.length > 0 && (\r\n                  <CustomButton\r\n                    variant=\"danger\"\r\n                    onClick={() => setShowContentErrors(true)}\r\n                    text={`Content Errors (${errors.length})`}\r\n                  />\r\n                )}\r\n\r\n                <CustomButton\r\n                  variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n                  onClick={handleOpenSpreadsheetModal}\r\n                  text=\"Manage Spreadsheet Columns\"\r\n                  disabled={manageSpreadsheetDisabled}\r\n                />\r\n\r\n                <CustomButton\r\n                  variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n                  disabled={submitDisabled}\r\n                  size=\"lg\"\r\n                  onClick={() => setModalShow(true)}\r\n                  text=\"Submit\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        existingMappings={formattedData?.mappings ? formattedData.mappings : {}}\r\n        dropdownOptions={mappedAttributes?.dropdownOptions}\r\n        allNLSValues={mappedAttributes?.allNLSValues}\r\n        operationChoice={operationChoice}\r\n        onColumnsMapped={(mappings, finalMapping) => {\r\n          console.log(\"Column mappings received:\", mappings);\r\n\r\n          const columnMappings = mappings;\r\n\r\n          if (formattedData && formattedData.originalData) {\r\n            const transformedData = transformSheetDataWithMappings(\r\n              formattedData.originalData,\r\n              columnMappings,\r\n              operationChoice,\r\n              mappedAttributes,\r\n              collabMapping\r\n            );\r\n\r\n            setFormattedData(transformedData);\r\n            showSuccessToast(\r\n              `Data mapped successfully with ${\r\n                Object.keys(mappings).length\r\n              } columns`\r\n            );\r\n          } else {\r\n            showErrorToast(\r\n              \"No sheet data available to transform with mappings\"\r\n            );\r\n          }\r\n        }}\r\n      />\r\n\r\n      <SuccessModal\r\n        show={showSuccessModal}\r\n        onHide={() => setShowSuccessModal(false)}\r\n        responseData={apiResponse || []}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { loadPlatformAPI } from \"./helpers\";\r\n\r\nexport default async function getUserDetails() {\r\n  try {\r\n    const PlatformAPI = await loadPlatformAPI();\r\n    const user = await PlatformAPI.getUser();\r\n    // console.log(\" User details retrieved successfully:\", user);\r\n    // console.log(\"User ID:\", user?.id);\r\n    // console.log(\"User name:\", user?.name);\r\n    // console.log(\"User email:\", user?.email);\r\n    // console.log(\"User roles:\", user?.roles);\r\n    // console.log(\"User preferences:\", user?.preferences);\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\" Error getting user details:\", error);\r\n    return null; // Or throw the error, depending on how you want to handle it\r\n  }\r\n}\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n    \r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","show","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","map","btn","index","label","useToast","showToast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","toast","showSuccessToast","options","arguments","length","undefined","showErrorToast","showInfoToast","showWarningToast","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","_config$MassUpload$ma","_config$MassUpload$ma2","console","log","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","errors","headers","Array","isArray","error","reader","FileReader","readAsBinaryString","onload","async","workbook","XLSX","e","target","result","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","includes","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","i","push","slice","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","toLowerCase","chunkIndex","chunk","progress","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","Number","valueToValidate","columnName","_row$columnName","some","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","onChange","defaultLabel","list","hasGroupedOptions","Form","Select","value","group","groupIndex","item","optionIndex","idx","Alert","processedErrors","useMemo","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","split","join","rowNumber","columns","Object","values","sort","a","b","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","parent","CellMeasurer","columnIndex","rowIndex","column","err","ReusableAlert","_Fragment","AutoSizer","_ref3","List","rowCount","rowHeight","deferredMeasurementCache","CustomModal","ErrorPopup","onConfirm","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","currentMapping","filteredOptions","CustomSelect","uiLabel","selectedMappings","setSelectedMappings","allNLSValues","operationChoice","StaticTable","hasNLS","warn","normalizedHeader","hasMatch","nls","hasMatchingNLS","isMandatory","columnHeader","backendName","option","find","opt","getBackendNameForUILabel","prev","mappedAttribute","currentColumnHeader","selectedValues","entries","filter","_","mapping","groupedOptions","ebomAttributes","attr","partAttributes","prepareDropdownOptions","onColumnsMapped","existingMappings","useEffect","keys","errorMessage","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","initialOperationChoice","mappedAttributes","setMappedAttributes","setOperationChoice","ENOVIA_BASE_URL","process","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","effectiveOperation","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","systemAttributes","groupNLS","attributeGroups","apiNlsValues","systemNlsValues","ebomNlsValues","Set","filteredGroupData","mergeAttributes","relevantAttributes","deploymentExtension","mappedData","attributesByGroup","refreshMapping","initialOperationType","documentData","setDocumentData","operationType","setOperationType","API_URL","fetchDocumentData","_documentInfo$attribu","body","preferedType","typeName","subTypes","runUXBL","metrics","UXName","client_app_domain","client_app_name","response","status","documentInfo","JSON","stringify","extensionAttributes","attributes","DocumentsAttributes","hardcodedNlsValues","apiOptions","fullName","nameParts","extractedName","hardcodedOptions","combinedMappedData","responseData","React","clearAll","revision","handleExport","handleExportExcel","overscanRowCount","API_ENDPOINTS","transformSheetDataWithMappings","mappedAttributesData","collabMapping","documentItems","rootData","dataelements","backendFieldName","attribute","collabspaceTitle","CHUNK_SIZE","totalChunks","totalItems","originalData","mappings","isDocumentPayload","documents","attributeGroupMap","getPathForAttribute","transformedItems","transformedRow","_mappedData$find","uiLabelBackendName","Description","Type","path","pathParts","part","productTypeColumn","productType","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","getTestData","success","responses","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","userDetails","setUserDetails","securityContext","setSecurityContext","collabNames","setCollabNames","setCollabMapping","isSubmitting","setIsSubmitting","apiResponse","setApiResponse","showSuccessModal","setShowSuccessModal","productMappedAttributes","refreshProductMapping","useMassUpload","documentMappedAttributes","refreshDocumentMapping","useFetchDocumentData","getActiveData","handleRefreshForCurrentOperation","globalCollabSpaceTitles","globalCollabSpaceNames","userData","PlatformAPI","loadPlatformAPI","getUser","getUserDetails","fetchUserDetails","window","widget","getValue","securityContextValue","handleReset","selectElement","document","querySelector","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","minHeight","maxWidth","maxHeight","Stack","gap","direction","CustomButton","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","open","downloadTemplate","FileUpload","validationResult","setTimeout","transformedData","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","endpoint","successCount","failureCount","allResponses","docChunks","userInfo","email","login","userId","api","post","testData","emailNotification","items","finalMessage","ColumnMappingModal","SuccessModal","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","securityContext1","WAFData","loadWAFData","csrfURL","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader"],"sourceRoot":""}