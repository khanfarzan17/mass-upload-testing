{"version":3,"file":"static/js/502.c7d4e498.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","components/Modal/customModal.jsx","components/ErrorPopup/ErrorPopup.jsx","pages/mass-upload/massUpload.jsx","utils/downloadTemplate.js","massuUploadIndex.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div className=\"cell-content\">{cellContent}</div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  widgetType,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // const { updateTableData } = meta;\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          {...{\r\n            checked: row.getIsSelected(),\r\n            onChange: row.getToggleSelectedHandler(),\r\n          }}\r\n        />\r\n      ),\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    enableRowSelection: true,\r\n    defaultColumn: {\r\n      size: 159,\r\n      minSize: 45,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    // meta: {\r\n    //   updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    // },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    // Check if the widgetType is \"Revision_FLoat_Widget\" or \"Plantassignment\"//\r\n\r\n    // Otherwise, use handleExportExcel with the default file name \"table-data.xlsx\"//\r\n    console.log(\"Export buttton clicked\");\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plantassignment\") {\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 &&\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import React, { useState } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\n\r\nconst FileUpload = ({\r\n  fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n  multiple = true,\r\n  onUpload,\r\n  onReset,\r\n}) => {\r\n  const [files, setFiles] = useState([]);\r\n\r\n  const handleChange = (selectedFiles) => {\r\n    const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n    setFiles(fileArray);\r\n\r\n    // Callback function to send files to parent component\r\n    if (onUpload) {\r\n      onUpload(fileArray);\r\n    }\r\n  };\r\n\r\n  const handleClearFiles = () => {\r\n    setFiles([]);\r\n    if (onUpload) {\r\n      onUpload([]);\r\n    }\r\n    // Call the reset function to clear all states\r\n    if (onReset) {\r\n      onReset();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"file-upload-container\">\r\n      <h2>Drag & Drop Files</h2>\r\n      <div className=\"upload-area\">\r\n        <FileUploader\r\n          multiple={multiple}\r\n          handleChange={handleChange}\r\n          name=\"file\"\r\n          types={fileTypes}\r\n        />\r\n        <div className=\"file-list\">\r\n          {files.length > 0 ? (\r\n            files.map((file, index) => (\r\n              <div\r\n                key={index}\r\n                style={{ display: \"flex\", alignItems: \"center\" }}\r\n              >\r\n                <p style={{ marginRight: \"10px\" }}>📁 {file.name}</p>\r\n                <button\r\n                  onClick={handleClearFiles}\r\n                  style={{\r\n                    background: \"none\",\r\n                    border: \"none\",\r\n                    cursor: \"pointer\",\r\n                    color: \"red\",\r\n                    marginBottom: \"10px\",\r\n                  }}\r\n                >\r\n                  X\r\n                </button>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>No files uploaded yet.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUpload;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useMemo } from \"react\";\r\nimport ReusableTable from \"../Table/Table\";\r\nimport { Alert } from \"react-bootstrap\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  // Format errors into table data\r\n  const errorData = useMemo(\r\n    () =>\r\n      errors.map((error, index) => {\r\n        const rowMatch = error.match(/Row (\\d+):/);\r\n        const rowNum = rowMatch ? rowMatch[1] : \"-\";\r\n        const columnMatch = error.match(/\"([^\"]*)\" is required/);\r\n        const columnName = columnMatch ? columnMatch[1] : \"-\";\r\n        const errorMsg = rowMatch ? error.split(\": \")[1] : error;\r\n\r\n        return {\r\n          id: index,\r\n          rowNumber: rowNum,\r\n          errorDescription: errorMsg,\r\n          columnName: columnName,\r\n        };\r\n      }),\r\n    [errors]\r\n  );\r\n\r\n  // Define table columns\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        accessorKey: \"rowNumber\",\r\n        header: \"Row Number\",\r\n      },\r\n      {\r\n        accessorKey: \"errorDescription\",\r\n        header: \"Error Description\",\r\n      },\r\n      {\r\n        accessorKey: \"columnName\",\r\n        header: \"Column Name\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Alert variant=\"info\" className=\"text-center text-sm-start mb-3\">\r\n        <strong>Note:</strong> Below reports show only uploaded spreadsheet\r\n        error rows. To resolve below issues, do the required changes in the\r\n        spreadsheet and re-import.\r\n      </Alert>\r\n      <ReusableTable columns={columns} data={errorData} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","import React, { useState } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack, Spinner, Alert, Table } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst MassUpload = () => {\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n\r\n  // Function to validate the uploaded file\r\n  const validateFile = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsBinaryString(file);\r\n\r\n      reader.onload = (e) => {\r\n        const workbook = XLSX.read(e.target.result, { type: \"binary\" });\r\n        const sheetName = workbook.SheetNames[0];\r\n        const worksheet = workbook.Sheets[sheetName];\r\n\r\n        // 🟢 Extract headers explicitly even if there is no row data\r\n        const headers = XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0];\r\n\r\n        if (!headers || headers.length === 0) {\r\n          reject([\"The uploaded file has no content or Empty.\"]);\r\n          return;\r\n        }\r\n        // 🔥 Extract actual sheet data (excluding headers)\r\n        const sheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n        console.log(\"sheetData\", sheetData);\r\n\r\n        if (sheetData.length === 0) {\r\n          reject([\r\n            \"The uploaded file contains only headers but no data. Please add at least one row.\",\r\n          ]);\r\n          return;\r\n        }\r\n\r\n        // Extract headers from first row\r\n        const fileHeaders = Object.keys(sheetData[0]);\r\n\r\n        // 🔥 **NEW: Check for duplicate headers**\r\n        const headerCounts = {};\r\n        fileHeaders.forEach((header) => {\r\n          headerCounts[header] = (headerCounts[header] || 0) + 1;\r\n        });\r\n\r\n        const duplicateHeaders = Object.keys(headerCounts).filter(\r\n          (header) => headerCounts[header] > 1\r\n        );\r\n\r\n        if (duplicateHeaders.length > 0) {\r\n          reject([`Duplicate headers found: ${duplicateHeaders.join(\", \")}`]);\r\n          return;\r\n        }\r\n\r\n        // Determine matching operation based on headers\r\n        let matchedOperation = null;\r\n        for (const [key, value] of Object.entries(config.MassUpload)) {\r\n          if (\r\n            value.fileHeaders.every((header) => fileHeaders.includes(header))\r\n          ) {\r\n            matchedOperation = key;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (!matchedOperation) {\r\n          reject([\"File headers do not match any expected template.\"]);\r\n          return;\r\n        }\r\n\r\n        const expectedHeaders = config.MassUpload[matchedOperation].fileHeaders;\r\n        console.log(\"Expected Headers\", expectedHeaders);\r\n        const mandatoryAttributes =\r\n          config.MassUpload[matchedOperation].mandatoryAttributes;\r\n\r\n        console.log(\"Mandatory Attributes\", mandatoryAttributes);\r\n        // Validate missing headers\r\n        const missingHeaders = expectedHeaders.filter(\r\n          (header) => !fileHeaders.includes(header)\r\n        );\r\n        if (missingHeaders.length > 0) {\r\n          reject([`Missing required headers: ${missingHeaders.join(\", \")}`]);\r\n          return;\r\n        }\r\n\r\n        // Validate mandatory fields are not empty\r\n        const validationErrors = [];\r\n        sheetData.forEach((row, index) => {\r\n          mandatoryAttributes.forEach((field) => {\r\n            if (!row[field] || row[field].toString().trim() === \"\") {\r\n              validationErrors.push(\r\n                `Row ${index + 2}: \"${field}\" is required but is empty.`\r\n              );\r\n            }\r\n          });\r\n        });\r\n\r\n        if (validationErrors.length > 0) {\r\n          console.log(\"Rejecting with validation errors:\", validationErrors); // ADDED LOG HERE\r\n          reject(validationErrors);\r\n        } else {\r\n          console.log(\"Resolving validation\"); // ADDED LOG HERE\r\n          resolve();\r\n        }\r\n      };\r\n\r\n      reader.onerror = () => reject([\"File reading failed.\"]);\r\n    });\r\n  };\r\n\r\n  const handleFileUpload = (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    setIsValidating(true);\r\n    validateFile(files[0])\r\n      .then(() => {\r\n        console.log(\"Validation successful (inside .then)\");\r\n        setErrors([]);\r\n        setIsValidating(false);\r\n        showSuccessToast(\" No Error File validated successfully!\"); // Show success toast\r\n      })\r\n      .catch((validationErrors) => {\r\n        console.log(\"Validation failed (inside .catch\", validationErrors);\r\n        setErrors(validationErrors);\r\n        setIsValidating(false);\r\n        setErrorModalShow(true);\r\n      });\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    // Reset all states to their initial values\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n\r\n    // Reset the dropdown\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    // Show toast message\r\n    showSuccessToast(\"Widget reset successfully!\");\r\n  };\r\n\r\n  console.log(\"Operation Choice:\", errors);\r\n\r\n  return (\r\n    <>\r\n      <Stack className=\"mt-3\" gap={4}>\r\n        {/* Choose operation and download template */}\r\n        <Stack direction=\"horizontal\">\r\n          <Form.Select\r\n            aria-label=\"Choose Operations\"\r\n            style={{\r\n              width: \"30%\",\r\n              border: \"1px solid #007bff\",\r\n              outline: \"none\",\r\n              borderRadius: \"8px\",\r\n            }}\r\n            onChange={(e) => setOperationChoice(e.target.value)}\r\n          >\r\n            <option value=\"\">Choose Operations</option>\r\n            <option value=\"1\">Physical Product/Raw Material</option>\r\n            <option value=\"2\">Physical Product Structure</option>\r\n            <option value=\"3\">Document</option>\r\n            <option value=\"4\">Physical Product-Document</option>\r\n          </Form.Select>\r\n\r\n          <CustomButton\r\n            variant=\"link ms-auto \"\r\n            onClick={handleDownloadTemplate}\r\n            text=\"Download Template\"\r\n          />\r\n        </Stack>\r\n\r\n        {/* Drag and Drop File Upload */}\r\n        <FileUpload\r\n          fileTypes={[\"XLSX\"]}\r\n          multiple={false}\r\n          onUpload={handleFileUpload}\r\n          onReset={handleReset}\r\n        />\r\n\r\n        {/* Show loader while validating */}\r\n        {isValidating && <Loader />}\r\n\r\n        {/* Submit Button and Content Error Button */}\r\n        <Stack direction=\"horizontal\" gap={2}>\r\n          <Form.Check type=\"checkbox\" label=\"Background\" />\r\n          <div className=\"ms-auto d-flex gap-5\">\r\n            {errors.length > 0 && (\r\n              <CustomButton\r\n                variant=\"danger\"\r\n                onClick={() => setShowContentErrors(true)}\r\n                text={`Content Errors (${errors.length})`}\r\n              />\r\n            )}\r\n            <CustomButton\r\n              variant=\"primary\"\r\n              onClick={() => setModalShow(true)}\r\n              text=\"Submit\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* Content Errors Modal */}\r\n      <CustomModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        title=\"Content Errors\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Close\",\r\n            variant: \"danger\",\r\n            onClick: () => setShowContentErrors(false),\r\n          },\r\n        ]}\r\n      >\r\n        <ErrorPopup errors={errors} />\r\n      </CustomModal>\r\n\r\n      {/* Confirmation Modal */}\r\n      <CustomModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        title=\"Custom Modal Title\"\r\n        footerButtons={[\r\n          {\r\n            label: \"Cancel\",\r\n            variant: \"danger\",\r\n            onClick: () => setModalShow(false),\r\n          },\r\n          {\r\n            label: \"Confirm\",\r\n            variant: \"success\",\r\n            onClick: () => alert(\"Confirmed!\"),\r\n          },\r\n        ]}\r\n      >\r\n        <p>This is a reusable modal component with dynamic content.</p>\r\n      </CustomModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","sortable","useSortable","attributes","listeners","setNodeRef","transform","isDragging","opacity","position","top","CSS","Transform","toString","transition","getSize","zIndex","cursor","backgroundColor","ref","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","concat","getIsResizing","cell","getIsPinned","cellContent","getValue","getWidgetStorageKey","widgetType","console","warn","data","editable","meta","dispatch","useDispatch","tableData","setTableData","useState","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","useRef","isScrolled","setIsScrolled","useEffect","handleScroll","e","target","scrollTop","tableContainer","current","addEventListener","removeEventListener","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","error","initialOrder","otherColumns","map","push","setItem","stringify","log","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","index","updateTableData","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","useReactTable","state","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","enableRowSelection","defaultColumn","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","original","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","length","columnSizingInfo","columnSizing","_Fragment","CustomButton","handleSelectAll","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","onDragEnd","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","changedCells","useToast","showToast","message","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","Bounce","otherOptions","toast","showSuccessToast","options","arguments","undefined","showErrorToast","showInfoToast","showWarningToast","fileTypes","multiple","onUpload","onReset","files","setFiles","handleClearFiles","FileUploader","handleChange","selectedFiles","fileArray","name","types","file","display","alignItems","background","border","color","marginBottom","show","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","btn","label","errors","errorData","rowMatch","match","rowNum","columnMatch","columnName","rowNumber","errorDescription","split","Alert","ReusableTable","MassUpload","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","isValidating","setIsValidating","operationChoice","setOperationChoice","setErrors","Stack","gap","direction","Form","Select","outline","borderRadius","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","window","open","downloadTemplate","FileUpload","Promise","resolve","reject","reader","FileReader","readAsBinaryString","onload","workbook","XLSX","result","sheetName","SheetNames","worksheet","Sheets","sheet_to_json","sheetData","defval","fileHeaders","Object","keys","headerCounts","duplicateHeaders","filter","join","matchedOperation","key","entries","config","expectedHeaders","mandatoryAttributes","missingHeaders","validationErrors","field","trim","onerror","then","catch","handleReset","selectElement","document","querySelector","Check","CustomModal","ErrorPopup","alert","root","widget","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start"],"sourceRoot":""}