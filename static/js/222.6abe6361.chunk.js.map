{"version":3,"file":"static/js/222.6abe6361.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Modal/customModal.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Alert/ReusableAlert.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","pages/mass-upload/ExcelProcessingService.js","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","hooks/Mass-Upload/useMassUpload.js","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","pages/mass-upload/massUpload.jsx","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n    // const handleDragOver = (event) => {\r\n    //   if (disabled) {\r\n    //     event.preventDefault();\r\n    //     event.stopPropagation();\r\n    //     showErrorToast(\"Please choose an operation from the drop-down first\");\r\n    //   } else {\r\n    //     // Allow drag-over behavior for valid file uploads\r\n    //     event.preventDefault();\r\n    //     event.dataTransfer.dropEffect = \"copy\";\r\n    //   }\r\n    // };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled ? \"Please select an operation first\" : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"Starting file validation for:\", file.name, selectedOperation);\r\n    console.log(\"Selected Operation:\", selectedOperation);\r\n    console.log(\"File Name:\", file.name);\r\n    console.log(\r\n      \"[validateFile.js] Required Collaborative Space:\",\r\n      collabSpaceTitles\r\n    );\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    // 🔍 Ensure collabSpaceTitles is an array\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\r\n        \"[validateFile.js] ❌ collabSpaceTitles is not an array!\",\r\n        collabSpaceTitles\r\n      );\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    console.log(\r\n      \"[validateFile.js] Required Collaborative Spaces:\",\r\n      collabSpaceTitles\r\n    );\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = (e) => {\r\n      console.log(\"File successfully read. Parsing...\");\r\n\r\n      const workbook = XLSX.read(e.target.result, { type: \"binary\" });\r\n      const sheetName = workbook.SheetNames[0];\r\n      console.log(\"Detected sheet name:\", sheetName);\r\n\r\n      const worksheet = workbook.Sheets[sheetName];\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n      console.log(\"Extracted headers:\", headers);\r\n\r\n      if (!headers || headers.length === 0) {\r\n        console.error(\"❌ No headers found in the file.\");\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      // ✅ Convert worksheet into JSON (with empty cell values captured)\r\n      const sheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n      console.log(\"Extracted sheet data:\", sheetData);\r\n\r\n      if (sheetData.length === 0) {\r\n        console.error(\"❌ No row data found. Only headers exist.\");\r\n        reject({\r\n          errors: [\r\n            \"The uploaded file contains only headers but no data. Please add at least one row.\",\r\n          ],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // ✅ Extract headers from the first data row\r\n      const fileHeaders = Object.keys(sheetData[0]);\r\n      console.log(\"Parsed file headers:\", fileHeaders);\r\n\r\n      // Get expected headers for selected operation\r\n      const expectedHeadersForOperation =\r\n        config.MassUpload[operationNames[selectedOperation]]?.fileHeaders;\r\n      console.log(\r\n        \"Expected headers for selected operation:\",\r\n        expectedHeadersForOperation\r\n      );\r\n\r\n      if (!expectedHeadersForOperation) {\r\n        console.error(\r\n          \"❌ No template configuration found for selected operation\"\r\n        );\r\n        reject({\r\n          errors: [\"Invalid operation selected.\"],\r\n          headers: [],\r\n          isTemplateMismatch: true,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Check if headers match the selected operation's template\r\n      const headersMismatch = !expectedHeadersForOperation.every((header) =>\r\n        fileHeaders.includes(header)\r\n      );\r\n\r\n      if (headersMismatch) {\r\n        console.error(\"❌ Template does not match selected operation\");\r\n        reject({\r\n          errors: [\r\n            `The uploaded template does not match the selected operation: ${operationNames[selectedOperation]}`,\r\n          ],\r\n          headers: fileHeaders,\r\n          isTemplateMismatch: true,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // 🔍 **Step 1: Find Matching Operation Based on Headers**\r\n      let matchedOperation = null;\r\n      for (const [key, value] of Object.entries(config.MassUpload)) {\r\n        if (value.fileHeaders.every((header) => fileHeaders.includes(header))) {\r\n          matchedOperation = key;\r\n          console.log(\"Matched operation:\", matchedOperation);\r\n          break;\r\n        }\r\n      }\r\n      if (!matchedOperation) {\r\n        console.error(\"❌ No matching operation found for given headers.\");\r\n        reject({\r\n          errors: [\"File headers do not match any expected template.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // ✅ **Step 2: Validate Headers**\r\n      const expectedHeaders = config.MassUpload[matchedOperation].fileHeaders;\r\n      console.log(\"Expected Headers:\", expectedHeaders);\r\n      const mandatoryAttributes =\r\n        config.MassUpload[matchedOperation].mandatoryAttributes;\r\n      console.log(\"Mandatory Attributes:\", mandatoryAttributes);\r\n\r\n      // 🔍 **Step 3: Check for Missing Headers**\r\n      const missingHeaders = expectedHeaders.filter(\r\n        (header) => !fileHeaders.includes(header)\r\n      );\r\n      if (missingHeaders.length > 0) {\r\n        console.error(\"❌ Missing headers:\", missingHeaders);\r\n        reject({\r\n          errors: [`Missing required headers: ${missingHeaders.join(\", \")}`],\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      // 🔍 **Step 4: Validate Mandatory Fields**\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n      sheetData.forEach((row, index) => {\r\n        mandatoryAttributes.forEach((field) => {\r\n          if (!row[field] || row[field].toString().trim() === \"\") {\r\n            validationErrors.push(\r\n              `Row ${index + 2}: \"${field}\" is required but is empty`\r\n            );\r\n          }\r\n        });\r\n\r\n        // 🔍 **Step 5: Validate \"Collaborative Space\" Field**//\r\n        if (matchedOperation === \"Physical Product\" || matchedOperation === \"Document\") {\r\n        const userCollabSpace = row[\"Collaborative Space\"]\r\n          ? row[\"Collaborative Space\"].trim()\r\n          : \"\";\r\n        console.log(\r\n          `[validateFile.js] Row ${index + 2}: User's Collaborative Space:`,\r\n          userCollabSpace\r\n        );\r\n\r\n        if (!userCollabSpace) {\r\n          validationErrors.push(\r\n            `Row ${index + 2}: \"Collaborative Space\"  is Missing or Empty`\r\n          );\r\n        } else if (!collabSpaceTitles.includes(userCollabSpace)) {\r\n          validationErrors.push(\r\n            `Row ${\r\n              index + 2\r\n            }: You are not allowed to create in  \"Collaborative Space -\" (${userCollabSpace}) `\r\n          );\r\n        }\r\n      }\r\n        // **🔍 EIN Number / Document Name Validation based on matchedOperation**\r\n        let valueToValidate = null;\r\n        let columnName = \"\";  // Add this line to store the column name\r\n\r\n        if (\r\n          matchedOperation === \"Physical Product\" ||\r\n          matchedOperation === \"Physical Product Structure\"\r\n        ) {\r\n          columnName = \"EIN Number\";  // Store column name\r\n          valueToValidate = row[columnName]\r\n            ? row[columnName].toString().trim()\r\n            : null;\r\n          console.log(\r\n            `[validateFile.js] Row ${index + 2}: Checking EIN Number:`,\r\n            valueToValidate\r\n          );\r\n        } else if (\r\n          matchedOperation === \"Physical Product-Document\" ||\r\n          matchedOperation === \"Document\"\r\n        ) {\r\n          columnName = \"Document Name\";  // Store column name\r\n          valueToValidate = row[columnName]\r\n            ? row[columnName].toString().trim()\r\n            : null;\r\n          console.log(\r\n            `[validateFile.js] Row ${index + 2}: Checking Document Name:`,\r\n            valueToValidate\r\n          );\r\n        }\r\n\r\n        if (valueToValidate) {\r\n          const hasInvalidPrefix = invalidPrefixes.some((prefix) =>\r\n            valueToValidate.startsWith(prefix)\r\n          );\r\n          if (hasInvalidPrefix) {\r\n            console.error(\r\n              `[validateFile.js] ❌ Invalid prefix found in ${valueToValidate}`\r\n            );\r\n            validationErrors.push(\r\n              `Row ${index + 2}: \"${columnName}\" value \"${valueToValidate}\" has an invalid prefix. Not allowed prefixes: ${invalidPrefixes.join(\r\n                \", \"\r\n              )}`\r\n            );\r\n          }\r\n        } else {\r\n          console.warn(\r\n            `[validateFile.js] 🚨 Row ${index + 2}: ${columnName} is missing.`\r\n          );\r\n        }\r\n      });\r\n\r\n      // Compare the value in \"Collaborative Space\" with the provided collabSpaceTitle\r\n\r\n      // 🔴 **If there are validation errors, reject but return headers**\r\n      if (validationErrors.length > 0) {\r\n        console.log(\"Validation errors with mandatory attributes:\", {\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes, // Make sure we're including this\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes, // Add this line\r\n        });\r\n        return;\r\n      }\r\n\r\n      // ✅ **Final Step: Resolve with Headers and Sheet Data**\r\n      console.log(\"✅ File validation successful. No errors found.\");\r\n      resolve({\r\n        headers,\r\n        sheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes, // Make sure we're returning mandatoryAttributes\r\n      });\r\n    };\r\n\r\n    // ❌ **Handle File Read Errors**\r\n\r\n    reader.onerror = () => {\r\n      console.error(\"❌ Error reading the file.\");\r\n      reject({ errors: [\"File reading failed.\"], headers: [] });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  options,\r\n  onChange,\r\n  size,\r\n  className,\r\n}) => {\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{options.defaultLabel}</option> {/* Default option */}\r\n      {options.list.map((option, attrIndex) => (\r\n        <option key={attrIndex} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  console.log(\"Errors in ErrorPopup:\", errors);\r\n  // Group errors by row number\r\n  const groupedErrors = new Map();\r\n\r\n  errors.forEach((error) => {\r\n    // Extract row number and column name using regex\r\n    const rowMatch = error.match(/Row (\\d+):/);\r\n    const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/); // Modified regex\r\n\r\n    const rowNum = rowMatch ? rowMatch[1] : \"\"; // Get row number or default to \"-\"\r\n    // If columnMatch exists, use the captured column name, else check if it's a Collaborative Space error\r\n    const columnName = columnMatch\r\n      ? columnMatch[1]\r\n      : error.includes(\"Collaborative Space\")\r\n      ? \"Collaborative Space\"\r\n      : \"N/A\";\r\n    const errorMsg = rowMatch ? error.split(\": \")[1] : error; // Extract error message\r\n    // Initialize array for errors if row number is not already in the Map\r\n    if (!groupedErrors.has(rowNum)) {\r\n      groupedErrors.set(rowNum, []);\r\n    }\r\n    // Add error details to the groupedErrors Map\r\n    groupedErrors.get(rowNum).push({ errorMsg, columnName });\r\n  });\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️ Note:</strong> Below reports show only uploaded spreadsheet\r\n      error rows. To resolve these issues, update the spreadsheet and re-import.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={errorMessage}\r\n        className=\"custom-alert\"\r\n      />\r\n      <div className=\"error-table-container\">\r\n        <Table responsive bordered className=\"custom-error-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Row Number</th>\r\n              <th>Column Name</th>\r\n              <th>Error Description</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Array.from(groupedErrors.entries()).length > 0 ? (\r\n              Array.from(groupedErrors.entries()).map(\r\n                ([rowNum, errorDetails]) =>\r\n                  errorDetails.map(({ columnName, errorMsg }, index) => (\r\n                    <tr key={`${rowNum}-${index}`}>\r\n                      {/* Only display row number on first occurrence */}\r\n                      {index === 0 ? (\r\n                        <td\r\n                          className=\"row-number\"\r\n                          rowSpan={errorDetails.length}\r\n                        >\r\n                          {rowNum}\r\n                        </td>\r\n                      ) : null}\r\n                      <td className=\"column-name\">{columnName}</td>\r\n                      <td className=\"error-description\">{errorMsg}</td>\r\n                    </tr>\r\n                  ))\r\n              )\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={3} className=\"text-center no-errors\">\r\n                  No Errors Found\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","import * as XLSX from 'xlsx';\r\n\r\nconst BATCH_SIZE = 1000; // Configurable batch size\r\n\r\nexport class ExcelProcessingService {\r\n  async processExcelFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      \r\n      reader.onload = async (e) => {\r\n        try {\r\n          const workbook = XLSX.read(e.target.result, { type: 'binary' });\r\n          const worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n          const data = XLSX.utils.sheet_to_json(worksheet);\r\n          \r\n          // Process data in batches\r\n          const batches = this.createBatches(data);\r\n          resolve(batches);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      };\r\n\r\n      reader.onerror = () => reject(new Error('File reading failed'));\r\n      reader.readAsBinaryString(file);\r\n    });\r\n  }\r\n\r\n  createBatches(data) {\r\n    const batches = [];\r\n    for (let i = 0; i < data.length; i += BATCH_SIZE) {\r\n      const batch = data.slice(i, i + BATCH_SIZE);\r\n      const transformedBatch = this.transformBatchToPayload(batch);\r\n      batches.push(transformedBatch);\r\n    }\r\n    return batches;\r\n  }\r\n\r\n  transformBatchToPayload(batch) {\r\n    return {\r\n      items: batch.map(row => ({\r\n        type: \"VPMReference\",\r\n        attributes: {\r\n          title: row.Title || '',\r\n          description: row.Description || '',\r\n          \"dseno:EnterpriseAttributes\": {\r\n            \"XP_VPMReference_Ext.EMR_ERP_PrimaryUOM\": row[\"Unit Of Measure\"] || ''\r\n          },\r\n          \"dseng:EnterpriseReference\": {\r\n            partNumber: row[\"EIN Number\"] || ''\r\n          }\r\n        },\r\n        classificationType: row[\"Type\"] || \"Standard\",\r\n        collabspace: row[\"Collaborative Space\"] || ''\r\n      })),\r\n      background: false,\r\n      emailNotification: false,\r\n      securityContext: `VPLMProjectLeader.0000000001.${batch[0][\"Collaborative Space\"] || ''}`,\r\n      userId: \"emrserviceuser\"\r\n    };\r\n  }\r\n}","// ConfirmationModal.jsx\r\nimport React, { useState } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport { ExcelProcessingService } from \"../../pages/mass-upload/ExcelProcessingService\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm, file }) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const handleConfirm = async () => {\r\n    if (!file) return;\r\n\r\n    setIsProcessing(true);\r\n    const excelService = new ExcelProcessingService();\r\n\r\n    try {\r\n      const batches = await excelService.processExcelFile(file);\r\n\r\n      // Process each batch\r\n      let processedBatches = 0;\r\n      for (const batch of batches) {\r\n        // Here you would send the batch to your API\r\n        console.log(\"Processing batch:\", batch);\r\n\r\n        // Update progress\r\n        processedBatches++;\r\n        const currentProgress = (processedBatches / batches.length) * 100;\r\n        setProgress(currentProgress);\r\n\r\n        // Simulate API call delay\r\n        await new Promise((resolve) => setTimeout(resolve, 500));\r\n      }\r\n\r\n      onConfirm();\r\n      setIsProcessing(false);\r\n      onHide();\r\n    } catch (error) {\r\n      console.error(\"Batch processing failed:\", error);\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n          disabled: isProcessing,\r\n        },\r\n        {\r\n          label: isProcessing ? \"Processing...\" : \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: handleConfirm,\r\n          disabled: isProcessing,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n      {isProcessing && (\r\n        <div className=\"mt-3\">\r\n          <ProgressBar\r\n            now={progress}\r\n            label={`${Math.round(progress)}%`}\r\n            animated\r\n          />\r\n          <p className=\"text-center mt-2\">\r\n            Processing data in batches... ({Math.round(progress)}%)\r\n          </p>\r\n        </div>\r\n      )}\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\nimport \"./staticTable.css\";\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleCheckboxChange,\r\n  checkedItems,\r\n  handleSelectChange,\r\n  selectedAttributes,\r\n  mappedAttributes, // Passed mapped attributes\r\n  mandatoryAttributes,\r\n}) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n\r\n  console.log(\"Mapped Attributes prop:\", mappedAttributes);\r\n  console.log(\"columnHeaders\", columnHeaders);\r\n  console.log(\"static table recieved manditory Attribute\", mandatoryAttributes);\r\n  console.log(\"Dropdown Options :\", dropdownOptions);\r\n\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n    const match = allNLSValues.includes(header);\r\n    console.log(`Header \"${header}\" NLS match:`, match ? \"✅\" : \"❌\");\r\n    return match;\r\n  };\r\n\r\n  return (\r\n    <Table bordered className=\"table-light \">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\"> Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((header, index) => {\r\n          const isMandatory = mandatoryAttributes.includes(header);\r\n          const hasNLS = hasMatchingNLS(header);\r\n          // Log the state of each row\r\n          console.log(`Row ${index}:`, {\r\n            header,\r\n            hasNLS,\r\n            isMandatory,\r\n            defaultLabel: hasNLS ? header : \"\",\r\n          });\r\n          return (\r\n            <tr key={index}>\r\n              <td>{header}</td>\r\n              <td>\r\n                <CustomSelect\r\n                  index={index}\r\n                  selectedValue={selectedAttributes[index] || header}\r\n                  onChange={handleSelectChange}\r\n                  size=\"lg\"\r\n                  className=\"w-100\"\r\n                  disabled={!hasNLS}\r\n                  options={{\r\n                    defaultLabel: hasNLS\r\n                      ? header\r\n                      : \"Please select from Drop Down\", // Show header only if NLS matches\r\n                    list: dropdownOptions.map((attr) => ({\r\n                      // Always show all mapped attributes\r\n                      value: attr.backendName,\r\n                      label: attr.uiLabel,\r\n                    })),\r\n                  }}\r\n                />\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = () => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async () => {\r\n    try {\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      // Store all NLS values from groupData for header matching\r\n      const allNLSValues = groupData.map((item) => item.nls);\r\n\r\n      const relevantAttributes =\r\n        attributeResponse.output.results?.[0]?.groupData?.filter(\r\n          (attr) => attr.deploymentExtension === true\r\n        ) || [];\r\n\r\n      // const relevantAttributes = groupData.filter(\r\n      //   (attr) => attr.deploymentExtension === true\r\n      // );\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name, // Backend Name\r\n      }));\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\"Mapped Attributes (for dropdown):\", mappedData);\r\n      setMappedAttributes({\r\n        allNLSValues: groupData.map((item) => item.nls),\r\n        dropdownOptions: mappedData,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchColumnMapping();\r\n  }, []);\r\n\r\n  return { mappedAttributes };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import React, { useState, useEffect } from \"react\"; // Corrected import for useState\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n\r\nconst MappedList = ({ columnHeaders, mandatoryAttributes }) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  const { mappedAttributes } = useMassUpload();\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [selectedAttributes, setSelectedAttributes] = useState({});\r\n  const [filterMappedAttributes, setfilterMappedAttributes] = useState({\r\n    allNLSValues: [],\r\n    dropdownOptions: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(mappedAttributes)) {\r\n      console.log(\"Filtered mapped attributes:\", mappedAttributes);\r\n      setfilterMappedAttributes({\r\n        allNLSValues: mappedAttributes.map((attr) => attr.uiLabel),\r\n        dropdownOptions: mappedAttributes,\r\n      });\r\n    }\r\n  }, [mappedAttributes]);\r\n\r\n  const handleCheckboxChange = (index) => {\r\n    setCheckedItems({ ...checkedItems, [index]: !checkedItems[index] });\r\n  };\r\n  const handleSelectChange = (index, selectedValue) => {\r\n    setSelectedAttributes({ ...selectedAttributes, [index]: selectedValue });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={columnHeaders}\r\n      handleCheckboxChange={handleCheckboxChange}\r\n      checkedItems={checkedItems}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedAttributes={selectedAttributes}\r\n      mappedAttributes={mappedAttributes}\r\n      mandatoryAttributes={mandatoryAttributes}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show,\r\n  onHide,\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n}) => {\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport { globalCollabSpaceTitles } from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false); // New state for spreadsheet modal\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef(); // Add this ref\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Log the global variable directly to verify its contents\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n      console.log(\"Validation Result:\", validationResult);\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n      } = validationResult;\r\n\r\n      console.log(\"Extracted data:\", {\r\n        headers,\r\n        validationErrors,\r\n        mandatoryAttributes,\r\n      });\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(\"No Error! File validated successfully!\");\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      // If there's a template mismatch, show error and reset widget\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(\r\n          \"The template uploaded and the selected operation do not match\"\r\n        );\r\n        handleReset(true); // Pass true to skip success toast\r\n        // Clear the file uploader\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Only set these states if it's not a template mismatch\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    // Reset all states to their initial values\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n\r\n    // Reset the dropdown\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    // Only show success toast if not skipped\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(\"Widget reset successfully!\");\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false); // Close content errors modal\r\n    setShowSpreadsheetModal(true); // Open spreadsheet modal\r\n  };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value); // Debug log\r\n    setOperationChoice(value);\r\n  };\r\n\r\n  // Add this useEffect to monitor state changes\r\n  useEffect(() => {\r\n    console.log(\"Operation Choice updated:\", operationChoice);\r\n  }, [operationChoice]);\r\n\r\n  // It will be disabled if no file is uploaded (no headers) or if there are validation errors.\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled = columnHeaders.length === 0; // Disable if no file uploaded\r\n\r\n  const handleConfirmSubmit = () => {\r\n    alert(\"Confirmed!\");\r\n    setModalShow(false);\r\n  };\r\n\r\n  console.log(\"Operation Choice:\", errors);\r\n\r\n  // Add this computed value for FileUpload component\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <Stack className=\"mt-3\" gap={4}>\r\n        {/* Choose operation and download template */}\r\n        <Stack direction=\"horizontal\">\r\n          <CustomSelect\r\n            selectedValue={operationChoice}\r\n            onChange={handleOperationChange}\r\n            size=\"lg\"\r\n            className=\"w-50\"\r\n            options={{\r\n              defaultLabel: \"Choose Operations\",\r\n              list: [\r\n                { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                { value: \"2\", label: \"Physical Product Structure\" },\r\n                { value: \"3\", label: \"Document\" },\r\n                { value: \"4\", label: \"Physical Product-Document\" },\r\n              ],\r\n            }}\r\n          />\r\n          {/* Conditionally render multiple file input for Document type */}\r\n          <div className=\"p-2 ms-auto\">\r\n            {operationChoice === \"3\" && (\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control type=\"file\" multiple />\r\n              </Form.Group>\r\n            )}\r\n          </div>\r\n          <div className=\"p-2\">\r\n            <CustomButton\r\n              variant=\"link ms-auto\"\r\n              size=\"lg\"\r\n              onClick={handleDownloadTemplate}\r\n              text=\"Download Template\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n\r\n        {/* Drag and Drop File Upload */}\r\n        {/* Modified FileUpload with disabled state */}\r\n        <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n          <FileUpload\r\n            ref={fileUploaderRef}\r\n            fileTypes={[\"XLSX\"]}\r\n            multiple={false}\r\n            onUpload={handleFileUpload}\r\n            onReset={handleReset}\r\n            disabled={isFileUploadDisabled}\r\n            message={\r\n              isFileUploadDisabled\r\n                ? \"Please select an operation first\"\r\n                : \"Drag & Drop your files here or Click to browse\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/* Show loader while validating */}\r\n        {isValidating && <Loader />}\r\n\r\n        {/* Submit Button and Content Error Button */}\r\n        <Stack direction=\"horizontal\" gap={2}>\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          />\r\n          <div className=\"ms-auto d-flex gap-5\">\r\n            {errors.length > 0 && (\r\n              <CustomButton\r\n                variant=\"danger\"\r\n                onClick={() => setShowContentErrors(true)}\r\n                text={`Content Errors (${errors.length})`}\r\n              />\r\n            )}\r\n\r\n            <CustomButton\r\n              variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n              onClick={handleOpenSpreadsheetModal}\r\n              text=\"Manage Spreadsheet Columns\"\r\n              disabled={manageSpreadsheetDisabled}\r\n            />\r\n\r\n            <CustomButton\r\n              variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n              disabled={submitDisabled}\r\n              size=\"lg\"\r\n              onClick={() => setModalShow(true)}\r\n              text=\"Submit\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* Content Errors Modal */}\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      {/* Confirmation Modal */}\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      {/* Column Mapping */}\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","show","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","map","btn","index","label","useToast","showToast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","toast","showSuccessToast","options","arguments","length","undefined","showErrorToast","showInfoToast","showWarningToast","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","console","log","operationNames","errors","headers","Array","isArray","error","reader","FileReader","readAsBinaryString","onload","e","_config$MassUpload$op","workbook","XLSX","target","result","sheetName","SheetNames","worksheet","Sheets","sheet_to_json","header","sheetData","defval","fileHeaders","Object","keys","expectedHeadersForOperation","config","isTemplateMismatch","every","includes","matchedOperation","key","value","entries","expectedHeaders","mandatoryAttributes","missingHeaders","filter","join","validationErrors","invalidPrefixes","forEach","row","field","toString","trim","push","userCollabSpace","valueToValidate","columnName","some","prefix","startsWith","warn","onerror","selectedValue","onChange","Form","Select","defaultLabel","list","option","attrIndex","Alert","groupedErrors","Map","rowMatch","match","columnMatch","rowNum","errorMsg","split","has","set","get","errorMessage","_Fragment","ReusableAlert","Table","responsive","bordered","from","_ref2","errorDetails","_ref3","rowSpan","colSpan","CustomModal","ErrorPopup","ExcelProcessingService","processExcelFile","async","data","batches","this","createBatches","Error","i","batch","slice","transformedBatch","transformBatchToPayload","items","attributes","description","Description","partNumber","classificationType","collabspace","emailNotification","securityContext","userId","onConfirm","progress","setProgress","isProcessing","setIsProcessing","excelService","processedBatches","currentProgress","setTimeout","ProgressBar","now","Math","round","animated","columnHeaders","handleCheckboxChange","checkedItems","handleSelectChange","selectedAttributes","mappedAttributes","allNLSValues","dropdownOptions","isMandatory","hasNLS","hasMatchingNLS","CustomSelect","attr","backendName","uiLabel","useMassUpload","setMappedAttributes","ENOVIA_BASE_URL","process","useEffect","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","_attributeResponse$ou3","_attributeResponse$ou4","_attributeResponse$ou5","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","member","objectId","id","attributeResponse","busIDs","groupData","results","item","nls","mappedData","deploymentExtension","fetchColumnMapping","setCheckedItems","setSelectedAttributes","filterMappedAttributes","setfilterMappedAttributes","StaticTable","MappedList","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","operationChoice","setOperationChoice","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","globalCollabSpaceTitles","handleReset","selectElement","document","querySelector","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","Stack","gap","direction","Group","controlId","Control","CustomButton","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","window","open","downloadTemplate","FileUpload","validationResult","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","Check","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","handleConfirmSubmit","alert","ColumnMappingModal","root","widget","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","securityContext1","getValue","WAFData","loadWAFData","csrfURL","response","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue"],"sourceRoot":""}