{"version":3,"file":"static/js/900.b8aa6b75.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Modal/customModal.jsx","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Alert/ReusableAlert.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","hooks/Mass-Upload/useMassUpload.js","hooks/Mass-Upload/useMassUploadDocument.js","pages/mass-upload/massUpload.jsx","utils/getUserDetails.js","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  widgetType,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          {...{\r\n            checked: row.getIsSelected(),\r\n            onChange: row.getToggleSelectedHandler(),\r\n          }}\r\n        />\r\n      ),\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    return [selectionColumn, ...baseColumns];\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    enableRowSelection: true,\r\n    defaultColumn: {\r\n      size: 165,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className=\"table custom-table table-hover\"\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled\r\n            ? \"Please select an operation first to Enable File uploading \"\r\n            : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\"❌ Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map(title => title.toLowerCase());\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            // Modified check that doesn't treat 0 as empty\r\n            if (\r\n              row[field] === undefined || \r\n              row[field] === null || \r\n              (row[field].toString().trim() === \"\" && row[field] !== 0)\r\n            ) {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace = row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (!userCollabSpace || !lowerCaseCollabSpaceTitles.includes(userCollabSpace)) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n\r\n            \r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n             // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n             if (matchedOperation === \"Physical Product Structure\") {\r\n              columnName = \"Quantity\";\r\n              const quantityValue = row[columnName]?.toString().trim();\r\n              if (quantityValue) {\r\n                const numQuantity = Number(quantityValue);\r\n                if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                  validationErrors.push(\r\n                    `Row ${globalRowIndex + 2}: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                  );\r\n                  console.log(\r\n                    \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                    quantityValue\r\n                  );\r\n                }\r\n              }\r\n            }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\"❌ Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  onChange,\r\n  size,\r\n  className,\r\n  disabled,\r\n  options,\r\n}) => {\r\n  const defaultLabel = options?.defaultLabel || \"Please select\";\r\n  const list = options?.list || [];\r\n\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n  // Check if we have grouped options (array of objects with label and options properties)\r\n  const hasGroupedOptions =\r\n    Array.isArray(list) &&\r\n    list.length > 0 &&\r\n    list[0] &&\r\n    \"label\" in list[0] &&\r\n    \"options\" in list[0];\r\n\r\n  // console.log(\"CustomSelect received options:\", {\r\n  //   list,\r\n  //   hasGroupedOptions,\r\n  //   selectedValue,\r\n  // });\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{defaultLabel}</option> {/* Default option */}\r\n      {hasGroupedOptions\r\n        ? // Render grouped options with optgroup\r\n          list.map((group, groupIndex) => (\r\n            <optgroup key={`group-${groupIndex}`} label={group.label}>\r\n              {Array.isArray(group.options) &&\r\n                group.options.map((item, optionIndex) => (\r\n                  <option\r\n                    key={`option-${groupIndex}-${optionIndex}`}\r\n                    value={item.value}\r\n                  >\r\n                    {item.label}\r\n                  </option>\r\n                ))}\r\n            </optgroup>\r\n          ))\r\n        : // Render flat list of options\r\n          list.map((item, idx) => (\r\n            <option key={`option-${idx}`} value={item.value}>\r\n              {item.label}\r\n            </option>\r\n          ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\nimport \"./staticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || header}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import React from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n  dropdownOptions,\r\n  allNLSValues,\r\n  operationChoice,\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  console.log(\"MappedList - Received dropdownOptions:\", dropdownOptions);\r\n  console.log(\"MappedList - Received operationChoice:\", operationChoice);\r\n  console.log(\"MappedList - Received allNLSValues:\", allNLSValues);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    console.log(\r\n      `Checking if header '${header}' matches any NLS value:`,\r\n      hasMatch\r\n    );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    console.log(\"Finding backend name for UI label:\", uiLabel);\r\n    console.log(\"Current dropdown options:\", dropdownOptions);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available\");\r\n      return uiLabel;\r\n    }\r\n\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    console.log(\"Found option:\", option);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    console.log(\"Preparing dropdown options for column:\", currentColumnHeader);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available for filtering\");\r\n      return [];\r\n    }\r\n\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader)\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    // For operation 2, we want to group options by their categories\r\n    if (operationChoice === \"2\") {\r\n      console.log(\r\n        \"Using grouped dropdown options for Product Structure operation\"\r\n      );\r\n\r\n      // Create grouped options structure\r\n      const groupedOptions = [];\r\n\r\n      // Debug information about existing data\r\n      console.log(\"All dropdown options:\", dropdownOptions);\r\n\r\n      // Look for EBOM attributes in the dropdown options\r\n      const ebomAttributes = dropdownOptions\r\n        .filter(\r\n          (attr) =>\r\n            (attr.group === \"EBOM Attributes\" ||\r\n              attr.group === \"EBOM Attributes\") &&\r\n            !selectedValues.includes(attr.uiLabel)\r\n        )\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      console.log(\"Filtered EBOM attributes:\", ebomAttributes);\r\n\r\n      // Always add EBOM Attributes group if we have any EBOM attributes\r\n      if (ebomAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"EBOM Attributes\",\r\n          options: ebomAttributes,\r\n        });\r\n      }\r\n\r\n      // Add any Part Attributes group\r\n      const partAttributes = dropdownOptions\r\n        .filter(\r\n          (attr) =>\r\n            attr.group !== \"EBOM Attributes\" &&\r\n            attr.group !== \"System Attributes\" &&\r\n            !selectedValues.includes(attr.uiLabel)\r\n        )\r\n        .map((attr) => ({\r\n          value: attr.uiLabel,\r\n          label: attr.uiLabel,\r\n        }));\r\n\r\n      console.log(\"Filtered Part attributes:\", partAttributes);\r\n\r\n      if (partAttributes.length > 0) {\r\n        groupedOptions.push({\r\n          label: \"Item Attributes\",\r\n          options: partAttributes,\r\n        });\r\n      }\r\n\r\n      console.log(\"Final grouped dropdown options:\", groupedOptions);\r\n      return groupedOptions;\r\n    }\r\n\r\n    // For other operations, return flat list as before\r\n    const filteredOptions = dropdownOptions\r\n      .filter((attr) => !selectedValues.includes(attr.uiLabel))\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n\r\n    return filteredOptions;\r\n  };\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    console.log(\r\n      \"Selection changed for column:\",\r\n      columnHeader,\r\n      \"to value:\",\r\n      value\r\n    );\r\n\r\n    const backendName = getBackendNameForUILabel(value);\r\n    console.log(\"Mapped backend name:\", backendName);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        disabled: hasNLS && isMandatory,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n  dropdownOptions, // Receive dropdownOptions\r\n  allNLSValues, // Add this prop\r\n  operationChoice, // Add operation choice\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  console.log(\"ColumnMappingModal NLS values:\", allNLSValues);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, don't include them in the mappings at all\r\n            // This will effectively exclude them from the payload\r\n            console.log(\r\n              `Skipping unmapped column without NLS match: ${columnName}`\r\n            );\r\n            // Don't add anything to simplifiedMappings or completeMappings\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  console.log(\r\n    \"ColumnMappingModal - received dropdownOptions:\",\r\n    dropdownOptions\r\n  );\r\n  console.log(\"ColumnMappingModal - operation choice:\", operationChoice);\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n        dropdownOptions={dropdownOptions}\r\n        allNLSValues={allNLSValues} // Pass this to MappedList\r\n        operationChoice={operationChoice} // Pass operation choice\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = (initialOperationChoice) => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const [operationChoice, setOperationChoice] = useState(initialOperationChoice);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async (operation = null) => {\r\n    try {\r\n      // Use the passed operation or fall back to state\r\n      const effectiveOperation = operation || operationChoice;\r\n      console.log(\"Fetching column mapping for operation:\", effectiveOperation);\r\n\r\n      if (!effectiveOperation) {\r\n        console.log(\"No operation specified, skipping fetch\");\r\n        return;\r\n      }\r\n\r\n      // Update state if a new operation is passed\r\n      if (operation && operation !== operationChoice) {\r\n        setOperationChoice(operation);\r\n      }\r\n\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n      ];\r\n\r\n      // Define EBOM attributes for Product Structure operation\r\n      let ebomAttributes = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomAttributes = [\r\n          {\r\n            name: \"MBOMFindNumber__e7ead0d4e78a4d7f99e9e5fd900f8fdf\",\r\n            nls: \"Find Number\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name: \"MBOMComponentLocation__00cc2e44830642d69dd3728d8c279a75\",\r\n            nls: \"Component Location\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n          },\r\n          {\r\n            name:\"Level\",\r\n            nls: \"Level\",\r\n            group: \"EBOM Attributes\",\r\n            groupNLS: \"EBOM Attributes\",\r\n            \r\n          }\r\n        ];\r\n      }\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Add EBOM Attributes group for operation 2\r\n      if (effectiveOperation === \"2\" && !attributeGroups.includes(\"EBOM Attributes\")) {\r\n        attributeGroups.push(\"EBOM Attributes\");\r\n      }\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      // Get NLS values from EBOM attributes when operation is 2\r\n      let ebomNlsValues = [];\r\n      if (effectiveOperation === \"2\") {\r\n        ebomNlsValues = ebomAttributes.map((item) => item.nls);\r\n        console.log(\"EBOM NLS Values:\", ebomNlsValues);\r\n      }\r\n\r\n      // Combine all NLS values including EBOM attributes if operation is 2\r\n      const allNLSValues = [...new Set([...apiNlsValues, ...systemNlsValues, ...ebomNlsValues])];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge non-system API attributes with hardcoded ones and EBOM attributes\r\n      let mergeAttributes = [...filteredGroupData, ...systemAttributes];\r\n      if (effectiveOperation === \"2\") {\r\n        mergeAttributes = [...mergeAttributes, ...ebomAttributes];\r\n        console.log(\"Added EBOM attributes to merged attributes for operation 2\", mergeAttributes);\r\n      }\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\") ||\r\n            (effectiveOperation === \"2\" && attr.group === \"EBOM Attributes\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || attr.group || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n      \r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      // For operation 2, log EBOM attributes as well\r\n      if (effectiveOperation === \"2\") {\r\n        console.log(\r\n          \"EBOM Attributes found:\",\r\n          relevantAttributes.filter(\r\n            (attr) => attr.groupNLS === \"EBOM Attributes\" || attr.group === \"EBOM Attributes\"\r\n          ).length\r\n        );\r\n        console.log(\r\n          \"Sample EBOM Attribute:\",\r\n          relevantAttributes.find((attr) => attr.groupNLS === \"EBOM Attributes\" || attr.group === \"EBOM Attributes\")\r\n        );\r\n      }\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationChoice) {\r\n      fetchColumnMapping();\r\n    }\r\n  }, [operationChoice]);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = (initialOperationType) => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const [mappedAttributes, setMappedAttributes] = useState({\r\n    allNLSValues: [],\r\n    dropdownOptions: [],\r\n    mappedData: [],\r\n  });\r\n  const [operationType, setOperationType] = useState(initialOperationType);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async (operation = null) => {\r\n    // Use passed operation or fall back to state\r\n    const effectiveOperation = operation || operationType;\r\n\r\n    if (effectiveOperation !== \"3\") {\r\n      console.log(\"Not document operation type, skipping fetch\");\r\n      return;\r\n    }\r\n\r\n    // Update state if new operation passed\r\n    if (operation && operation !== operationType) {\r\n      setOperationType(operation);\r\n    }\r\n\r\n    try {\r\n      console.log(\r\n        \"Fetching document data for operation type:\",\r\n        effectiveOperation\r\n      );\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      const body = {\r\n        type: \"Document\",\r\n        preferedType: \"Document\",\r\n        typeName: \"Document\",\r\n        subTypes: true,\r\n        runUXBL: true,\r\n        metrics: {\r\n          UXName: \"New\",\r\n          client_app_domain: \"3DEXPERIENCE 3DDashboard\",\r\n          client_app_name: \"ENXWDOC_AP\",\r\n        },\r\n      };\r\n\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        API_URL,\r\n        body,\r\n        headers\r\n      );\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\r\n          \"Failed to fetch document data. Invalid response structure.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\r\n        \"Full documentInfo structure:\",\r\n        JSON.stringify(documentInfo, null, 2)\r\n      );\r\n\r\n      // Check different possible paths for extensionAttributes\r\n      const extensionAttributes =\r\n        documentInfo?.extensionAttributes ||\r\n        documentInfo?.attributes?.extensionAttributes ||\r\n        [];\r\n\r\n      console.log(\"Found extensionAttributes:\", extensionAttributes);\r\n\r\n      // Your hardcoded document attributes\r\n      const DocumentsAttributes = [\r\n        {\r\n          name: \"description\",\r\n          nls: \"Description\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"name\",\r\n          nls: \"Document Name\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"type\",\r\n          nls: \"Document Type\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"title\",\r\n          nls: \"Title\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\",\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"DocumentsAttributes\",\r\n        },\r\n      ];\r\n\r\n      // Extract dropdown options only if extensionAttributes exists\r\n      if (extensionAttributes && extensionAttributes.length > 0) {\r\n        // Extract all NLS values from API\r\n        const apiNlsValues = extensionAttributes.map((attr) => attr.nls);\r\n        console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n        // Extract NLS values from hardcoded attributes\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n        console.log(\"Hardcoded NLS Values:\", hardcodedNlsValues);\r\n\r\n        // Combine both NLS value sets (using Set to remove duplicates)\r\n        const allNLSValues = [\r\n          ...new Set([...apiNlsValues, ...hardcodedNlsValues]),\r\n        ];\r\n        console.log(\r\n          \"Document Operation - All Combined NLS Values:\",\r\n          allNLSValues\r\n        );\r\n\r\n        // Process API attributes (with name splitting)\r\n        const apiOptions = extensionAttributes.map((attr) => {\r\n          // Extract the attribute name after the dot\r\n          const fullName = attr.name;\r\n          const nameParts = fullName.split(\".\");\r\n          const extractedName = nameParts.length > 1 ? nameParts[1] : fullName;\r\n\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: extractedName,\r\n            fullName: attr.name,\r\n            group: \"API Attributes\",\r\n          };\r\n        });\r\n\r\n        // Process hardcoded attributes\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        // Combine both for mappedData\r\n        const combinedMappedData = [...apiOptions, ...hardcodedOptions];\r\n\r\n        console.log(\"Document Operation - API Dropdown Options:\", apiOptions);\r\n        console.log(\r\n          \"Document Operation - Combined Mapped Data:\",\r\n          combinedMappedData\r\n        );\r\n\r\n        // Update state with specific configurations for each property\r\n        setMappedAttributes({\r\n          allNLSValues: allNLSValues, // Combined NLS values for matching\r\n          dropdownOptions: apiOptions, // Only API options for dropdown\r\n          mappedData: combinedMappedData, // Both API and hardcoded for payload\r\n        });\r\n      } else {\r\n        // If no API attributes, use hardcoded ones for everything\r\n        const hardcodedNlsValues = DocumentsAttributes.map((attr) => attr.nls);\r\n\r\n        // Create hardcoded options for mappedData when no API data exists\r\n        const hardcodedOptions = DocumentsAttributes.map((attr) => {\r\n          return {\r\n            uiLabel: attr.nls,\r\n            backendName: attr.name,\r\n            group: attr.groupNLS,\r\n          };\r\n        });\r\n\r\n        setMappedAttributes({\r\n          allNLSValues: hardcodedNlsValues, // Use hardcoded NLS for matching\r\n          dropdownOptions: [], // Empty dropdown options as requested\r\n          mappedData: hardcodedOptions, // Use hardcoded options for payload\r\n        });\r\n      }\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationType === \"3\") {\r\n      fetchDocumentData();\r\n    }\r\n  }, [operationType]);\r\n\r\n  // Return structure matching useMassUpload\r\n  return {\r\n    mappedAttributes,\r\n    refreshMapping: fetchDocumentData,\r\n  };\r\n};\r\n\r\nexport default useFetchDocumentData;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport {\r\n  globalCollabSpaceTitles,\r\n  globalCollabSpaceNames,\r\n} from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\nimport getUserDetails from \"../../utils/getUserDetails\";\r\nimport ReusableTable from \"../../components/Table/Table\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadItems\",\r\n  2: \"/massUpload/uploadProductStructure\",\r\n  3: \"/massUpload/documents\",\r\n  4: \"/massUpload/uploadProductDocument\",\r\n};\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData,\r\n  collabMapping // Add this parameter\r\n) => {\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped data in Massupload:\", mappedData);\r\n\r\n  // For Document operation type (3), use different processing logic\r\n  if (operationType === \"3\") {\r\n    console.log(\"Processing document data with operation type 3\");\r\n\r\n    // Transform each row into document format\r\n    // Transform each row into document format\r\n    const documentItems = sheetData.map((row) => {\r\n      // Create separate objects for root-level data and nested dataelements\r\n      const rootData = {};\r\n      const dataelements = {};\r\n      const apiAttributes = {}; // For storing API attributes\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (\r\n          !columnMappings[columnName] ||\r\n          value === undefined ||\r\n          value === null\r\n        )\r\n          return;\r\n\r\n        const backendFieldName = columnMappings[columnName];\r\n\r\n        // Find attribute in mappedData to check if it's an API attribute\r\n        const attribute = mappedData.find(\r\n          (attr) =>\r\n            attr.uiLabel === backendFieldName ||\r\n            attr.backendName === backendFieldName\r\n        );\r\n\r\n        console.log(\r\n          `Processing column ${columnName} -> ${backendFieldName}`,\r\n          attribute\r\n        );\r\n\r\n        // Special case handling for known fields\r\n        if (backendFieldName === \"Document Type\") {\r\n          rootData[\"classificationType\"] = value;\r\n        } else if (backendFieldName === \"Collaborative Space\") {\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (\r\n          backendFieldName.toLowerCase().includes(\"collaborative\") ||\r\n          backendFieldName.toLowerCase().includes(\"collab\")\r\n        ) {\r\n          // Try to catch variations of Collaborative Space\r\n          const collabspaceTitle = value;\r\n          rootData[\"collabSpaceTitle\"] = collabspaceTitle;\r\n\r\n          // Use the mapping to get the corresponding name\r\n          if (collabMapping[collabspaceTitle]) {\r\n            rootData[\"collabSpace\"] = collabMapping[collabspaceTitle];\r\n            console.log(\r\n              `Mapped collabspace title \"${collabspaceTitle}\" to name \"${collabMapping[collabspaceTitle]}\"`\r\n            );\r\n          } else {\r\n            console.warn(\r\n              `No mapping found for collabspace title: ${collabspaceTitle}`\r\n            );\r\n          }\r\n        } else if (backendFieldName === \"Document Name\") {\r\n          dataelements[\"name\"] = value;\r\n        }\r\n        // For API attributes with group \"API Attributes\", include them with their fullName\r\n        else if (\r\n          attribute &&\r\n          attribute.group === \"API Attributes\" &&\r\n          attribute.fullName\r\n        ) {\r\n          // Store API attributes using their full name\r\n          dataelements[attribute.backendName] = value;\r\n\r\n          // console.log(\r\n          //   `Added API attribute: ${attribute.backendName} = ${value}`\r\n          // );\r\n        }\r\n        // For regular mapped fields that aren't API attributes\r\n        else if (attribute || backendFieldName) {\r\n          // Only include mapped fields (either through attribute lookup or direct mapping)\r\n          dataelements[backendFieldName] = value;\r\n        }\r\n        // Fields without mappings or API attribute status are excluded\r\n      });\r\n\r\n      // Combine root data, dataelements, and API attributes\r\n      return {\r\n        ...rootData,\r\n        dataelements,\r\n        // ...apiAttributes, // Include API attributes at root level\r\n      };\r\n    });\r\n\r\n    // Log sample document for verification\r\n    if (documentItems.length > 0) {\r\n      console.log(\r\n        \"Sample document structure:\",\r\n        JSON.stringify(documentItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    // Create chunks for batched processing\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < documentItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(documentItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: documentItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      // Special field to indicate this is document data\r\n      isDocumentPayload: true,\r\n      documents: documentItems,\r\n    };\r\n  } else {\r\n    // KEEP EXISTING CODE FOR PHYSICAL PRODUCTS (operations 1, 2, 4)\r\n    console.log(\r\n      \"Processing physical product data with operation type:\",\r\n      operationType\r\n    );\r\n\r\n    const attributeGroupMap = {};\r\n    if (Array.isArray(mappedData)) {\r\n      mappedData.forEach((option) => {\r\n        attributeGroupMap[option.backendName] = option.group || \"System\";\r\n        if (option.fullName) {\r\n          attributeGroupMap[`fullName:${option.backendName}`] = option.fullName;\r\n        }\r\n        console.log(\r\n          `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n        );\r\n      });\r\n    }\r\n\r\n    // The rest of your existing code for physical products...\r\n    const getPathForAttribute = (backendName, columnName) => {\r\n      if (operationType === \"1\" && backendName === \"title\") {\r\n        console.log(\"Operation type 1: title placed inside attributes\");\r\n        return \"attributes.title\";\r\n      }\r\n\r\n      if (\r\n        backendName === \"type\" ||\r\n        backendName === \"classificationType\" ||\r\n        backendName === \"collabSpaceTitle\"\r\n      ) {\r\n        if (backendName === \"collabSpaceTitle\") {\r\n          console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n          return \"collabSpaceTitle\";\r\n        }\r\n\r\n        console.log(`${backendName} placed at root level`);\r\n        return backendName;\r\n      }\r\n\r\n      // For the physical product operation (in getPathForAttribute)\r\n      if (backendName === \"collabSpaceTitle\") {\r\n        console.log(\"collabSpaceTitle mapped to root collabspace\");\r\n        return \"collabSpaceTitle\";\r\n      }\r\n\r\n      // Add a special case for collabspaceName if we need it in the payload\r\n      if (backendName === \"collabspaceName\") {\r\n        console.log(\"collabspaceName mapped to root\");\r\n        return \"collabSpace\";\r\n      }\r\n\r\n      if (\r\n        columnName === \"EIN Number\" ||\r\n        backendName === \"PartNumber\" ||\r\n        backendName === \"Part Number\"\r\n      ) {\r\n        console.log(\r\n          \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n        );\r\n        return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n      }\r\n\r\n      if (backendName === \"description\") {\r\n        console.log(\"Description mapped to attributes.description\");\r\n        return \"attributes.description\";\r\n      }\r\n\r\n      const group = attributeGroupMap[backendName];\r\n      console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n      if (!group) {\r\n        console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n        return null;\r\n      }\r\n\r\n      if (group === \"System Attributes\") {\r\n        return `attributes.${backendName}`;\r\n      } else {\r\n        return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n      }\r\n    };\r\n\r\n    const transformedItems = sheetData.map((row) => {\r\n      const transformedRow = {};\r\n\r\n      Object.entries(row).forEach(([columnName, value]) => {\r\n        if (!columnMappings[columnName]) return;\r\n\r\n        const uiLabelBackendName = columnMappings[columnName];\r\n\r\n        const systemAttributeMappings = {\r\n          Title: \"title\",\r\n          Description: \"description\",\r\n          \"Collaborative Space\": \"collabSpaceTitle\",\r\n          \"Collab Space\": \"collabSpaceTitle\",\r\n          Type: \"type\",\r\n        };\r\n\r\n        const backendName =\r\n          systemAttributeMappings[uiLabelBackendName] ||\r\n          mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n            ?.backendName ||\r\n          uiLabelBackendName;\r\n\r\n        // Add collabspaceName mapping here when backendName is collabspaceTitle\r\n        if (backendName === \"collabSpaceTitle\") {\r\n          // Set the title as usual\r\n          transformedRow[\"collabSpaceTitle\"] = value;\r\n\r\n          // Also set the collabspace name using the mapping\r\n          if (collabMapping && collabMapping[value]) {\r\n            transformedRow[\"collabSpace\"] = collabMapping[value];\r\n            console.log(\r\n              `Mapped collabspace title \"${value}\" to name \"${collabMapping[value]}\"`\r\n            );\r\n          } else {\r\n            console.warn(`No mapping found for collabspace title: ${value}`);\r\n          }\r\n        }\r\n\r\n        const path = getPathForAttribute(backendName, columnName);\r\n\r\n        if (\r\n          backendName === \"title\" ||\r\n          backendName === \"description\" ||\r\n          backendName.toLowerCase() === \"collabspace\"\r\n        ) {\r\n          console.log(`Placing ${backendName} at path: ${path}`);\r\n        }\r\n\r\n        if (!path) return;\r\n\r\n        const pathParts = path.split(\".\");\r\n        let current = transformedRow;\r\n\r\n        for (let i = 0; i < pathParts.length - 1; i++) {\r\n          const part = pathParts[i];\r\n          if (!current[part]) {\r\n            current[part] = {};\r\n          }\r\n          current = current[part];\r\n        }\r\n\r\n        current[pathParts[pathParts.length - 1]] = value;\r\n      });\r\n\r\n      if (operationType === \"1\") {\r\n        const productTypeColumn = Object.keys(row).find(\r\n          (key) =>\r\n            key.toLowerCase().includes(\"physical product\") ||\r\n            key.toLowerCase().includes(\"raw material\")\r\n        );\r\n\r\n        if (productTypeColumn && row[productTypeColumn]) {\r\n          const productType = row[productTypeColumn].toLowerCase().trim();\r\n          transformedRow[\"type\"] = productType.includes(\"physical product\")\r\n            ? \"VPMReference\"\r\n            : productType.includes(\"raw material\")\r\n            ? \"Raw_Material\"\r\n            : \"\";\r\n\r\n          console.log(\r\n            `Product type determined: ${transformedRow[\"type\"]} from value: ${row[productTypeColumn]}`\r\n          );\r\n        }\r\n      }\r\n\r\n      return transformedRow;\r\n    });\r\n\r\n    if (transformedItems.length > 0) {\r\n      console.log(\r\n        \"Sample transformed item structure:\",\r\n        JSON.stringify(transformedItems[0], null, 2)\r\n      );\r\n    }\r\n\r\n    const CHUNK_SIZE = 1000;\r\n    const chunks = [];\r\n\r\n    for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n      chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n    }\r\n\r\n    return {\r\n      chunks,\r\n      totalChunks: chunks.length,\r\n      totalItems: transformedItems.length,\r\n      originalData: sheetData,\r\n      mappings: columnMappings,\r\n      isDocumentPayload: false,\r\n    };\r\n  }\r\n};\r\n\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabSpaceTitle\",\r\n    \"Collab Space\": \"collabSpaceTitle\",\r\n    Type: \"classificationType\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  const getBackendNameForHeader = (header) => {\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  columnHeaders.forEach((columnName) => {\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    } else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\nconst getTestData = (isSuccess = true) => {\r\n  if (isSuccess) {\r\n    return {\r\n      success: true,\r\n      responses: [\r\n        {\r\n          name: \"Amit-DOC-0000001-36\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000002-42\",\r\n          revision: \"1\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000003-51\",\r\n          revision: \"0\",\r\n          status: \"Success\",\r\n          message: \"Document updated successfully\",\r\n        },\r\n      ],\r\n    };\r\n  } else {\r\n    return {\r\n      success: false,\r\n      responses: [\r\n        {\r\n          name: \"Amit-DOC-0000004-22\",\r\n          revision: \"2\",\r\n          status: \"Failed\",\r\n          message: \"Required attribute missing\",\r\n        },\r\n        {\r\n          name: \"Amit-DOC-0000005-33\",\r\n          revision: \"0\",\r\n          status: \"Failed\",\r\n          message: \"Invalid document type\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n};\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false);\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef();\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  const [securityContext, setSecurityContext] = useState(null); // New state for security context\r\n  const [collabNames, setCollabNames] = useState([]); // Add new state for names\r\n  const [collabMapping, setCollabMapping] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [apiResponse, setApiResponse] = useState(null);\r\n\r\n  const {\r\n    mappedAttributes: productMappedAttributes,\r\n    refreshMapping: refreshProductMapping,\r\n  } = useMassUpload();\r\n  const {\r\n    mappedAttributes: documentMappedAttributes,\r\n    refreshMapping: refreshDocumentMapping,\r\n  } = useFetchDocumentData(operationChoice);\r\n\r\n  const getActiveData = () => {\r\n    console.log(\"Getting active data for operation:\", operationChoice);\r\n\r\n    switch (operationChoice) {\r\n      case \"1\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"2\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      case \"3\":\r\n        return {\r\n          mappedAttributes: documentMappedAttributes,\r\n          refreshMapping: refreshDocumentMapping,\r\n        };\r\n      case \"4\":\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n      default:\r\n        return {\r\n          mappedAttributes: productMappedAttributes,\r\n          refreshMapping: refreshProductMapping,\r\n        };\r\n    }\r\n  };\r\n\r\n  const { mappedAttributes, refreshMapping } = getActiveData();\r\n\r\n  console.log(\"Active operation:\", operationChoice);\r\n  console.log(\"Active mappedAttributes:\", mappedAttributes);\r\n\r\n  const handleRefreshForCurrentOperation = async (operation) => {\r\n    try {\r\n      console.log(\"Refreshing data for operation:\", operation);\r\n      const { refreshMapping } = getActiveData();\r\n      await refreshMapping(operation);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing data:\", error);\r\n    }\r\n  };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value);\r\n    setOperationChoice(value);\r\n    handleRefreshForCurrentOperation(value);\r\n  };\r\n\r\n  // Update the existing useEffect to handle collabspace names\r\n\r\n  // Update the existing useEffect to create the title-to-name mapping\r\n  useEffect(() => {\r\n    // console.log(\r\n    //   \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n    //   globalCollabSpaceTitles\r\n    // );\r\n    // console.log(\r\n    //   \"[MassUpload.jsx] Global collabSpaceNames:\",\r\n    //   globalCollabSpaceNames\r\n    // );\r\n\r\n    // Set titles and names arrays\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n\r\n    if (Array.isArray(globalCollabSpaceNames)) {\r\n      setCollabNames([...globalCollabSpaceNames]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceNames is not an array!\",\r\n        globalCollabSpaceNames\r\n      );\r\n    }\r\n\r\n    // Create a mapping object from titles to names\r\n    if (\r\n      Array.isArray(globalCollabSpaceTitles) &&\r\n      Array.isArray(globalCollabSpaceNames) &&\r\n      globalCollabSpaceTitles.length === globalCollabSpaceNames.length\r\n    ) {\r\n      const mapping = {};\r\n      for (let i = 0; i < globalCollabSpaceTitles.length; i++) {\r\n        mapping[globalCollabSpaceTitles[i]] = globalCollabSpaceNames[i];\r\n      }\r\n\r\n      setCollabMapping(mapping);\r\n      console.log(\r\n        \"[MassUpload.jsx] Collabspace title-to-name mapping:\",\r\n        mapping\r\n      );\r\n    }\r\n\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceNames:\", collabNames);\r\n  }, []);\r\n\r\n  // Add this after the existing console.log\r\n  // console.log(\"getUserDetails function\", getUserDetails);\r\n\r\n  // Add this code to actually call the function and show its response\r\n  useEffect(() => {\r\n    async function fetchUserDetails() {\r\n      try {\r\n        console.log(\"Calling getUserDetails...\");\r\n        const userData = await getUserDetails();\r\n        console.log(\" User Details Response:\", userData);\r\n        // Add this line to store the user data\r\n        setUserDetails(userData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching user details:\", error);\r\n      }\r\n    }\r\n\r\n    fetchUserDetails();\r\n  }, []);\r\n  // console.log(\"widget window\", window.widget);\r\n  // Add an effect to get and set the security context\r\n  useEffect(() => {\r\n    try {\r\n      // Get security context from widget\r\n      if (window.widget && typeof window.widget.getValue === \"function\") {\r\n        const securityContextValue = window.widget.getValue(\"Credentials\");\r\n        console.log(\"Security Context:\", securityContextValue);\r\n        setSecurityContext(securityContextValue);\r\n      } else {\r\n        console.warn(\"window.widget or getValue function not available\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error getting security context:\", error);\r\n    }\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        setFormattedData({ originalData: sheetData });\r\n\r\n        await handleRefreshForCurrentOperation(operationChoice);\r\n\r\n        setTimeout(() => {\r\n          console.log(\r\n            \"Applying automatic column mapping with:\",\r\n            mappedAttributes\r\n          );\r\n          if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n            const { simplifiedMappings } = generateColumnMappings(\r\n              headers,\r\n              mandatoryAttributes,\r\n              mappedAttributes\r\n            );\r\n\r\n            console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n            if (Object.keys(simplifiedMappings).length > 0) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                sheetData,\r\n                simplifiedMappings,\r\n                operationChoice,\r\n                mappedAttributes,\r\n                collabMapping // Add this parameter\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data automatically mapped with ${\r\n                  Object.keys(simplifiedMappings).length\r\n                } columns`\r\n              );\r\n            }\r\n          }\r\n        }, 500);\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(\"File validated successfully!\");\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(\r\n          \"The template uploaded and the selected operation do not match\"\r\n        );\r\n        handleReset(true);\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null);\r\n\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(\"Widget reset successfully!\");\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(true);\r\n  };\r\n\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled = columnHeaders.length === 0;\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      // Close the confirmation modal immediately\r\n      setModalShow(false);\r\n\r\n      // Show loader while submitting\r\n      setIsSubmitting(true);\r\n\r\n      if (!formattedData) {\r\n        showErrorToast(\"No data to submit\");\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(\"Invalid operation type\");\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks, isDocumentPayload, documents } =\r\n        formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n      let allResponses = []; // Array to collect all response items\r\n\r\n      // For document payload, use the specific structure\r\n      if (operationChoice === \"3\" && isDocumentPayload) {\r\n        try {\r\n          // Create document-specific chunks if needed\r\n          const docChunks = [];\r\n          for (let i = 0; i < documents.length; i += 1000) {\r\n            docChunks.push(documents.slice(i, i + 1000));\r\n          }\r\n\r\n          // Create user details object once\r\n          const userInfo = {\r\n            ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n            ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n            ...(securityContext ? { securityContext: securityContext } : {}),\r\n          };\r\n\r\n          for (let i = 0; i < docChunks.length; i++) {\r\n            const response = await api.post(endpoint, {\r\n              ...userInfo,\r\n              documents: docChunks[i],\r\n            });\r\n\r\n            if (response.status === 200) {\r\n              successCount++;\r\n\r\n              // FOR TESTING: Use test data instead of actual API response\r\n              const testData = getTestData(true);\r\n              console.log(\"Using test success data:\", testData);\r\n\r\n              // Add test responses to our collection\r\n              if (Array.isArray(testData.responses)) {\r\n                allResponses = [...allResponses, ...testData.responses];\r\n              }\r\n\r\n              // Log what would normally happen\r\n              if (response.data && response.data.success === true) {\r\n                console.log(\"Real API returned success: true\");\r\n              } else {\r\n                console.log(\r\n                  \"Real API returned success: false, overriding with test data\"\r\n                );\r\n              }\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Document upload failed:\", error);\r\n          failureCount++;\r\n        }\r\n      } else {\r\n        // For other operations (physical products)\r\n        const userInfo =\r\n          operationChoice === \"1\"\r\n            ? {\r\n                ...(userDetails?.email ? { email: userDetails.email } : {}),\r\n                ...(userDetails?.login ? { userId: userDetails.login } : {}),\r\n                ...(securityContext\r\n                  ? { securityContext: securityContext }\r\n                  : {}),\r\n                emailNotification: false,\r\n              }\r\n            : {};\r\n\r\n        for (let i = 0; i < chunks.length; i++) {\r\n          try {\r\n            const chunk = chunks[i];\r\n            const response = await api.post(endpoint, {\r\n              ...userInfo,\r\n              items: chunk,\r\n            });\r\n\r\n            if (response.status === 200) {\r\n              successCount++;\r\n\r\n              // FOR TESTING: Use test data instead of actual API response\r\n              const testData = getTestData(true);\r\n              console.log(\"Using test success data:\", testData);\r\n\r\n              // Add test responses to our collection\r\n              if (Array.isArray(testData.responses)) {\r\n                allResponses = [...allResponses, ...testData.responses];\r\n              }\r\n\r\n              // Log what would normally happen\r\n              if (response.data && response.data.success === true) {\r\n                console.log(\"Real API returned success: true\");\r\n              } else {\r\n                console.log(\r\n                  \"Real API returned success: false, overriding with test data\"\r\n                );\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error(`Chunk ${i + 1} failed:`, error);\r\n            failureCount++;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Store the collected responses for display\r\n      setApiResponse(allResponses);\r\n\r\n      const finalMessage = `Upload complete: ${successCount} chunks successful, ${failureCount} failed, ${allResponses.length} items processed`;\r\n\r\n      if (failureCount > 0) {\r\n        showErrorToast(finalMessage);\r\n      } else if (allResponses.length > 0) {\r\n        showSuccessToast(\"Upload successful!\");\r\n      } else {\r\n        showSuccessToast(\r\n          \"Upload completed, but no response items were returned\"\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`Upload failed: ${error.message}`);\r\n    } finally {\r\n      // Hide loader regardless of success/failure\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container-fluid d-flex justify-content-center\"\r\n        style={{ minHeight: \"100vh\" }}\r\n      >\r\n        <div\r\n          className=\"w-100\"\r\n          style={{ maxWidth: \"1200px\", maxHeight: \"500px\" }}\r\n        >\r\n          <Stack className=\"mt-3\" gap={4}>\r\n            <Stack direction=\"horizontal\">\r\n              <CustomSelect\r\n                selectedValue={operationChoice}\r\n                onChange={handleOperationChange}\r\n                size=\"lg\"\r\n                className=\"w-50\"\r\n                options={{\r\n                  defaultLabel: \"Choose Operations\",\r\n                  list: [\r\n                    { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                    { value: \"2\", label: \"Physical Product Structure\" },\r\n                    { value: \"3\", label: \"Document\" },\r\n                    { value: \"4\", label: \"Physical Product-Document\" },\r\n                  ],\r\n                }}\r\n              />\r\n              <div className=\"ms-auto\">\r\n                <CustomButton\r\n                  variant=\"link\"\r\n                  size=\"lg\"\r\n                  onClick={handleDownloadTemplate}\r\n                  text=\"Download Template\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n\r\n            <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n              <FileUpload\r\n                ref={fileUploaderRef}\r\n                fileTypes={[\"XLSX\"]}\r\n                multiple={false}\r\n                onUpload={handleFileUpload}\r\n                onReset={handleReset}\r\n                disabled={isFileUploadDisabled}\r\n                message={\r\n                  isFileUploadDisabled\r\n                    ? \"Please select an operation first\"\r\n                    : \"Drag & Drop your files here or Click to browse\"\r\n                }\r\n              />\r\n            </div>\r\n\r\n            {isValidating && <Loader />}\r\n\r\n            {/* Add this where you want the loader to appear */}\r\n            {isSubmitting && <Loader />}\r\n\r\n            {/* Add a response table section that shows when apiResponse has data */}\r\n            {apiResponse && apiResponse.length > 0 && (\r\n              <div className=\"mt-4\">\r\n                <h4>Upload Results ({apiResponse.length} items)</h4>\r\n                <ReusableTable\r\n                  columns={[\r\n                    { accessorKey: \"name\", header: \"Name\" },\r\n                    { accessorKey: \"revision\", header: \"Revision\" },\r\n                    {\r\n                      accessorKey: \"status\",\r\n                      header: \"Status\",\r\n                      cell: ({ getValue }) => {\r\n                        const status = getValue();\r\n                        return status === \"Success\" ? (\r\n                          <span style={{ color: \"green\" }}>{status}</span>\r\n                        ) : (\r\n                          <span style={{ color: \"red\" }}>{status}</span>\r\n                        );\r\n                      },\r\n                    },\r\n                    { accessorKey: \"message\", header: \"Message\" },\r\n                  ]}\r\n                  data={apiResponse}\r\n                  widgetType=\"Mass_Upload_Response\"\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            <Stack direction=\"horizontal\" gap={2}>\r\n              {/* <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          /> */}\r\n              <div className=\"ms-auto d-flex gap-5\">\r\n                {errors.length > 0 && (\r\n                  <CustomButton\r\n                    variant=\"danger\"\r\n                    onClick={() => setShowContentErrors(true)}\r\n                    text={`Content Errors (${errors.length})`}\r\n                  />\r\n                )}\r\n\r\n                <CustomButton\r\n                  variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n                  onClick={handleOpenSpreadsheetModal}\r\n                  text=\"Manage Spreadsheet Columns\"\r\n                  disabled={manageSpreadsheetDisabled}\r\n                />\r\n\r\n                <CustomButton\r\n                  variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n                  disabled={submitDisabled}\r\n                  size=\"lg\"\r\n                  onClick={() => setModalShow(true)}\r\n                  text=\"Submit\"\r\n                />\r\n              </div>\r\n            </Stack>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        existingMappings={formattedData?.mappings ? formattedData.mappings : {}}\r\n        dropdownOptions={mappedAttributes?.dropdownOptions}\r\n        allNLSValues={mappedAttributes?.allNLSValues}\r\n        operationChoice={operationChoice}\r\n        onColumnsMapped={(mappings, finalMapping) => {\r\n          console.log(\"Column mappings received:\", mappings);\r\n\r\n          const columnMappings = mappings;\r\n\r\n          if (formattedData && formattedData.originalData) {\r\n            const transformedData = transformSheetDataWithMappings(\r\n              formattedData.originalData,\r\n              columnMappings,\r\n              operationChoice,\r\n              mappedAttributes,\r\n              collabMapping\r\n            );\r\n\r\n            setFormattedData(transformedData);\r\n            showSuccessToast(\r\n              `Data mapped successfully with ${\r\n                Object.keys(mappings).length\r\n              } columns`\r\n            );\r\n          } else {\r\n            showErrorToast(\r\n              \"No sheet data available to transform with mappings\"\r\n            );\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { loadPlatformAPI } from \"./helpers\";\r\n\r\nexport default async function getUserDetails() {\r\n  try {\r\n    const PlatformAPI = await loadPlatformAPI();\r\n    const user = await PlatformAPI.getUser();\r\n    // console.log(\" User details retrieved successfully:\", user);\r\n    // console.log(\"User ID:\", user?.id);\r\n    // console.log(\"User name:\", user?.name);\r\n    // console.log(\"User email:\", user?.email);\r\n    // console.log(\"User roles:\", user?.roles);\r\n    // console.log(\"User preferences:\", user?.preferences);\r\n\r\n    return user;\r\n  } catch (error) {\r\n    console.error(\" Error getting user details:\", error);\r\n    return null; // Or throw the error, depending on how you want to handle it\r\n  }\r\n}\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n    \r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","show","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","map","btn","index","label","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","sortable","useSortable","attributes","listeners","setNodeRef","transform","isDragging","opacity","position","top","CSS","Transform","toString","transition","getSize","zIndex","cursor","backgroundColor","ref","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","concat","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","getValue","color","fontWeight","getWidgetStorageKey","widgetType","console","log","warn","data","editable","meta","dispatch","useDispatch","tableData","setTableData","useState","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","useRef","isScrolled","setIsScrolled","useEffect","handleScroll","e","target","scrollTop","tableContainer","current","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","error","initialOrder","otherColumns","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","onChange","getToggleAllRowsSelectedHandler","_ref3","row","getIsSelected","getToggleSelectedHandler","_ref4","value","handleEditCell","rowIndex","columnId","updatedData","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","useReactTable","state","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","enableRowSelection","defaultColumn","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","original","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","length","columnSizingInfo","columnSizing","_Fragment","CustomButton","handleSelectAll","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","onDragEnd","event","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","useToast","showToast","message","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","Bounce","otherOptions","toast","showSuccessToast","options","arguments","undefined","showErrorToast","showInfoToast","showWarningToast","forwardRef","fileTypes","multiple","onUpload","onReset","files","setFiles","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","display","alignItems","background","border","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","_config$MassUpload$ma","_config$MassUpload$ma2","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","errors","Array","isArray","reader","FileReader","readAsBinaryString","onload","async","workbook","XLSX","result","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","isTemplateMismatch","allSheetData","defval","chunks","chunkSize","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","toLowerCase","chunkIndex","chunk","progress","Math","round","indexInChunk","globalRowIndex","field","trim","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","Number","valueToValidate","_row$columnName","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","defaultLabel","list","hasGroupedOptions","Form","Select","group","groupIndex","item","optionIndex","idx","Alert","processedErrors","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","rowNumber","Object","values","sort","a","b","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","key","parent","CellMeasurer","columnIndex","err","ReusableAlert","AutoSizer","List","rowCount","rowHeight","deferredMeasurementCache","CustomModal","ErrorPopup","onConfirm","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","currentMapping","filteredOptions","CustomSelect","uiLabel","selectedMappings","setSelectedMappings","allNLSValues","operationChoice","StaticTable","hasNLS","normalizedHeader","hasMatch","nls","hasMatchingNLS","isMandatory","columnHeader","backendName","option","find","opt","getBackendNameForUILabel","prev","mappedAttribute","currentColumnHeader","selectedValues","entries","filter","_","mapping","groupedOptions","ebomAttributes","attr","partAttributes","prepareDropdownOptions","onColumnsMapped","existingMappings","keys","errorMessage","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","initialOperationChoice","mappedAttributes","setMappedAttributes","setOperationChoice","ENOVIA_BASE_URL","process","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","effectiveOperation","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","attributeResponse","busIDs","groupData","results","systemAttributes","groupNLS","attributeGroups","apiNlsValues","systemNlsValues","ebomNlsValues","Set","filteredGroupData","mergeAttributes","relevantAttributes","deploymentExtension","mappedData","attributesByGroup","refreshMapping","initialOperationType","documentData","setDocumentData","operationType","setOperationType","API_URL","fetchDocumentData","_documentInfo$attribu","body","preferedType","typeName","subTypes","runUXBL","metrics","UXName","client_app_domain","client_app_name","response","status","documentInfo","extensionAttributes","DocumentsAttributes","hardcodedNlsValues","apiOptions","fullName","nameParts","extractedName","hardcodedOptions","combinedMappedData","API_ENDPOINTS","transformSheetDataWithMappings","mappedAttributesData","collabMapping","documentItems","rootData","dataelements","backendFieldName","attribute","collabspaceTitle","CHUNK_SIZE","totalChunks","totalItems","originalData","mappings","isDocumentPayload","documents","attributeGroupMap","getPathForAttribute","transformedItems","transformedRow","_mappedData$find","uiLabelBackendName","Description","Type","path","pathParts","part","productTypeColumn","productType","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","getTestData","success","responses","revision","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","formattedData","setFormattedData","userDetails","setUserDetails","securityContext","setSecurityContext","collabNames","setCollabNames","setCollabMapping","isSubmitting","setIsSubmitting","apiResponse","setApiResponse","productMappedAttributes","refreshProductMapping","useMassUpload","documentMappedAttributes","refreshDocumentMapping","useFetchDocumentData","getActiveData","handleRefreshForCurrentOperation","globalCollabSpaceTitles","globalCollabSpaceNames","userData","PlatformAPI","loadPlatformAPI","getUser","getUserDetails","fetchUserDetails","window","widget","securityContextValue","handleReset","selectElement","document","querySelector","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","minHeight","maxWidth","maxHeight","Stack","gap","direction","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","open","downloadTemplate","FileUpload","validationResult","setTimeout","transformedData","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","ReusableTable","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","endpoint","successCount","failureCount","allResponses","docChunks","userInfo","email","login","userId","api","post","testData","emailNotification","finalMessage","ColumnMappingModal","root","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","securityContext1","WAFData","loadWAFData","csrfURL","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader"],"sourceRoot":""}