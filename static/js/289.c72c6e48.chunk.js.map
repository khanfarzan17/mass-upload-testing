{"version":3,"file":"static/js/289.c72c6e48.chunk.js","mappings":"8RAoDA,EAhDqBA,IAWd,IAXe,QACpBC,EAAU,UAAS,KACnBC,EAAO,KAAI,KACXC,EAAO,SAAQ,SACfC,GAAW,EAAK,QAChBC,EAAO,UACPC,EAAY,GAAE,MACdC,EAAK,KACLC,EAAI,SACJC,GAEDT,EADIU,GAAKC,EAAAA,EAAAA,GAAAX,EAAAY,GAER,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAMC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACLd,QAASA,EACTC,KAAMA,EACNC,KAAMA,EACNC,SAAUA,EACVC,QAASA,EACTC,UAAWA,EACXC,MAAOA,GACHG,GAAK,IAAAM,SAAA,CAERP,IACCQ,EAAAA,EAAAA,KAAA,OACEC,IAAKT,EACLU,IAAKX,EACLY,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,YAAa,SAEtD,IAEFf,KACM,C,uDCjCb,MAQA,EARegB,KAEXP,EAAAA,EAAAA,KAAA,OAAKX,UAAU,mBAAkBU,UAC/BC,EAAAA,EAAAA,KAAA,OAAKX,UAAU,Y,2ECHrB,MA4BA,EA5BoBN,IAAuD,IAAtD,KAAEyB,EAAI,OAAEC,EAAM,MAAEnB,EAAK,SAAES,EAAQ,cAAEW,GAAe3B,EACnE,OACEa,EAAAA,EAAAA,MAACe,EAAAA,EAAK,CAACH,KAAMA,EAAMC,OAAQA,EAAQxB,KAAK,KAAK2B,UAAQ,EAAAb,SAAA,EACnDC,EAAAA,EAAAA,KAACW,EAAAA,EAAME,OAAM,CAACC,aAAW,EAAAf,UACvBC,EAAAA,EAAAA,KAACW,EAAAA,EAAMI,MAAK,CAAAhB,SAAET,GAAS,mBAEzBU,EAAAA,EAAAA,KAACW,EAAAA,EAAMK,KAAI,CAAAjB,SAAEA,KACbC,EAAAA,EAAAA,KAACW,EAAAA,EAAMM,OAAM,CAAAlB,SACVW,EACCA,EAAcQ,KAAI,CAACC,EAAKC,KACtBpB,EAAAA,EAAAA,KAACH,EAAAA,EAAM,CAELb,QAASmC,EAAInC,SAAW,YACxBI,QAAS+B,EAAI/B,QAAQW,SAEpBoB,EAAIE,OAJAD,MAQTpB,EAAAA,EAAAA,KAACH,EAAAA,EAAM,CAACb,QAAQ,YAAYI,QAASqB,EAAOV,SAAC,cAK3C,C,wNC0BZ,EAjDiBuB,KACf,MAAMC,EAAYxC,IAaX,IAbY,QACjByC,EAAO,KACPtC,EAAO,UAAS,SAChBuC,EAAW,YAAW,UACtBC,EAAY,IAAI,gBAChBC,GAAkB,EAAK,aACvBC,GAAe,EAAI,aACnBC,GAAe,EAAK,iBACpBC,GAAkB,EAAK,UACvBC,GAAY,EAAI,MAChBC,EAAQ,QAAO,WACfC,EAAaC,EAAAA,IAEdnD,EADIoD,GAAYzC,EAAAA,EAAAA,GAAAX,EAAAY,IAEOyC,EAAAA,GAAMlD,IAASkD,EAAAA,IAEvBZ,GAAO1B,EAAAA,EAAAA,GAAA,CACnB2B,WACAC,YACAC,kBACAC,eACAC,eACAE,YACAC,QACAC,cACGE,GACH,EAmBJ,MAAO,CAAEZ,YAAWc,iBAhBK,SAACb,GAA2B,IAAlBc,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5ChB,GAASzB,EAAAA,EAAAA,GAAC,CAAE0B,UAAStC,KAAM,WAAcoD,GAC3C,EAcsCI,eAZf,SAAClB,GAA2B,IAAlBc,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1ChB,GAASzB,EAAAA,EAAAA,GAAC,CAAE0B,UAAStC,KAAM,SAAYoD,GACzC,EAUsDK,cARhC,SAACnB,GAA2B,IAAlBc,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzChB,GAASzB,EAAAA,EAAAA,GAAC,CAAE0B,UAAStC,KAAM,QAAWoD,GACxC,EAMqEM,iBAJ5C,SAACpB,GAA2B,IAAlBc,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5ChB,GAASzB,EAAAA,EAAAA,GAAC,CAAE0B,UAAStC,KAAM,QAAWoD,GACxC,EAEuF,C,4MC7CzF,MAwGA,GAxGmBO,EAAAA,EAAAA,aACjB,CAAA9D,EASE+D,KACI,IATJ,UACEC,EAAY,CAAC,OAAQ,MAAO,MAAO,OAAQ,OAAM,SACjDC,GAAW,EAAI,SACfC,EAAQ,QACRC,EAAO,SACP/D,GAAW,EAAK,QAChBqC,EAAU,kDACXzC,EAGD,MAAOoE,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC7B,eAAEX,IAAmBpB,EAAAA,EAAAA,MAG3BgC,EAAAA,EAAAA,qBAAoBR,GAAK,MACvBS,iBAAkB,WAA+B,IAA9BC,EAAgBjB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACjCa,EAAS,IACLH,GACFA,EAAS,IAEPC,GACFA,EAAQM,EAEZ,MAGF,MAUMC,EAAkBA,KACtBX,EAAIY,QAAQH,kBAAiB,EAAM,EAcrC,OACE3D,EAAAA,EAAAA,MAAA,OACEP,UAAS,yBAAAsE,OAA2BxE,EAAW,WAAa,IAC5DY,SAAA,EAEAC,EAAAA,EAAAA,KAAA,MAAAD,SACGZ,EAAW,mCAAqC,uBAEnDS,EAAAA,EAAAA,MAAA,OAAKP,UAAU,cAAaU,SAAA,EAC1BC,EAAAA,EAAAA,KAAC4D,EAAAA,EAAY,CACXZ,SAAUA,EACVa,aApCcC,IACpB,MAAMC,EAAYf,EAAW,IAAIc,GAAiB,CAACA,GACnDV,EAASW,GAGLd,GACFA,EAASc,EACX,EA8BMC,KAAK,OACLC,MAAOlB,EACP5D,SAAUA,EACV+E,WAAY/E,EAAW,GAAK,eAE9Ba,EAAAA,EAAAA,KAAA,OAAKX,UAAU,YAAWU,SACvBoD,EAAMX,OAAS,EACdW,EAAMjC,KAAI,CAACiD,EAAM/C,KACfxB,EAAAA,EAAAA,MAAA,OACEP,UAAU,OAEVc,MAAO,CAAEiE,QAAS,OAAQC,WAAY,UAAWtE,SAAA,EAEjDH,EAAAA,EAAAA,MAAA,KAAGP,UAAU,YAAWU,SAAA,CAAC,gBAAIoE,EAAKH,SAClChE,EAAAA,EAAAA,KAAA,UACEZ,QAASqE,EACTtD,MAAO,CACLmE,WAAY,OACZC,OAAQ,OACRC,OAAQrF,EAAW,cAAgB,UACnCsF,MAAO,MACPC,QAASvF,EAAW,GAAM,GAE5BA,SAAUA,EAASY,SACpB,QAdIqB,MAoBTpB,EAAAA,EAAAA,KAAA,KAAAD,SAAIyB,WAIN,I,2zCCsGZ,EA1MqBmD,CAACR,EAAMS,EAAmBC,IACtC,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,QAAQC,IAAI,gCAAiCf,EAAKH,KAAMa,GACxDI,QAAQC,IAAI,sBAAuBL,GACnCI,QAAQC,IAAI,aAAcf,EAAKH,MAC/BiB,QAAQC,IACN,kDACAN,GAGF,MAAMO,EAAiB,CACrB,EAAG,mBACH,EAAG,6BACH,EAAG,WACH,EAAG,6BAGL,IAAKN,EAKH,YAJAG,EAAO,CACLI,OAAQ,CAAC,qCACTC,QAAS,KAMb,IAAKC,MAAMC,QAAQX,GASjB,OARAK,QAAQO,MACN,8DACAZ,QAEFI,EAAO,CACLI,OAAQ,CAAC,qDACTC,QAAS,KAKbJ,QAAQC,IACN,mDACAN,GAGF,MAAMa,EAAS,IAAIC,WACnBD,EAAOE,mBAAmBxB,GAE1BsB,EAAOG,OAASC,UACd,IAAK,IAADC,EACFb,QAAQC,IAAI,sCAEZ,MAAMa,EAAWC,EAAAA,GAAUC,EAAEC,OAAOC,OAAQ,CAAEjH,KAAM,WAC9CkH,EAAYL,EAASM,WAAW,GACtCpB,QAAQC,IAAI,uBAAwBkB,GAEpC,MAAME,EAAYP,EAASQ,OAAOH,GAE5Bf,EACJW,EAAAA,GAAWQ,cAAcF,EAAW,CAAEG,OAAQ,IAAK,IAAM,GAG3D,GAFAxB,QAAQC,IAAI,qBAAsBG,IAE7BA,GAA8B,IAAnBA,EAAQ7C,OAMtB,OALAyC,QAAQO,MAAM,6CACdR,EAAO,CACLI,OAAQ,CAAC,iDACTC,QAAS,KAMb,MAAMqB,EAAYV,EAAAA,GAAWQ,cAAcF,EAAW,CAAEK,OAAQ,KAGhE,GAFA1B,QAAQC,IAAI,wBAAyBwB,GAEZ,IAArBA,EAAUlE,OAQZ,OAPAyC,QAAQO,MAAM,sDACdR,EAAO,CACLI,OAAQ,CACN,qFAEFC,YAMJ,MAAMuB,EAAcC,OAAOC,KAAKJ,EAAU,IAC1CzB,QAAQC,IAAI,uBAAwB0B,GAGpC,MAAMG,EACgD,QADrBjB,EAC/BkB,EAAAA,EAAkB7B,EAAeN,WAAmB,IAAAiB,OAAA,EAApDA,EAAsDc,YAMxD,GALA3B,QAAQC,IACN,2CACA6B,IAGGA,EASH,OARA9B,QAAQO,MACN,sEAEFR,EAAO,CACLI,OAAQ,CAAC,+BACTC,QAAS,GACT4B,oBAAoB,IAUxB,IAJyBF,EAA4BG,OAAOT,GAC1DG,EAAYO,SAASV,KAYrB,OARAxB,QAAQO,MAAM,0DACdR,EAAO,CACLI,OAAQ,CAAC,gEAADzB,OAC0DwB,EAAeN,KAEjFQ,QAASuB,EACTK,oBAAoB,IAMxB,IAAIG,EAAmB,KACvB,IAAK,MAAOC,EAAKC,KAAUT,OAAOU,QAAQP,EAAAA,GACxC,GACEM,EAAMV,YAAYM,OAAOT,GAAWG,EAAYO,SAASV,KACzD,CACAW,EAAmBC,EACnBpC,QAAQC,IAAI,qBAAsBkC,GAClC,KACF,CAEF,IAAKA,EAMH,OALAnC,QAAQO,MAAM,8DACdR,EAAO,CACLI,OAAQ,CAAC,oDACTC,YAMJ,MAAMmC,EAAkBR,EAAAA,EAAkBI,GAAkBR,YAC5D3B,QAAQC,IAAI,oBAAqBsC,GACjC,MAAMC,EACJT,EAAAA,EAAkBI,GAAkBK,oBACtCxC,QAAQC,IAAI,wBAAyBuC,GAGrC,MAAMC,EAAmB,CACvBD,sBACA7C,oBACAwC,mBACAO,gBAAiB,CAAC,OAAQ,MAAO,OAAQ,OAAQ,MAAO,UAG1D1C,QAAQC,IAAI,wCACZ,MAAM0C,OCrKuB/B,OACnCa,EACAgB,KAEA,MAAM,oBACJD,EAAmB,kBACnB7C,EAAiB,iBACjBwC,EAAgB,gBAChBO,GACED,EAEEG,EAAa,IACbC,EAAYpB,EAAUlE,OACtBoF,EAAmB,GACzB,IAAIG,EAAgB,EAEpB9C,QAAQC,IAAI,2CAADvB,OAA4CmE,EAAS,wBAAAnE,OAAuBkE,IAEvF,IAAK,IAAIG,EAAa,EAAGA,EAAaF,EAAWE,GAAcH,EAAY,CACzE,MAAMI,EAAWC,KAAKC,IAAIH,EAAaH,EAAYC,GAC7CM,EAAe1B,EAAU2B,MAAML,EAAYC,GAEjDhD,QAAQC,IAAI,qCAADvB,OAAsCqE,EAAaH,EAAa,EAAC,WAAAlE,OAAUqE,EAAa,EAAC,QAAArE,OAAOsE,IAG3GG,EAAaE,SAAQ,CAACC,EAAKC,KACzB,MAAMC,EAAiBT,EAAaQ,EAAa,EAYjD,GATAf,EAAoBa,SAASI,IACtBH,EAAIG,IAA2C,KAAjCH,EAAIG,GAAOC,WAAWC,QACvChB,EAAiBiB,KAAK,OAADlF,OACZ8E,EAAc,OAAA9E,OAAM+E,EAAK,8BAEpC,IAIuB,qBAArBtB,GAAgE,aAArBA,EAAiC,CAAC,IAAD0B,EAC9E,MAAMC,EAA4C,QAA7BD,EAAGP,EAAI,8BAAsB,IAAAO,OAAA,EAA1BA,EAA4BF,OAC/CG,EAIOnE,EAAkBuC,SAAS4B,IACrCnB,EAAiBiB,KAAK,OAADlF,OACZ8E,EAAc,gEAAA9E,OAA+DoF,EAAe,MALrGnB,EAAiBiB,KAAK,OAADlF,OACZ8E,EAAc,+CAO3B,CAGA,IAAIO,EAAkB,KAC6E,IAADC,EAAlG,GAAyB,qBAArB7B,GAAgE,+BAArBA,EAC7C4B,GAAmC,QAAjBC,EAAAV,EAAI,qBAAa,IAAAU,OAAA,EAAjBA,EAAmBN,WAAWC,SAAU,UACrD,GAAyB,8BAArBxB,GAAyE,aAArBA,EAAiC,CAAC,IAAD8B,EAC9FF,GAAsC,QAApBE,EAAAX,EAAI,wBAAgB,IAAAW,OAAA,EAApBA,EAAsBP,WAAWC,SAAU,IAC/D,CAEII,GACuBrB,EAAgBwB,MAAMC,GAC7CJ,EAAgBK,WAAWD,MAG3BxB,EAAiBiB,KAAK,OAADlF,OACZ8E,EAAc,OAAA9E,OAAMqF,EAAe,mDAAArF,OAAkDgE,EAAgB2B,KAAK,OAGvH,IAGFvB,GAAiBK,EAAa5F,OAC9B,MAAM+G,EAAWrB,KAAKsB,MAAOzB,EAAgBD,EAAa,KAC1D7C,QAAQC,IAAI,8BAADvB,OAA+B4F,EAAQ,YAG5C,IAAIzE,SAAQC,GAAW0E,WAAW1E,EAAS,IACnD,CAEA,OAAO6C,CAAgB,EDsFc8B,CAC7BhD,EACAgB,GAGF,GAAIE,EAAiBpF,OAAS,EAO5B,OANAyC,QAAQC,IAAI,oCAAqC0C,QACjD5C,EAAO,CACLI,OAAQwC,EACRvC,UACAoC,wBAMJxC,QAAQC,IAAI,uDACZH,EAAQ,CACNM,UACAqB,YACAkB,iBAAkB,GAClBH,uBAEJ,CAAE,MAAOjC,GACPP,QAAQO,MAAM,gCAAiCA,GAC/CR,EAAO,CACLI,OAAQ,CAAC,gDACTC,QAAS,IAEb,GAKFI,EAAOkE,QAAU,KACf1E,QAAQO,MAAM,kCACdR,EAAO,CAAEI,OAAQ,CAAC,wBAAyBC,QAAS,IAAK,CAC1D,IEnKL,EAnCqBtG,IAOd,IAPe,MACpBqC,EAAK,cACLwI,EAAa,QACbtH,EAAO,SACPuH,EAAQ,KACR5K,EAAI,UACJI,GACDN,EAUC,OACEa,EAAAA,EAAAA,MAACkK,EAAAA,EAAKC,OAAM,CACV,aAAW,sBACXzC,MAAOsC,GAAiB,GACxBC,SAbkB5D,SAENxD,IAAVrB,EACFyI,EAASzI,EAAO6E,EAAEC,OAAOoB,OAEzBuC,EAAS5D,EAAEC,OAAOoB,MACpB,EAQErI,KAAMA,EACNI,UAAWA,EAAUU,SAAA,EAErBC,EAAAA,EAAAA,KAAA,UAAQsH,MAAM,GAAEvH,SAAEuC,EAAQ0H,eAAsB,IAC/C1H,EAAQ2H,KAAK/I,KAAI,CAACgJ,EAAQC,KACzBnK,EAAAA,EAAAA,KAAA,UAAwBsH,MAAO4C,EAAO5C,MAAMvH,SACzCmK,EAAO7I,OADG8I,OAIH,E,2CChClB,MAeA,EAfsBpL,IAKf,IALgB,QACrBC,EAAU,OAAM,QAChBwC,EAAO,KACPhB,GAAO,EAAI,UACXnB,EAAY,IACbN,EACC,OAAKyB,GAGHR,EAAAA,EAAAA,KAACoK,EAAAA,EAAK,CAACpL,QAASA,EAASK,UAAWA,EAAUU,SACbyB,IAJjB,IAKR,EC0EZ,EAnFmBzC,IAAiB,IAAhB,OAAEqG,GAAQrG,EAC5BkG,QAAQC,IAAI,wBAAyBE,GAErC,MAAMiF,EAAgB,IAAIC,IAE1BlF,EAAOkD,SAAS9C,IAEd,MAAM+E,EAAW/E,EAAMgF,MAAM,cACvBC,EAAcjF,EAAMgF,MAAM,yBAE1BE,EAASH,EAAWA,EAAS,GAAK,GAElCI,EAAaF,EACfA,EAAY,GACZjF,EAAM2B,SAAS,uBACf,sBACA,MACEyD,EAAWL,EAAW/E,EAAMqF,MAAM,MAAM,GAAKrF,EAE9C6E,EAAcS,IAAIJ,IACrBL,EAAcU,IAAIL,EAAQ,IAG5BL,EAAcW,IAAIN,GAAQ7B,KAAK,CAAE+B,WAAUD,cAAa,IAG1D,MAAMM,GACJrL,EAAAA,EAAAA,MAAAsL,EAAAA,SAAA,CAAAnL,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,uBAAiB,8HAK7B,OACEH,EAAAA,EAAAA,MAAAsL,EAAAA,SAAA,CAAAnL,SAAA,EACEC,EAAAA,EAAAA,KAACmL,EAAa,CACZnM,QAAQ,SACRwC,QAASyJ,EACT5L,UAAU,kBAEZW,EAAAA,EAAAA,KAAA,OAAKX,UAAU,wBAAuBU,UACpCH,EAAAA,EAAAA,MAACwL,EAAAA,EAAK,CAACC,YAAU,EAACC,UAAQ,EAACjM,UAAU,qBAAoBU,SAAA,EACvDC,EAAAA,EAAAA,KAAA,SAAAD,UACEH,EAAAA,EAAAA,MAAA,MAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4BAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACGuF,MAAMiG,KAAKlB,EAAc9C,WAAW/E,OAAS,EAC5C8C,MAAMiG,KAAKlB,EAAc9C,WAAWrG,KAClCsK,IAAA,IAAEd,EAAQe,GAAaD,EAAA,OACrBC,EAAavK,KAAI,CAAAwK,EAA2BtK,KAAK,IAA/B,WAAEuJ,EAAU,SAAEC,GAAUc,EAAA,OACxC9L,EAAAA,EAAAA,MAAA,MAAAG,SAAA,CAEa,IAAVqB,GACCpB,EAAAA,EAAAA,KAAA,MACEX,UAAU,aACVsM,QAASF,EAAajJ,OAAOzC,SAE5B2K,IAED,MACJ1K,EAAAA,EAAAA,KAAA,MAAIX,UAAU,cAAaU,SAAE4K,KAC7B3K,EAAAA,EAAAA,KAAA,MAAIX,UAAU,oBAAmBU,SAAE6K,MAAc,GAAAjH,OAXvC+G,EAAM,KAAA/G,OAAIvC,GAYjB,GACL,KAGNpB,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAI4L,QAAS,EAAGvM,UAAU,wBAAuBU,SAAC,+BAQ3D,EC5DP,EAnB2BhB,IAA+B,IAA9B,KAAEyB,EAAI,OAAEC,EAAM,OAAE2E,GAAQrG,EAClD,OACEiB,EAAAA,EAAAA,KAAC6L,EAAAA,EAAW,CACVrL,KAAMA,EACNC,OAAQA,EACRnB,MAAM,iBACNoB,cAAe,CACb,CACEW,MAAO,QACPrC,QAAS,SACTI,QAASqB,IAEXV,UAEFC,EAAAA,EAAAA,KAAC8L,EAAU,CAAC1G,OAAQA,KACR,ECQlB,EAxB0BrG,IAAkC,IAAjC,KAAEyB,EAAI,OAAEC,EAAM,UAAEsL,GAAWhN,EACpD,OACEiB,EAAAA,EAAAA,KAAC6L,EAAAA,EAAW,CACVrL,KAAMA,EACNC,OAAQA,EACRnB,MAAM,eACNoB,cAAe,CACb,CACEW,MAAO,SACPrC,QAAS,SACTI,QAASqB,GAEX,CACEY,MAAO,UACPrC,QAAS,UACTI,QAAS2M,IAEXhM,UAEFC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sCACS,E,cCnBlB,MA4EA,EA5EoBhB,IAQb,IARc,cACnBiN,EAAa,qBACbC,EAAoB,aACpBC,EAAY,mBACZC,EAAkB,mBAClBC,EAAkB,iBAClBC,EAAgB,oBAChB5E,GACD1I,EACC,MAAM,aAAEuN,EAAe,GAAE,gBAAEC,EAAkB,IAAOF,GAAoB,CAAC,EAEzEpH,QAAQC,IAAI,0BAA2BmH,GACvCpH,QAAQC,IAAI,gBAAiB8G,GAC7B/G,QAAQC,IAAI,4CAA6CuC,GACzDxC,QAAQC,IAAI,qBAAsBqH,GAYlC,OACE3M,EAAAA,EAAAA,MAACwL,EAAAA,EAAK,CAACE,UAAQ,EAACjM,UAAU,eAAcU,SAAA,EACtCC,EAAAA,EAAAA,KAAA,SAAAD,UACEH,EAAAA,EAAAA,MAAA,MAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIX,UAAU,iBAAgBU,SAAC,kBAC/BC,EAAAA,EAAAA,KAAA,MAAIX,UAAU,iBAAgBU,SAAC,yBAGnCC,EAAAA,EAAAA,KAAA,SAAAD,SACGiM,EAAc9K,KAAI,CAACuF,EAAQrF,KAC1B,MAAMoL,EAAc/E,EAAoBN,SAASV,GAC3CgG,EArBUhG,KACtB,IAAKnB,MAAMC,QAAQ+G,GAEjB,OADArH,QAAQyH,KAAK,gCAAiCJ,IACvC,EAET,MAAM9B,EAAQ8B,EAAanF,SAASV,GAEpC,OADAxB,QAAQC,IAAI,WAADvB,OAAY8C,EAAM,gBAAgB+D,EAAQ,SAAM,UACpDA,CAAK,EAcSmC,CAAelG,GAQ9B,OANAxB,QAAQC,IAAI,OAADvB,OAAQvC,EAAK,KAAK,CAC3BqF,SACAgG,SACAD,cACAxC,aAAcyC,EAAShG,EAAS,MAGhC7G,EAAAA,EAAAA,MAAA,MAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAK0G,KACLzG,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAC4M,EAAY,CACXxL,MAAOA,EACPwI,cAAewC,EAAmBhL,IAAUqF,EAC5CoD,SAAUsC,EACVlN,KAAK,KACLI,UAAU,QACVF,UAAWsN,EACXnK,QAAS,CACP0H,aAAcyC,EACVhG,EACA,+BACJwD,KAAMsC,EAAgBrL,KAAK2L,IAAI,CAE7BvF,MAAOuF,EAAKC,YACZzL,MAAOwL,EAAKE,mBAjBb3L,EAsBJ,QAIL,E,wBCvEZ,MAiGA,EAjGsB4L,KACpB,MAAM,eAAEtK,IAAmBpB,EAAAA,EAAAA,MACpB+K,EAAkBY,IAAuB5J,EAAAA,EAAAA,UAAS,IACnD6J,EAAkBC,4DA2FxB,OAJAC,EAAAA,EAAAA,YAAU,KApFiBvH,WACzB,IAAK,IAADwH,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACF3I,QAAQC,IAAI,8BAGZ,MAAMG,QAAgBwI,EAAAA,EAAAA,KACtB,IAAKxI,EAEH,YADA3C,EAAeoL,EAAAA,IAKjB,MAAMC,QAAyBC,EAAAA,EAAAA,IAC7B,MAAM,GAADrK,OACFuJ,EAAe,6DAClB,GACA7H,GAGF,IAAK0I,IAAqBA,EAAiBE,OACzC,MAAM,IAAIC,MAAM,6BAElBjJ,QAAQC,IAAI,mBAAoB6I,EAAiBE,OAAOE,QAExD,MAAMC,EAAkC,QAA1Bf,EAAGU,EAAiBE,cAAM,IAAAZ,GAAQ,QAARC,EAAvBD,EAAyBc,cAAM,IAAAb,GAAK,QAALC,EAA/BD,EAAkC,UAAE,IAAAC,OAAb,EAAvBA,EAAsCc,GACvD,IAAKD,EACH,MAAM,IAAIF,MAAM,mCAGlBjJ,QAAQC,IAAI,uBAAwBkJ,GAGpC,MAAME,QAA0BN,EAAAA,EAAAA,IAC9B,OAAO,GAADrK,OACHuJ,EAAe,oGAClB,CACEqB,OAAQ,CAACH,IAEX/I,GAGF,IAAKiJ,IAAsBA,EAAkBL,OAC3C,MAAM,IAAIC,MAAM,mCAElBjJ,QAAQC,IAAI,sBAAuBoJ,EAAkBL,QAIrD,MAAMO,GAA4C,QAAhChB,EAAAc,EAAkBL,OAAOQ,eAAO,IAAAjB,GAAK,QAALC,EAAhCD,EAAmC,UAAE,IAAAC,OAAL,EAAhCA,EAAuCe,YAAa,GACtEvJ,QAAQC,IACN,yCACAsJ,EAAUtN,KAAKwN,GAASA,EAAKC,OAI/B,MAAMrC,EAAekC,EAAUtN,KAAKwN,GAASA,EAAKC,MAW5CC,IAR4B,QAAhClB,EAAAY,EAAkBL,OAAOQ,eAAO,IAAAf,GAAK,QAALC,EAAhCD,EAAmC,UAAE,IAAAC,GAAW,QAAXC,EAArCD,EAAuCa,iBAAS,IAAAZ,OAAhB,EAAhCA,EAAkDiB,QAC/ChC,IAAsC,IAA7BA,EAAKiC,wBACZ,IAM+B5N,KAAK2L,IAAI,CAC7CE,QAASF,EAAK8B,IACd7B,YAAaD,EAAK7I,SAGpBiB,QAAQC,IAAI,qBAAsB0J,GAClC3J,QAAQC,IAAI,4BAA6BoH,GACzCrH,QAAQC,IAAI,oCAAqC0J,GACjD3B,EAAoB,CAClBX,aAAckC,EAAUtN,KAAKwN,GAASA,EAAKC,MAC3CpC,gBAAiBqC,GAErB,CAAE,MAAOpJ,GACPP,QAAQO,MAAM,iCAAkCA,GAChD9C,EAAe8C,EAAMhE,SAAW,iCAClC,GAIAuN,EAAoB,GACnB,IAEI,CAAE1C,mBAAkB,ECpD7B,EA5CmBtN,IAA6C,IAA5C,cAAEiN,EAAa,oBAAEvE,GAAqB1I,EACxDkG,QAAQC,IAAI,uCAAwC8G,GACpD/G,QAAQC,IACN,6CACAuC,GAEF,MAAM,iBAAE4E,GAAqBW,KACtBd,EAAc8C,IAAmB3L,EAAAA,EAAAA,UAAS,CAAC,IAC3C+I,EAAoB6C,IAAyB5L,EAAAA,EAAAA,UAAS,CAAC,IACvD6L,EAAwBC,IAA6B9L,EAAAA,EAAAA,UAAS,CACnEiJ,aAAc,GACdC,gBAAiB,MAGnBa,EAAAA,EAAAA,YAAU,KACJ9H,MAAMC,QAAQ8G,KAChBpH,QAAQC,IAAI,8BAA+BmH,GAC3C8C,EAA0B,CACxB7C,aAAcD,EAAiBnL,KAAK2L,GAASA,EAAKE,UAClDR,gBAAiBF,IAErB,GACC,CAACA,IASJ,OACErM,EAAAA,EAAAA,KAACoP,EAAW,CACVpD,cAAeA,EACfC,qBAV0B7K,IAC5B4N,GAAelP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIoM,GAAY,IAAE,CAAC9K,IAAS8K,EAAa9K,KAAS,EAUjE8K,aAAcA,EACdC,mBATuBA,CAAC/K,EAAOwI,KACjCqF,GAAqBnP,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIsM,GAAkB,IAAE,CAAChL,GAAQwI,IAAgB,EAStEwC,mBAAoBA,EACpBC,iBAAkBA,EAClB5E,oBAAqBA,GACrB,ECON,EA7C2B1I,IAKpB,IALqB,KAC1ByB,EAAI,OACJC,EAAM,cACNuL,EAAa,oBACbvE,GACD1I,EACC,MAAMkM,GACJrL,EAAAA,EAAAA,MAAAsL,EAAAA,SAAA,CAAAnL,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,sBAAgB,4JAM5B,OACEH,EAAAA,EAAAA,MAACiM,EAAAA,EAAW,CACVrL,KAAMA,EACNC,OAAQA,EACRnB,MAAM,6BACNoB,cAAe,CACb,CACEW,MAAO,KACPrC,QAAS,UACTI,QAASqB,GAEX,CACEY,MAAO,SACPrC,QAAS,SACTI,QAASqB,IAEXV,SAAA,EAEFC,EAAAA,EAAAA,KAACmL,EAAa,CACZnM,QAAQ,OACRwC,QAASyJ,EACT5L,UAAU,wBAEZW,EAAAA,EAAAA,KAACqP,EAAU,CACTrD,cAAeA,EACfvE,oBAAqBA,MAEX,EC+QlB,EA/SmB6H,KACjB,MAAOC,EAAcC,IAAmBnM,EAAAA,EAAAA,UAAS,KAC1CoM,EAAWC,IAAgBrM,EAAAA,EAAAA,WAAS,IACpCsM,EAAgBC,IAAqBvM,EAAAA,EAAAA,WAAS,IAC9CwM,EAAmBC,IAAwBzM,EAAAA,EAAAA,WAAS,IACpD0M,EAAsBC,IAA2B3M,EAAAA,EAAAA,WAAS,IAC3D,eAAEX,EAAc,iBAAEL,IAAqBf,EAAAA,EAAAA,MACtC2O,EAAcC,IAAmB7M,EAAAA,EAAAA,WAAS,IAC1C8M,EAAiBC,IAAsB/M,EAAAA,EAAAA,UAAS,KAChD+B,EAAQiL,IAAahN,EAAAA,EAAAA,UAAS,KAC9B2I,EAAesE,IAAoBjN,EAAAA,EAAAA,UAAS,KAC5CoE,EAAqB8I,IAA0BlN,EAAAA,EAAAA,UAAS,IACzDmN,GAAkBC,EAAAA,EAAAA,WACjBC,EAAoBC,IAAyBtN,EAAAA,EAAAA,UAAS,GAG3D6H,EAAAA,UAOFkC,EAAAA,EAAAA,YAAU,KAERnI,QAAQC,IACN,6CACA0L,EAAAA,IAEEtL,MAAMC,QAAQqL,EAAAA,IAChBpB,EAAgB,IAAIoB,EAAAA,KAEpB3L,QAAQO,MACN,mEACAoL,EAAAA,IAGJ3L,QAAQC,IAAI,gDAAiDqK,EAAa,GACzE,IAEH,MAyEMsB,EAAc,WAA+B,IAA9BrN,EAAgBjB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEnCmN,GAAa,GACbE,GAAkB,GAClBE,GAAqB,GACrBE,GAAwB,GACxBE,GAAgB,GAChBE,EAAmB,IACnBC,EAAU,IACVC,EAAiB,IACjBC,EAAuB,IAGvB,MAAMO,EAAgBC,SAASC,cAC7B,0CAEEF,IACFA,EAAcxJ,MAAQ,IAInB9D,GACHnB,EAAiB,6BAErB,GAaA+K,EAAAA,EAAAA,YAAU,KACRnI,QAAQC,IAAI,4BAA6BiL,EAAgB,GACxD,CAACA,IAGJ,MAAMc,EAA0C,IAAzBjF,EAAcxJ,QAAgB4C,EAAO5C,OAAS,EAC/D0O,EAAqD,IAAzBlF,EAAcxJ,OAOhDyC,QAAQC,IAAI,oBAAqBE,GAGjC,MAAM+L,GAAwBhB,EAE9B,OACEvQ,EAAAA,EAAAA,MAAAsL,EAAAA,SAAA,CAAAnL,SAAA,EACEH,EAAAA,EAAAA,MAACwR,EAAAA,EAAK,CAAC/R,UAAU,OAAOgS,IAAK,EAAEtR,SAAA,EAE7BH,EAAAA,EAAAA,MAACwR,EAAAA,EAAK,CAACE,UAAU,aAAYvR,SAAA,EAC3BC,EAAAA,EAAAA,KAAC4M,EAAY,CACXhD,cAAeuG,EACftG,SA/BqBvC,IAC7BrC,QAAQC,IAAI,sBAAuBoC,GACnC8I,EAAmB9I,EAAM,EA8BjBrI,KAAK,KACLI,UAAU,OACViD,QAAS,CACP0H,aAAc,oBACdC,KAAM,CACJ,CAAE3C,MAAO,IAAKjG,MAAO,iCACrB,CAAEiG,MAAO,IAAKjG,MAAO,8BACrB,CAAEiG,MAAO,IAAKjG,MAAO,YACrB,CAAEiG,MAAO,IAAKjG,MAAO,kCAK3BrB,EAAAA,EAAAA,KAAA,OAAKX,UAAU,cAAaU,SACL,MAApBoQ,IACCnQ,EAAAA,EAAAA,KAAC8J,EAAAA,EAAKyH,MAAK,CAACC,UAAU,mBAAkBzR,UACtCC,EAAAA,EAAAA,KAAC8J,EAAAA,EAAK2H,QAAO,CAACvS,KAAK,OAAO8D,UAAQ,SAIxChD,EAAAA,EAAAA,KAAA,OAAKX,UAAU,MAAKU,UAClBC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAY,CACX1S,QAAQ,eACRC,KAAK,KACLG,QA3FmBuS,KC1HAjP,IAAoByN,IACnD,IAAIyB,EAAM,GACV,OAAQzB,GACN,IAAK,IACHyB,EACE,6FACF,MACF,IAAK,IACHA,EACE,sGACF,MACF,IAAK,IACHA,EACE,sFACF,MACF,IAAK,IACHA,EACE,sGACF,MACF,QAEE,YADAlP,EAAemP,EAAAA,IAGnBC,OAAOC,KAAKH,EAAK,SAAS,EDoGxBI,CAAiBtP,EAAjBsP,CAAiC7B,EAAgB,EA2FvC5Q,KAAK,4BAOXS,EAAAA,EAAAA,KAAA,OAAKX,UAAW8R,EAAuB,aAAe,GAAGpR,UACvDC,EAAAA,EAAAA,KAACiS,EAAU,CACTnP,IAAK0N,EACLzN,UAAW,CAAC,QACZC,UAAU,EACVC,SA7Ke4C,UACvB,GAAqB,IAAjB1C,EAAMX,OAEV,IACE0N,GAAgB,GAChBjL,QAAQC,IAAI,+BAEZ,MAAMgN,QAAyBvN,EAC7BxB,EAAM,GACNoM,EACAY,GAEFlL,QAAQC,IAAI,qBAAsBgN,GAElC,MAAM,QACJ7M,EAAU,GAAE,iBACZuC,EAAmB,GAAE,oBACrBH,EAAsB,IACpByK,EAEJjN,QAAQC,IAAI,kBAAmB,CAC7BG,UACAuC,mBACAH,wBAGF6I,EAAiBjL,GACjBkL,EAAuB9I,GAES,IAA5BG,EAAiBpF,QACnB6N,EAAU,IACVhO,EAAiB,4CAEjBgO,EAAUzI,GACVgI,GAAkB,GAEtB,CAAE,MAAOuC,GACPlN,QAAQO,MAAM,qBAAsB2M,GAEpC,MACE/M,OAAQgN,EAAiB,CAAC,6BAC1B/M,QAASgN,EAAkB,GAC3B5K,oBAAqB6K,EAA8B,GAAE,mBACrDrL,GAAqB,GACnBkL,EAGJ,GAAIlL,EASF,OARAvE,EACE,iEAEFmO,GAAY,QAERL,EAAgB9M,SAClB8M,EAAgB9M,QAAQH,oBAM5B8M,EAAU+B,GACV9B,EAAiB+B,GACjB9B,EAAuB+B,GACvB1C,GAAkB,EACpB,CAAC,QACCM,GAAgB,EAClB,GA4GQhN,QAAS2N,EACT1R,SAAUgS,EACV3P,QACE2P,EACI,mCACA,qDAMTlB,IAAgBjQ,EAAAA,EAAAA,KAACO,EAAAA,EAAM,IAGvB0P,IACCjQ,EAAAA,EAAAA,KAAA,OAAKX,UAAU,sBAAqBU,UAClCC,EAAAA,EAAAA,KAAA,OAAKX,UAAU,WAAUU,UACvBH,EAAAA,EAAAA,MAAA,OACEP,UAAU,eACVkT,KAAK,cACLpS,MAAO,CAAEC,MAAM,GAADuD,OAAK+M,EAAkB,MAAM3Q,SAAA,CAE1C2Q,EAAmB,sBAO5B9Q,EAAAA,EAAAA,MAACwR,EAAAA,EAAK,CAACE,UAAU,aAAaD,IAAK,EAAEtR,SAAA,EACnCC,EAAAA,EAAAA,KAAC8J,EAAAA,EAAK0I,MAAK,CACTtT,KAAK,WACLmC,MAAM,aACNhC,UAAU,mBAEZO,EAAAA,EAAAA,MAAA,OAAKP,UAAU,uBAAsBU,SAAA,CAClCqF,EAAO5C,OAAS,IACfxC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAY,CACX1S,QAAQ,SACRI,QAASA,IAAM0Q,GAAqB,GACpCvQ,KAAI,mBAAAoE,OAAqByB,EAAO5C,OAAM,QAI1CxC,EAAAA,EAAAA,KAAC0R,EAAAA,EAAY,CACX1S,QAASkS,EAA4B,YAAc,OACnD9R,QAzHuBqT,KACjC3C,GAAqB,GACrBE,GAAwB,EAAK,EAwHnBzQ,KAAK,6BACLJ,SAAU+R,KAGZlR,EAAAA,EAAAA,KAAC0R,EAAAA,EAAY,CACX1S,QAASiS,EAAiB,YAAc,UACxC9R,SAAU8R,EACVhS,KAAK,KACLG,QAASA,IAAMsQ,GAAa,GAC5BnQ,KAAK,qBAObS,EAAAA,EAAAA,KAAC0S,EAAkB,CACjBlS,KAAMqP,EACNpP,OAAQA,IAAMqP,GAAqB,GACnC1K,OAAQA,KAKVpF,EAAAA,EAAAA,KAAC2S,EAAiB,CAChBnS,KAAMiP,EACNhP,OAAQA,IAAMiP,GAAa,GAC3B3D,UAlIsB6G,KAC1BC,MAAM,cACNnD,GAAa,EAAM,KAqIjB1P,EAAAA,EAAAA,KAAC8S,EAAkB,CACjBtS,KAAMuP,EACNtP,OAAQA,IAAMuP,GAAwB,GACtChE,cAAeA,EACfvE,oBAAqBA,MAEtB,EE7SP,IAAIsL,EAAO,KA4CI,SAAS,IAGtB,GAAIjB,OAAOkB,OAAQ,CAGjB,IAAIC,GAAe,EAEnBnB,OAAOkB,OAAOE,SAAS,UAAU,KAC3BD,EACFhO,QAAQyH,KACN,+EAIJuG,GAAe,EA1DrB,WAAkB,IAADE,EAAAC,EACfC,UAAU,CAAC,+BAAgCC,IACzCxB,OAAOwB,YAAcA,CAAW,IAIlC,IAAIC,GACW,QAAbJ,EAAArB,OAAOkB,cAAM,IAAAG,GAAM,QAANC,EAAbD,EAAeK,YAAI,IAAAJ,OAAN,EAAbA,EAAqBpC,cAAc,WACnCD,SAAS0C,eAAe,QAGrBF,IACHA,EAAcxC,SAAS2C,cAAc,OACrCH,EAAYlF,GAAK,OACbyD,OAAOkB,QAAUlB,OAAOkB,OAAOQ,KACjC1B,OAAOkB,OAAOQ,KAAKG,YAAYJ,GAG/BxC,SAASyC,KAAKG,YAAYJ,IAOzBR,IAEHA,EAAOa,EAAAA,WAAoBL,IAK7BR,EAAKc,QACHjU,EAAAA,EAAAA,MAACkU,EAAAA,GAAQ,CAACC,MAAOA,EAAAA,EAAMhU,SAAA,EACrBC,EAAAA,EAAAA,KAACsP,EAAU,KACXtP,EAAAA,EAAAA,KAACgU,EAAAA,GAAc,OAMrB,CAuBMC,GAAO,GAEX,MACEhP,QAAQO,MACN,sEAGN,C,gDCnFO,MAAMqI,EAAiBhI,UAC5B,IACE,IAAIqO,EAAmBpC,OAAOkB,OAAOmB,SAAS,eAC9C,MAAMC,QAAgBC,EAAAA,EAAAA,MACtBpP,QAAQC,IAAI,uBAAwBgP,GACpC,MAAMI,EAAUnH,6GAEVoH,QAAiB,IAAIzP,SAAQ,CAACC,EAASC,KAC3CoP,EAAQI,qBAAqBF,EAAS,CACpCG,OAAQ,MACRvV,KAAM,OACNwV,WAAY3P,EACZ4P,UAAW3P,GACX,IAGE4P,EAAYL,EAASM,KAAK7Q,KAC1B8Q,EAAYP,EAASM,KAAKvN,MAC1ByN,EAAwB,kBACxBC,EAAuBd,EAM7B,MAJgB,CACd,CAACU,GAAYE,EACb,CAACC,GAAwBC,EAG7B,CAAE,MAAOxP,GAEP,YADAP,QAAQO,MAAM,gCAAiCA,EAEjD,E","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Modal/customModal.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","pages/mass-upload/validateDataInBatches.js","components/Select/customSelect.jsx","components/Alert/ReusableAlert.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","hooks/Mass-Upload/useMassUpload.js","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","pages/mass-upload/massUpload.jsx","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n    // const handleDragOver = (event) => {\r\n    //   if (disabled) {\r\n    //     event.preventDefault();\r\n    //     event.stopPropagation();\r\n    //     showErrorToast(\"Please choose an operation from the drop-down first\");\r\n    //   } else {\r\n    //     // Allow drag-over behavior for valid file uploads\r\n    //     event.preventDefault();\r\n    //     event.dataTransfer.dropEffect = \"copy\";\r\n    //   }\r\n    // };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled ? \"Please select an operation first\" : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\nimport { validateDataInBatches } from \"./validateDataInBatches\";\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"Starting file validation for:\", file.name, selectedOperation);\r\n    console.log(\"Selected Operation:\", selectedOperation);\r\n    console.log(\"File Name:\", file.name);\r\n    console.log(\r\n      \"[validateFile.js] Required Collaborative Space:\",\r\n      collabSpaceTitles\r\n    );\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    // 🔍 Ensure collabSpaceTitles is an array\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\r\n        \"[validateFile.js] ❌ collabSpaceTitles is not an array!\",\r\n        collabSpaceTitles\r\n      );\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    console.log(\r\n      \"[validateFile.js] Required Collaborative Spaces:\",\r\n      collabSpaceTitles\r\n    );\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      try {\r\n        console.log(\"File successfully read. Parsing...\");\r\n\r\n        const workbook = XLSX.read(e.target.result, { type: \"binary\" });\r\n        const sheetName = workbook.SheetNames[0];\r\n        console.log(\"Detected sheet name:\", sheetName);\r\n\r\n        const worksheet = workbook.Sheets[sheetName];\r\n\r\n        const headers =\r\n          XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n        console.log(\"Extracted headers:\", headers);\r\n\r\n        if (!headers || headers.length === 0) {\r\n          console.error(\"❌ No headers found in the file.\");\r\n          reject({\r\n            errors: [\"The uploaded file has no content or is empty.\"],\r\n            headers: [],\r\n          });\r\n          return;\r\n        }\r\n\r\n        // ✅ Convert worksheet into JSON (with empty cell values captured)\r\n        const sheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n        console.log(\"Extracted sheet data:\", sheetData);\r\n\r\n        if (sheetData.length === 0) {\r\n          console.error(\"❌ No row data found. Only headers exist.\");\r\n          reject({\r\n            errors: [\r\n              \"The uploaded file contains only headers but no data. Please add at least one row.\",\r\n            ],\r\n            headers,\r\n          });\r\n          return;\r\n        }\r\n\r\n        // ✅ Extract headers from the first data row\r\n        const fileHeaders = Object.keys(sheetData[0]);\r\n        console.log(\"Parsed file headers:\", fileHeaders);\r\n\r\n        // Get expected headers for selected operation\r\n        const expectedHeadersForOperation =\r\n          config.MassUpload[operationNames[selectedOperation]]?.fileHeaders;\r\n        console.log(\r\n          \"Expected headers for selected operation:\",\r\n          expectedHeadersForOperation\r\n        );\r\n\r\n        if (!expectedHeadersForOperation) {\r\n          console.error(\r\n            \"❌ No template configuration found for selected operation\"\r\n          );\r\n          reject({\r\n            errors: [\"Invalid operation selected.\"],\r\n            headers: [],\r\n            isTemplateMismatch: true,\r\n          });\r\n          return;\r\n        }\r\n\r\n        // Check if headers match the selected operation's template\r\n        const headersMismatch = !expectedHeadersForOperation.every((header) =>\r\n          fileHeaders.includes(header)\r\n        );\r\n\r\n        if (headersMismatch) {\r\n          console.error(\"❌ Template does not match selected operation\");\r\n          reject({\r\n            errors: [\r\n              `The uploaded template does not match the selected operation: ${operationNames[selectedOperation]}`,\r\n            ],\r\n            headers: fileHeaders,\r\n            isTemplateMismatch: true,\r\n          });\r\n          return;\r\n        }\r\n\r\n        // 🔍 **Step 1: Find Matching Operation Based on Headers**\r\n        let matchedOperation = null;\r\n        for (const [key, value] of Object.entries(config.MassUpload)) {\r\n          if (\r\n            value.fileHeaders.every((header) => fileHeaders.includes(header))\r\n          ) {\r\n            matchedOperation = key;\r\n            console.log(\"Matched operation:\", matchedOperation);\r\n            break;\r\n          }\r\n        }\r\n        if (!matchedOperation) {\r\n          console.error(\"❌ No matching operation found for given headers.\");\r\n          reject({\r\n            errors: [\"File headers do not match any expected template.\"],\r\n            headers,\r\n          });\r\n          return;\r\n        }\r\n\r\n        // ✅ **Step 2: Validate Headers**\r\n        const expectedHeaders = config.MassUpload[matchedOperation].fileHeaders;\r\n        console.log(\"Expected Headers:\", expectedHeaders);\r\n        const mandatoryAttributes =\r\n          config.MassUpload[matchedOperation].mandatoryAttributes;\r\n        console.log(\"Mandatory Attributes:\", mandatoryAttributes);\r\n\r\n        // Replace the existing validation loop with batch processing\r\n        const validationConfig = {\r\n          mandatoryAttributes,\r\n          collabSpaceTitles,\r\n          matchedOperation,\r\n          invalidPrefixes: [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"],\r\n        };\r\n\r\n        console.log(\"Starting batch validation process...\");\r\n        const validationErrors = await validateDataInBatches(\r\n          sheetData,\r\n          validationConfig\r\n        );\r\n\r\n        if (validationErrors.length > 0) {\r\n          console.log(\"Validation completed with errors:\", validationErrors);\r\n          reject({\r\n            errors: validationErrors,\r\n            headers,\r\n            mandatoryAttributes,\r\n          });\r\n          return;\r\n        }\r\n\r\n        // ✅ **Final Step: Resolve with Headers and Sheet Data**\r\n        console.log(\"✅ File validation successful. No errors found.\");\r\n        resolve({\r\n          headers,\r\n          sheetData,\r\n          validationErrors: [],\r\n          mandatoryAttributes, // Make sure we're returning mandatoryAttributes\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error during file validation:\", error);\r\n        reject({\r\n          errors: [\"An error occurred while processing the file.\"],\r\n          headers: [],\r\n        });\r\n      }\r\n    };\r\n\r\n    // ❌ **Handle File Read Errors**\r\n\r\n    reader.onerror = () => {\r\n      console.error(\"❌ Error reading the file.\");\r\n      reject({ errors: [\"File reading failed.\"], headers: [] });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","export const validateDataInBatches = async (\r\n  sheetData,\r\n  validationConfig\r\n) => {\r\n  const {\r\n    mandatoryAttributes,\r\n    collabSpaceTitles,\r\n    matchedOperation,\r\n    invalidPrefixes\r\n  } = validationConfig;\r\n\r\n  const BATCH_SIZE = 1000;\r\n  const totalRows = sheetData.length;\r\n  const validationErrors = [];\r\n  let processedRows = 0;\r\n\r\n  console.log(`[BatchValidator] Starting validation of ${totalRows} rows in batches of ${BATCH_SIZE}`);\r\n\r\n  for (let startIndex = 0; startIndex < totalRows; startIndex += BATCH_SIZE) {\r\n    const endIndex = Math.min(startIndex + BATCH_SIZE, totalRows);\r\n    const currentBatch = sheetData.slice(startIndex, endIndex);\r\n    \r\n    console.log(`[BatchValidator] Processing batch ${startIndex / BATCH_SIZE + 1}, rows ${startIndex + 1} to ${endIndex}`);\r\n\r\n    // Validate current batch\r\n    currentBatch.forEach((row, batchIndex) => {\r\n      const actualRowIndex = startIndex + batchIndex + 2; // +2 for header row and 0-based index\r\n\r\n      // Mandatory fields validation\r\n      mandatoryAttributes.forEach((field) => {\r\n        if (!row[field] || row[field].toString().trim() === \"\") {\r\n          validationErrors.push(\r\n            `Row ${actualRowIndex}: \"${field}\" is required but is empty`\r\n          );\r\n        }\r\n      });\r\n\r\n      // Collaborative Space validation\r\n      if (matchedOperation === \"Physical Product\" || matchedOperation === \"Document\") {\r\n        const userCollabSpace = row[\"Collaborative Space\"]?.trim();\r\n        if (!userCollabSpace) {\r\n          validationErrors.push(\r\n            `Row ${actualRowIndex}: \"Collaborative Space\" is Missing or Empty`\r\n          );\r\n        } else if (!collabSpaceTitles.includes(userCollabSpace)) {\r\n          validationErrors.push(\r\n            `Row ${actualRowIndex}: You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n          );\r\n        }\r\n      }\r\n\r\n      // EIN/Document validation\r\n      let valueToValidate = null;\r\n      if (matchedOperation === \"Physical Product\" || matchedOperation === \"Physical Product Structure\") {\r\n        valueToValidate = row[\"EIN Number\"]?.toString().trim() || null;\r\n      } else if (matchedOperation === \"Physical Product-Document\" || matchedOperation === \"Document\") {\r\n        valueToValidate = row[\"Document Name\"]?.toString().trim() || null;\r\n      }\r\n\r\n      if (valueToValidate) {\r\n        const hasInvalidPrefix = invalidPrefixes.some((prefix) =>\r\n          valueToValidate.startsWith(prefix)\r\n        );\r\n        if (hasInvalidPrefix) {\r\n          validationErrors.push(\r\n            `Row ${actualRowIndex}: \"${valueToValidate}\" has an invalid prefix. Not allowed prefixes: ${invalidPrefixes.join(\", \")}`\r\n          );\r\n        }\r\n      }\r\n    });\r\n\r\n    processedRows += currentBatch.length;\r\n    const progress = Math.round((processedRows / totalRows) * 100);\r\n    console.log(`[BatchValidator] Progress: ${progress}%`);\r\n\r\n    // Allow UI updates between batches\r\n    await new Promise(resolve => setTimeout(resolve, 0));\r\n  }\r\n\r\n  return validationErrors;\r\n};","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  options,\r\n  onChange,\r\n  size,\r\n  className,\r\n}) => {\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{options.defaultLabel}</option> {/* Default option */}\r\n      {options.list.map((option, attrIndex) => (\r\n        <option key={attrIndex} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  console.log(\"Errors in ErrorPopup:\", errors);\r\n  // Group errors by row number\r\n  const groupedErrors = new Map();\r\n\r\n  errors.forEach((error) => {\r\n    // Extract row number and column name using regex\r\n    const rowMatch = error.match(/Row (\\d+):/);\r\n    const columnMatch = error.match(/\"([^\"]*)\" is required/);\r\n\r\n    const rowNum = rowMatch ? rowMatch[1] : \"\"; // Get row number or default to \"-\"\r\n    // If columnMatch exists, use the captured column name, else check if it's a Collaborative Space error\r\n    const columnName = columnMatch\r\n      ? columnMatch[1]\r\n      : error.includes(\"Collaborative Space\")\r\n      ? \"Collaborative Space\"\r\n      : \"N/A\";\r\n    const errorMsg = rowMatch ? error.split(\": \")[1] : error; // Extract error message\r\n    // Initialize array for errors if row number is not already in the Map\r\n    if (!groupedErrors.has(rowNum)) {\r\n      groupedErrors.set(rowNum, []);\r\n    }\r\n    // Add error details to the groupedErrors Map\r\n    groupedErrors.get(rowNum).push({ errorMsg, columnName });\r\n  });\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️ Note:</strong> Below reports show only uploaded spreadsheet\r\n      error rows. To resolve these issues, update the spreadsheet and re-import.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={errorMessage}\r\n        className=\"custom-alert\"\r\n      />\r\n      <div className=\"error-table-container\">\r\n        <Table responsive bordered className=\"custom-error-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Row Number</th>\r\n              <th>Column Name</th>\r\n              <th>Error Description</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Array.from(groupedErrors.entries()).length > 0 ? (\r\n              Array.from(groupedErrors.entries()).map(\r\n                ([rowNum, errorDetails]) =>\r\n                  errorDetails.map(({ columnName, errorMsg }, index) => (\r\n                    <tr key={`${rowNum}-${index}`}>\r\n                      {/* Only display row number on first occurrence */}\r\n                      {index === 0 ? (\r\n                        <td\r\n                          className=\"row-number\"\r\n                          rowSpan={errorDetails.length}\r\n                        >\r\n                          {rowNum}\r\n                        </td>\r\n                      ) : null}\r\n                      <td className=\"column-name\">{columnName}</td>\r\n                      <td className=\"error-description\">{errorMsg}</td>\r\n                    </tr>\r\n                  ))\r\n              )\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={3} className=\"text-center no-errors\">\r\n                  No Errors Found\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\nimport \"./staticTable.css\";\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleCheckboxChange,\r\n  checkedItems,\r\n  handleSelectChange,\r\n  selectedAttributes,\r\n  mappedAttributes, // Passed mapped attributes\r\n  mandatoryAttributes,\r\n}) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n\r\n  console.log(\"Mapped Attributes prop:\", mappedAttributes);\r\n  console.log(\"columnHeaders\", columnHeaders);\r\n  console.log(\"static table recieved manditory Attribute\", mandatoryAttributes);\r\n  console.log(\"Dropdown Options :\", dropdownOptions);\r\n\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n    const match = allNLSValues.includes(header);\r\n    console.log(`Header \"${header}\" NLS match:`, match ? \"✅\" : \"❌\");\r\n    return match;\r\n  };\r\n\r\n  return (\r\n    <Table bordered className=\"table-light \">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\"> Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((header, index) => {\r\n          const isMandatory = mandatoryAttributes.includes(header);\r\n          const hasNLS = hasMatchingNLS(header);\r\n          // Log the state of each row\r\n          console.log(`Row ${index}:`, {\r\n            header,\r\n            hasNLS,\r\n            isMandatory,\r\n            defaultLabel: hasNLS ? header : \"\",\r\n          });\r\n          return (\r\n            <tr key={index}>\r\n              <td>{header}</td>\r\n              <td>\r\n                <CustomSelect\r\n                  index={index}\r\n                  selectedValue={selectedAttributes[index] || header}\r\n                  onChange={handleSelectChange}\r\n                  size=\"lg\"\r\n                  className=\"w-100\"\r\n                  disabled={!hasNLS}\r\n                  options={{\r\n                    defaultLabel: hasNLS\r\n                      ? header\r\n                      : \"Please select from Drop Down\", // Show header only if NLS matches\r\n                    list: dropdownOptions.map((attr) => ({\r\n                      // Always show all mapped attributes\r\n                      value: attr.backendName,\r\n                      label: attr.uiLabel,\r\n                    })),\r\n                  }}\r\n                />\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = () => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async () => {\r\n    try {\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      // Store all NLS values from groupData for header matching\r\n      const allNLSValues = groupData.map((item) => item.nls);\r\n\r\n      const relevantAttributes =\r\n        attributeResponse.output.results?.[0]?.groupData?.filter(\r\n          (attr) => attr.deploymentExtension === true\r\n        ) || [];\r\n\r\n      // const relevantAttributes = groupData.filter(\r\n      //   (attr) => attr.deploymentExtension === true\r\n      // );\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name, // Backend Name\r\n      }));\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\"Mapped Attributes (for dropdown):\", mappedData);\r\n      setMappedAttributes({\r\n        allNLSValues: groupData.map((item) => item.nls),\r\n        dropdownOptions: mappedData,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchColumnMapping();\r\n  }, []);\r\n\r\n  return { mappedAttributes };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import React, { useState, useEffect } from \"react\"; // Corrected import for useState\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n\r\nconst MappedList = ({ columnHeaders, mandatoryAttributes }) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  const { mappedAttributes } = useMassUpload();\r\n  const [checkedItems, setCheckedItems] = useState({});\r\n  const [selectedAttributes, setSelectedAttributes] = useState({});\r\n  const [filterMappedAttributes, setfilterMappedAttributes] = useState({\r\n    allNLSValues: [],\r\n    dropdownOptions: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(mappedAttributes)) {\r\n      console.log(\"Filtered mapped attributes:\", mappedAttributes);\r\n      setfilterMappedAttributes({\r\n        allNLSValues: mappedAttributes.map((attr) => attr.uiLabel),\r\n        dropdownOptions: mappedAttributes,\r\n      });\r\n    }\r\n  }, [mappedAttributes]);\r\n\r\n  const handleCheckboxChange = (index) => {\r\n    setCheckedItems({ ...checkedItems, [index]: !checkedItems[index] });\r\n  };\r\n  const handleSelectChange = (index, selectedValue) => {\r\n    setSelectedAttributes({ ...selectedAttributes, [index]: selectedValue });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={columnHeaders}\r\n      handleCheckboxChange={handleCheckboxChange}\r\n      checkedItems={checkedItems}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedAttributes={selectedAttributes}\r\n      mappedAttributes={mappedAttributes}\r\n      mandatoryAttributes={mandatoryAttributes}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show,\r\n  onHide,\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n}) => {\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport { globalCollabSpaceTitles } from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false); // New state for spreadsheet modal\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef(); // Add this ref\r\n  const [validationProgress, setValidationProgress] = useState(0);\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Log the global variable directly to verify its contents\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n      console.log(\"Validation Result:\", validationResult);\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n      } = validationResult;\r\n\r\n      console.log(\"Extracted data:\", {\r\n        headers,\r\n        validationErrors,\r\n        mandatoryAttributes,\r\n      });\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(\"No Error! File validated successfully!\");\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      // If there's a template mismatch, show error and reset widget\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(\r\n          \"The template uploaded and the selected operation do not match\"\r\n        );\r\n        handleReset(true); // Pass true to skip success toast\r\n        // Clear the file uploader\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Only set these states if it's not a template mismatch\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    // Reset all states to their initial values\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n\r\n    // Reset the dropdown\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    // Only show success toast if not skipped\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(\"Widget reset successfully!\");\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false); // Close content errors modal\r\n    setShowSpreadsheetModal(true); // Open spreadsheet modal\r\n  };\r\n\r\n  const handleOperationChange = (value) => {\r\n    console.log(\"Operation selected:\", value); // Debug log\r\n    setOperationChoice(value);\r\n  };\r\n\r\n  // Add this useEffect to monitor state changes\r\n  useEffect(() => {\r\n    console.log(\"Operation Choice updated:\", operationChoice);\r\n  }, [operationChoice]);\r\n\r\n  // It will be disabled if no file is uploaded (no headers) or if there are validation errors.\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled = columnHeaders.length === 0; // Disable if no file uploaded\r\n\r\n  const handleConfirmSubmit = () => {\r\n    alert(\"Confirmed!\");\r\n    setModalShow(false);\r\n  };\r\n\r\n  console.log(\"Operation Choice:\", errors);\r\n\r\n  // Add this computed value for FileUpload component\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <Stack className=\"mt-3\" gap={4}>\r\n        {/* Choose operation and download template */}\r\n        <Stack direction=\"horizontal\">\r\n          <CustomSelect\r\n            selectedValue={operationChoice}\r\n            onChange={handleOperationChange}\r\n            size=\"lg\"\r\n            className=\"w-50\"\r\n            options={{\r\n              defaultLabel: \"Choose Operations\",\r\n              list: [\r\n                { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                { value: \"2\", label: \"Physical Product Structure\" },\r\n                { value: \"3\", label: \"Document\" },\r\n                { value: \"4\", label: \"Physical Product-Document\" },\r\n              ],\r\n            }}\r\n          />\r\n          {/* Conditionally render multiple file input for Document type */}\r\n          <div className=\"p-2 ms-auto\">\r\n            {operationChoice === \"3\" && (\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control type=\"file\" multiple />\r\n              </Form.Group>\r\n            )}\r\n          </div>\r\n          <div className=\"p-2\">\r\n            <CustomButton\r\n              variant=\"link ms-auto\"\r\n              size=\"lg\"\r\n              onClick={handleDownloadTemplate}\r\n              text=\"Download Template\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n\r\n        {/* Drag and Drop File Upload */}\r\n        {/* Modified FileUpload with disabled state */}\r\n        <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n          <FileUpload\r\n            ref={fileUploaderRef}\r\n            fileTypes={[\"XLSX\"]}\r\n            multiple={false}\r\n            onUpload={handleFileUpload}\r\n            onReset={handleReset}\r\n            disabled={isFileUploadDisabled}\r\n            message={\r\n              isFileUploadDisabled\r\n                ? \"Please select an operation first\"\r\n                : \"Drag & Drop your files here or Click to browse\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/* Show loader while validating */}\r\n        {isValidating && <Loader />}\r\n\r\n        {/* Add validation progress bar */}\r\n        {isValidating && (\r\n          <div className=\"validation-progress\">\r\n            <div className=\"progress\">\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                style={{ width: `${validationProgress}%` }}\r\n              >\r\n                {validationProgress}% Validated\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Submit Button and Content Error Button */}\r\n        <Stack direction=\"horizontal\" gap={2}>\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          />\r\n          <div className=\"ms-auto d-flex gap-5\">\r\n            {errors.length > 0 && (\r\n              <CustomButton\r\n                variant=\"danger\"\r\n                onClick={() => setShowContentErrors(true)}\r\n                text={`Content Errors (${errors.length})`}\r\n              />\r\n            )}\r\n\r\n            <CustomButton\r\n              variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n              onClick={handleOpenSpreadsheetModal}\r\n              text=\"Manage Spreadsheet Columns\"\r\n              disabled={manageSpreadsheetDisabled}\r\n            />\r\n\r\n            <CustomButton\r\n              variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n              disabled={submitDisabled}\r\n              size=\"lg\"\r\n              onClick={() => setModalShow(true)}\r\n              text=\"Submit\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* Content Errors Modal */}\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      {/* Confirmation Modal */}\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      {/* Column Mapping */}\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","show","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","map","btn","index","label","useToast","showToast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","toast","showSuccessToast","options","arguments","length","undefined","showErrorToast","showInfoToast","showWarningToast","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","console","log","operationNames","errors","headers","Array","isArray","error","reader","FileReader","readAsBinaryString","onload","async","_config$MassUpload$op","workbook","XLSX","e","target","result","sheetName","SheetNames","worksheet","Sheets","sheet_to_json","header","sheetData","defval","fileHeaders","Object","keys","expectedHeadersForOperation","config","isTemplateMismatch","every","includes","matchedOperation","key","value","entries","expectedHeaders","mandatoryAttributes","validationConfig","invalidPrefixes","validationErrors","BATCH_SIZE","totalRows","processedRows","startIndex","endIndex","Math","min","currentBatch","slice","forEach","row","batchIndex","actualRowIndex","field","toString","trim","push","_row$CollaborativeSp","userCollabSpace","valueToValidate","_row$EINNumber","_row$DocumentName","some","prefix","startsWith","join","progress","round","setTimeout","validateDataInBatches","onerror","selectedValue","onChange","Form","Select","defaultLabel","list","option","attrIndex","Alert","groupedErrors","Map","rowMatch","match","columnMatch","rowNum","columnName","errorMsg","split","has","set","get","errorMessage","_Fragment","ReusableAlert","Table","responsive","bordered","from","_ref2","errorDetails","_ref3","rowSpan","colSpan","CustomModal","ErrorPopup","onConfirm","columnHeaders","handleCheckboxChange","checkedItems","handleSelectChange","selectedAttributes","mappedAttributes","allNLSValues","dropdownOptions","isMandatory","hasNLS","warn","hasMatchingNLS","CustomSelect","attr","backendName","uiLabel","useMassUpload","setMappedAttributes","ENOVIA_BASE_URL","process","useEffect","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","_attributeResponse$ou3","_attributeResponse$ou4","_attributeResponse$ou5","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","item","nls","mappedData","filter","deploymentExtension","fetchColumnMapping","setCheckedItems","setSelectedAttributes","filterMappedAttributes","setfilterMappedAttributes","StaticTable","MappedList","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","operationChoice","setOperationChoice","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","validationProgress","setValidationProgress","globalCollabSpaceTitles","handleReset","selectElement","document","querySelector","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","Stack","gap","direction","Group","controlId","Control","CustomButton","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","window","open","downloadTemplate","FileUpload","validationResult","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","role","Check","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","handleConfirmSubmit","alert","ColumnMappingModal","root","widget","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","body","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","securityContext1","getValue","WAFData","loadWAFData","csrfURL","response","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue"],"sourceRoot":""}