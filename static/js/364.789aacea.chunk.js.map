{"version":3,"file":"static/js/364.789aacea.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/Loader/Loader.js","components/Modal/customModal.jsx","hooks/useToast.js","components/FileUploader/FileUploader.jsx","pages/mass-upload/validateFile.js","components/Select/customSelect.jsx","components/Alert/ReusableAlert.jsx","components/ErrorPopup/ErrorPopup.jsx","components/Modals/ContentErrorsModal.jsx","components/Modals/ConfirmationModal.jsx","components/bootsrap-table/Table.jsx","hooks/Mass-Upload/useMassUpload.js","pages/mass-upload/mappedList.jsx","components/Modals/ColumnMappingModal.jsx","hooks/Mass-Upload/useMassUploadDocument.js","pages/mass-upload/massUpload.jsx","utils/downloadTemplate.js","massuUploadIndex.js","services/api/PlantAssignment/fetchCsrfService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\n\r\nconst CustomModal = ({ show, onHide, title, children, footerButtons }) => {\r\n  return (\r\n    <Modal show={show} onHide={onHide} size=\"lg\" centered>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{title || \"Modal Title\"}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>{children}</Modal.Body>\r\n      <Modal.Footer>\r\n        {footerButtons ? (\r\n          footerButtons.map((btn, index) => (\r\n            <Button\r\n              key={index}\r\n              variant={btn.variant || \"secondary\"}\r\n              onClick={btn.onClick}\r\n            >\r\n              {btn.label}\r\n            </Button>\r\n          ))\r\n        ) : (\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        )}\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\nexport default useToast;","import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport \"./FileUploader.css\";\r\nimport useToast from \"../../hooks/useToast\";\r\n\r\nconst FileUpload = forwardRef(\r\n  (\r\n    {\r\n      fileTypes = [\"JPEG\", \"PNG\", \"GIF\", \"XLSX\", \"CSV\"],\r\n      multiple = true,\r\n      onUpload,\r\n      onReset,\r\n      disabled = false,\r\n      message = \"Drag & Drop your files here or Click to browse\",\r\n    },\r\n    ref\r\n  ) => {\r\n    const [files, setFiles] = useState([]);\r\n    const { showErrorToast } = useToast();\r\n\r\n    // Expose handleClearFiles to parent through ref\r\n    useImperativeHandle(ref, () => ({\r\n      handleClearFiles: (skipSuccessToast = false) => {\r\n        setFiles([]);\r\n        if (onUpload) {\r\n          onUpload([]);\r\n        }\r\n        if (onReset) {\r\n          onReset(skipSuccessToast); // Pass skipSuccessToast parameter\r\n        }\r\n      },\r\n    }));\r\n\r\n    const handleChange = (selectedFiles) => {\r\n      const fileArray = multiple ? [...selectedFiles] : [selectedFiles];\r\n      setFiles(fileArray);\r\n\r\n      // Callback function to send files to parent component\r\n      if (onUpload) {\r\n        onUpload(fileArray);\r\n      }\r\n    };\r\n\r\n    const handleClearFile = () => {\r\n      ref.current.handleClearFiles(false); // Pass false to show success toast\r\n    };\r\n    // const handleDragOver = (event) => {\r\n    //   if (disabled) {\r\n    //     event.preventDefault();\r\n    //     event.stopPropagation();\r\n    //     showErrorToast(\"Please choose an operation from the drop-down first\");\r\n    //   } else {\r\n    //     // Allow drag-over behavior for valid file uploads\r\n    //     event.preventDefault();\r\n    //     event.dataTransfer.dropEffect = \"copy\";\r\n    //   }\r\n    // };\r\n\r\n    return (\r\n      <div\r\n        className={`file-upload-container ${disabled ? \"disabled\" : \"\"}`}\r\n        // onDragOver={handleDragOver}\r\n      >\r\n        <h2>\r\n          {disabled ? \"Please select an operation first\" : \"Drag & Drop Files\"}\r\n        </h2>\r\n        <div className=\"upload-area\">\r\n          <FileUploader\r\n            multiple={multiple}\r\n            handleChange={handleChange}\r\n            name=\"file\"\r\n            types={fileTypes}\r\n            disabled={disabled}\r\n            hoverTitle={disabled ? \"\" : \"Drop here\"}\r\n          />\r\n          <div className=\"file-list\">\r\n            {files.length > 0 ? (\r\n              files.map((file, index) => (\r\n                <div\r\n                  className=\"mb-4\"\r\n                  key={index}\r\n                  style={{ display: \"flex\", alignItems: \"center\" }}\r\n                >\r\n                  <p className=\"me-2 mb-0\">📁 {file.name}</p>\r\n                  <button\r\n                    onClick={handleClearFile}\r\n                    style={{\r\n                      background: \"none\",\r\n                      border: \"none\",\r\n                      cursor: disabled ? \"not-allowed\" : \"pointer\",\r\n                      color: \"red\",\r\n                      opacity: disabled ? 0.5 : 1,\r\n                    }}\r\n                    disabled={disabled}\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <p>{message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FileUpload;\r\n","import * as XLSX from \"xlsx\";\r\nimport config from \"./config.json\";\r\n\r\nconst processDataInChunks = (data, chunkSize = 1000) => {\r\n  const chunks = [];\r\n  for (let i = 0; i < data.length; i += chunkSize) {\r\n    chunks.push(data.slice(i, i + chunkSize));\r\n  }\r\n  return chunks;\r\n};\r\n\r\nconst validateFile = (file, collabSpaceTitles, selectedOperation) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"🔍 Starting template validation...\");\r\n    console.log({\r\n      operation: selectedOperation,\r\n      fileName: file.name,\r\n    });\r\n\r\n    const operationNames = {\r\n      1: \"Physical Product\",\r\n      2: \"Physical Product Structure\",\r\n      3: \"Document\",\r\n      4: \"Physical Product-Document\",\r\n    };\r\n\r\n    const matchedOperation = operationNames[selectedOperation];\r\n    const expectedHeaders =\r\n      config.MassUpload[matchedOperation]?.fileHeaders || [];\r\n    const mandatoryAttributes =\r\n      config.MassUpload[matchedOperation]?.mandatoryAttributes || [];\r\n\r\n    if (!selectedOperation) {\r\n      reject({\r\n        errors: [\"Please select an operation first.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(collabSpaceTitles)) {\r\n      console.error(\"❌ Invalid Collaborative Space list\");\r\n      reject({\r\n        errors: [\"Internal error: Invalid Collaborative Space list.\"],\r\n        headers: [],\r\n      });\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsBinaryString(file);\r\n\r\n    reader.onload = async (e) => {\r\n      const workbook = XLSX.read(e.target.result, {\r\n        type: \"binary\",\r\n        dense: true,\r\n        cellDates: true,\r\n        cellNF: false,\r\n        cellText: false,\r\n      });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const uploadedHeaders =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      // Template header validation\r\n      const headerMismatch = !expectedHeaders.every((header) =>\r\n        uploadedHeaders.includes(header)\r\n      );\r\n\r\n      if (headerMismatch) {\r\n        console.error(\"❌ Template mismatch detected!\");\r\n        reject({\r\n          isTemplateMismatch: true,\r\n          errors: [\r\n            \"The template uploaded does not match the selected operation.\",\r\n          ],\r\n          headers: uploadedHeaders,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const headers =\r\n        XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0] || [];\r\n\r\n      if (!headers || headers.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file has no content or is empty.\"],\r\n          headers: [],\r\n        });\r\n        return;\r\n      }\r\n\r\n      const allSheetData = XLSX.utils.sheet_to_json(worksheet, { defval: \"\" });\r\n\r\n      if (allSheetData.length === 0) {\r\n        reject({\r\n          errors: [\"The uploaded file contains headers but no data rows.\"],\r\n          headers,\r\n        });\r\n        return;\r\n      }\r\n\r\n      const chunks = processDataInChunks(allSheetData, 1000);\r\n      const validationErrors = [];\r\n      const invalidPrefixes = [\"MMI-\", \"RS-\", \"DAN-\", \"RSC-\", \"TF-\", \"ROXA-\"];\r\n\r\n      // Error counters\r\n      let errorStats = {\r\n        mandatory: 0,\r\n        collabSpace: 0,\r\n        einPrefix: 0,\r\n        docPrefix: 0,\r\n      };\r\n\r\n      // Convert collabSpaceTitles to lowercase for case-insensitive comparison\r\n      const lowerCaseCollabSpaceTitles = collabSpaceTitles.map(title => title.toLowerCase());\r\n\r\n      for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\r\n        const chunk = chunks[chunkIndex];\r\n        const progress = Math.round(((chunkIndex + 1) / chunks.length) * 100);\r\n\r\n        chunk.forEach((row, indexInChunk) => {\r\n          const globalRowIndex = chunkIndex * 1000 + indexInChunk;\r\n\r\n          // Mandatory fields validation\r\n          mandatoryAttributes.forEach((field) => {\r\n            if (!row[field] || row[field].toString().trim() === \"\") {\r\n              errorStats.mandatory++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${field}\" is required but is empty`\r\n              );\r\n            }\r\n          });\r\n\r\n          // Collaborative Space validation\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            const userCollabSpace = row[\"Collaborative Space\"]?.trim().toLowerCase() || \"\";\r\n            if (!userCollabSpace || !lowerCaseCollabSpaceTitles.includes(userCollabSpace)) {\r\n              errorStats.collabSpace++;\r\n              validationErrors.push(\r\n                `Row ${globalRowIndex + 2}: \"${\r\n                  userCollabSpace\r\n                    ? `You are not allowed to create in \"Collaborative Space -\" (${userCollabSpace})`\r\n                    : 'Collaborative Space\" is Missing or Empty'\r\n                }`\r\n              );\r\n            }\r\n          }\r\n          // NEW: Validate that the first data row for Physical Product Structure has Level = 0\r\n          if (\r\n            matchedOperation === \"Physical Product Structure\" &&\r\n            globalRowIndex === 0\r\n          ) {\r\n            const firstRow = allSheetData[0];\r\n            const levelValue = firstRow[\"Level\"];\r\n            const levelStr = String(levelValue).trim();\r\n            console.log(\r\n              \"Validating Level for Physical Product Structure, first row:\",\r\n              firstRow,\r\n              \"Parsed Level:\",\r\n              levelStr\r\n            );\r\n\r\n            if (\r\n              levelStr === \"\" ||\r\n              (levelStr !== \"0\" && Number(levelStr) !== 0)\r\n            ) {\r\n              // Add validation error for Level with row number and column name\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Level\" value \"${levelValue}\"  The first entry in the file should be a level 0 object.`\r\n              );\r\n              console.log(\r\n                \"Level validation failed - first row Level is not 0:\",\r\n                levelValue\r\n              );\r\n            }\r\n\r\n            \r\n          }\r\n\r\n          // EIN Number / Document Name validation\r\n          let valueToValidate = null;\r\n          let columnName = \"\";\r\n\r\n          if (\r\n            matchedOperation === \"Physical Product\" ||\r\n            matchedOperation === \"Physical Product Structure\"\r\n          ) {\r\n            columnName = \"EIN Number\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.einPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"EIN Number\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          } else if (\r\n            matchedOperation === \"Physical Product-Document\" ||\r\n            matchedOperation === \"Document\"\r\n          ) {\r\n            columnName = \"Document Name\";\r\n            valueToValidate = row[columnName]?.toString().trim() || null;\r\n            if (\r\n              valueToValidate &&\r\n              invalidPrefixes.some((prefix) =>\r\n                valueToValidate.startsWith(prefix)\r\n              )\r\n            ) {\r\n              errorStats.docPrefix++;\r\n              validationErrors.push(\r\n                `Row ${\r\n                  globalRowIndex + 2\r\n                }: \"Document Name\" value \"${valueToValidate}\" has an invalid prefix.`\r\n              );\r\n            }\r\n          }\r\n\r\n             // NEW: Validate that for Physical Product Structure, the \"Quantity\" value is positive (cannot be zero or negative)\r\n             if (matchedOperation === \"Physical Product Structure\") {\r\n              columnName = \"Quantity\";\r\n              const quantityValue = row[columnName]?.toString().trim();\r\n              if (quantityValue) {\r\n                const numQuantity = Number(quantityValue);\r\n                if (isNaN(numQuantity) || numQuantity <= 0) {\r\n                  validationErrors.push(\r\n                    `Row ${globalRowIndex + 2}: \"Quantity\" value \"${quantityValue}\" Quantity should not be 0 or -ve.`\r\n                  );\r\n                  console.log(\r\n                    \"Quantity validation failed - Quantity is 0 or -ve:\",\r\n                    quantityValue\r\n                  );\r\n                }\r\n              }\r\n            }\r\n        });\r\n\r\n        // Log only at 25% intervals\r\n        if (progress % 25 === 0) {\r\n          console.log(`Processing: ${progress}% complete`, {\r\n            processedRows: (chunkIndex + 1) * 1000,\r\n            totalRows: allSheetData.length,\r\n            currentErrors: {\r\n              mandatory: errorStats.mandatory,\r\n              collaborativeSpace: errorStats.collabSpace,\r\n              einPrefix: errorStats.einPrefix,\r\n              documentPrefix: errorStats.docPrefix,\r\n              total: validationErrors.length,\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      if (validationErrors.length > 0) {\r\n        console.log(\"❌ Validation completed with errors:\", {\r\n          total: validationErrors.length,\r\n          byType: errorStats,\r\n        });\r\n        reject({\r\n          errors: validationErrors,\r\n          headers,\r\n          mandatoryAttributes,\r\n        });\r\n        return;\r\n      }\r\n\r\n      console.log(\"✅ Validation completed successfully\");\r\n      resolve({\r\n        headers,\r\n        sheetData: allSheetData,\r\n        validationErrors: [],\r\n        mandatoryAttributes,\r\n      });\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      console.error(\" Error reading file\");\r\n      reject({\r\n        errors: [\"File reading failed.\"],\r\n        headers: [],\r\n        isTemplateMismatch: false,\r\n      });\r\n    };\r\n  });\r\n};\r\n\r\nexport default validateFile;\r\n","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./customSelect.css\";\r\n\r\nconst CustomSelect = ({\r\n  index,\r\n  selectedValue,\r\n  options,\r\n  onChange,\r\n  size,\r\n  className,\r\n}) => {\r\n  const handleChange = (e) => {\r\n    // If index is provided use it, otherwise just pass the value\r\n    if (index !== undefined) {\r\n      onChange(index, e.target.value);\r\n    } else {\r\n      onChange(e.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form.Select\r\n      aria-label=\"Attribute selection\"\r\n      value={selectedValue || \"\"}\r\n      onChange={handleChange}\r\n      size={size}\r\n      className={className}\r\n    >\r\n      <option value=\"\">{options.defaultLabel}</option> {/* Default option */}\r\n      {options.list.map((option, attrIndex) => (\r\n        <option key={attrIndex} value={option.value}>\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </Form.Select>\r\n  );\r\n};\r\n\r\nexport default CustomSelect;\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nconst ReusableAlert = ({\r\n  variant = \"info\",\r\n  message,\r\n  show = true,\r\n  className = \"\",\r\n}) => {\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <Alert variant={variant} className={className}>\r\n      {typeof message === \"string\" ? message : message}\r\n    </Alert>\r\n  );\r\n};\r\n\r\nexport default ReusableAlert;\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  AutoSizer,\r\n  List,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport \"./ErrorPopup.css\";\r\nimport ReusableAlert from \"../Alert/ReusableAlert\";\r\n\r\nconst ErrorPopup = ({ errors }) => {\r\n  const processedErrors = useMemo(() => {\r\n    // Group errors by row number\r\n    const errorGroups = errors.reduce((groups, error) => {\r\n      const rowMatch = error.match(/Row (\\d+):/);\r\n      const columnMatch = error.match(/\"([^\"]*)\" (?:is required|value)/);\r\n      const errorMsg = error.split(\": \").slice(1).join(\": \");\r\n\r\n      const rowNumber = rowMatch ? rowMatch[1] : \"N/A\";\r\n      const columnName = columnMatch\r\n        ? columnMatch[1]\r\n        : error.includes(\"Collaborative Space\", \"Quantity\")\r\n        ? \"Collaborative Space\"\r\n        : \"N/A\";\r\n\r\n      if (!groups[rowNumber]) {\r\n        groups[rowNumber] = {\r\n          rowNumber,\r\n          columns: [],\r\n          errors: [],\r\n        };\r\n      }\r\n\r\n      groups[rowNumber].columns.push(columnName);\r\n      groups[rowNumber].errors.push(errorMsg || error);\r\n\r\n      return groups;\r\n    }, {});\r\n\r\n    // Convert groups to array and sort by row number\r\n    return Object.values(errorGroups).sort(\r\n      (a, b) => Number(a.rowNumber) - Number(b.rowNumber)\r\n    );\r\n  }, [errors]);\r\n\r\n  const cache = new CellMeasurerCache({\r\n    fixedWidth: true,\r\n    defaultHeight: 50,\r\n  });\r\n\r\n  const rowRenderer = ({ key, index, style, parent }) => {\r\n    const error = processedErrors[index];\r\n    return (\r\n      <CellMeasurer\r\n        key={key}\r\n        cache={cache}\r\n        columnIndex={0}\r\n        rowIndex={index}\r\n        parent={parent}\r\n      >\r\n        <div style={style} className=\"table-row\">\r\n          <div className=\"table-cell\" style={{ width: \"15%\" }}>\r\n            {error.rowNumber}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"25%\" }}>\r\n            {error.columns.map((column, i) => (\r\n              <div key={i}>{column}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"table-cell\" style={{ width: \"60%\" }}>\r\n            <ul className=\"error-list\">\r\n              {error.errors.map((err, i) => (\r\n                <li key={i}>{err}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </CellMeasurer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"error-popup-container\">\r\n      <ReusableAlert\r\n        variant=\"danger\"\r\n        message={\r\n          <>\r\n            <strong>⚠️ Note:</strong> Below reports show only uploaded\r\n            spreadsheet error rows. To resolve these issues, update the\r\n            spreadsheet and re-import. ({processedErrors.length} errors found)\r\n          </>\r\n        }\r\n        className=\"custom-alert\"\r\n      />\r\n\r\n      <div className=\"table-wrapper\">\r\n        {/* Static Header */}\r\n        <div className=\"static-header\">\r\n          <div className=\"header-cell\" style={{ width: \"15%\" }}>\r\n            Row Number\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"25%\" }}>\r\n            Column Name\r\n          </div>\r\n          <div className=\"header-cell\" style={{ width: \"60%\" }}>\r\n            Error Description\r\n          </div>\r\n        </div>\r\n\r\n        {/* Virtualized Error List */}\r\n        <div className=\"table-container\">\r\n          <AutoSizer>\r\n            {({ height, width }) => (\r\n              <List\r\n                width={width}\r\n                height={height}\r\n                rowCount={processedErrors.length}\r\n                rowHeight={cache.rowHeight}\r\n                deferredMeasurementCache={cache}\r\n                rowRenderer={rowRenderer}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorPopup;\r\n","// ContentErrorsModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ErrorPopup from \"../../components/ErrorPopup/ErrorPopup\";\r\n\r\nconst ContentErrorsModal = ({ show, onHide, errors }) => {\r\n  console.log(`[ContentErrorsModal.jsx] errors:`, errors);\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Content Errors\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Close\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n      ]}\r\n    >\r\n      <ErrorPopup errors={errors} />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ContentErrorsModal;\r\n","// ConfirmationModal.jsx\r\nimport React from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\n\r\nconst ConfirmationModal = ({ show, onHide, onConfirm }) => {\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Confirmation\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Confirm\",\r\n          variant: \"success\",\r\n          onClick: onConfirm,\r\n        },\r\n      ]}\r\n    >\r\n      <p>Are you sure you want to submit?</p>\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport CustomSelect from \"../Select/customSelect\";\r\nimport \"./staticTable.css\"; // Ensure updated styles are applied\r\n\r\nconst StaticTable = ({\r\n  columnHeaders,\r\n  handleSelectChange,\r\n  dropdownOptions = [],\r\n}) => {\r\n  return (\r\n    <Table bordered className=\"table-light\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"header-styling\">Column Name</th>\r\n          <th className=\"header-styling\">Attribute Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {columnHeaders.map((column, index) => {\r\n          const { header, currentMapping, defaultLabel, disabled } = column;\r\n          // Get filtered dropdown options for this specific column\r\n          const filteredOptions = dropdownOptions(header);\r\n\r\n          return (\r\n            <tr key={index} className={disabled ? \"disabled-row\" : \"\"}>\r\n              <td className={disabled ? \"disabled-cell\" : \"\"}>{header}</td>\r\n              <td\r\n                className={`dropdown-cell ${\r\n                  disabled ? \"disabled-dropdown\" : \"\"\r\n                }`}\r\n              >\r\n                <div className=\"dropdown-wrapper\">\r\n                  <CustomSelect\r\n                    index={index}\r\n                    selectedValue={currentMapping?.uiLabel || header}\r\n                    onChange={(index, value) =>\r\n                      handleSelectChange(header, value)\r\n                    }\r\n                    size=\"lg\"\r\n                    className={`w-100 ${\r\n                      disabled ? \"custom-select-disabled\" : \"\"\r\n                    }`}\r\n                    disabled={disabled} // Fully disables interaction\r\n                    options={{\r\n                      defaultLabel: defaultLabel,\r\n                      list: filteredOptions,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default StaticTable;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService, fetchData } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useMassUpload = (initialOperationChoice) => {\r\n  const { showErrorToast } = useToast();\r\n  const [mappedAttributes, setMappedAttributes] = useState([]);\r\n  const [operationChoice, setOperationChoice] = useState(initialOperationChoice);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  // Function to Fetch Spreadsheet Column Mapping\r\n  const fetchColumnMapping = async (operation = null) => {\r\n    try {\r\n      // Use the passed operation or fall back to state\r\n      const effectiveOperation = operation || operationChoice;\r\n      console.log(\"Fetching column mapping for operation:\", effectiveOperation);\r\n\r\n      if (!effectiveOperation) {\r\n        console.log(\"No operation specified, skipping fetch\");\r\n        return;\r\n      }\r\n\r\n      // Update state if a new operation is passed\r\n      if (operation && operation !== operationChoice) {\r\n        setOperationChoice(operation);\r\n      }\r\n\r\n      console.log(\"Fetching column mapping...\");\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      // 🔹 Step 1: Call API 1 (GET) to Fetch Metadata\r\n      const metadataResponse = await callEnoviaWebService(\r\n        \"GET\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/search?%24top=1`,\r\n        \"\",\r\n        headers\r\n      );\r\n\r\n      if (!metadataResponse || !metadataResponse.output) {\r\n        throw new Error(\"Failed to fetch metadata.\");\r\n      }\r\n      console.log(\"Metadata Member:\", metadataResponse.output.member);\r\n\r\n      const objectId = metadataResponse.output?.member?.[0]?.id;\r\n      if (!objectId) {\r\n        throw new Error(\"No object ID found in metadata.\");\r\n      }\r\n\r\n      console.log(\"Extracted Object ID:\", objectId);\r\n\r\n      // 🔹 Step 2: Call API 2 (POST) to Fetch Attributes\r\n      const attributeResponse = await callEnoviaWebService(\r\n        \"POST\",\r\n        `${ENOVIA_BASE_URL}/resources/v1/collabServices/attributes/op/read?tenant=OI000186152&xrequestedwith=xmlhttprequest`,\r\n        {\r\n          busIDs: [objectId],\r\n        },\r\n        headers\r\n      );\r\n\r\n      if (!attributeResponse || !attributeResponse.output) {\r\n        throw new Error(\"Failed to fetch attribute data.\");\r\n      }\r\n      console.log(\"Attribute Response:\", attributeResponse.output);\r\n\r\n      // 🔹 Step 3: Extract & Map Relevant Attributes\r\n\r\n      const groupData = attributeResponse.output.results?.[0]?.groupData || [];\r\n\r\n      console.log(\r\n        \"Full Group Data (with all NLS values):\",\r\n        groupData.map((item) => item.nls)\r\n      );\r\n\r\n      const systemAttributes = [\r\n        {\r\n          name: \"description\", // Change from backendName to name\r\n          nls: \"Description\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"Part Number\", // Change from backendName to name\r\n          nls: \"EIN Number\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"type\", // Change from backendName to name\r\n          nls: \"Type\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"title\", // Change from backendName to name\r\n          nls: \"Title\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n        {\r\n          name: \"collabspaceTitle\", // Change from backendName to name\r\n          nls: \"Collaborative Space\",\r\n          groupNLS: \"System Attributes\",\r\n        },\r\n      ];\r\n\r\n      const attributeGroups = groupData.map((item) => item.groupNLS);\r\n      console.log(\"Attribute Groups:\", attributeGroups);\r\n\r\n      // Get NLS values from API response\r\n      const apiNlsValues = groupData.map((item) => item.nls);\r\n      console.log(\"API NLS Values:\", apiNlsValues);\r\n\r\n      // Get NLS values from hardcoded system attributes\r\n      const systemNlsValues = systemAttributes.map((item) => item.nls);\r\n      console.log(\"System NLS Values:\", systemNlsValues);\r\n\r\n      const allNLSValues = [...new Set([...apiNlsValues, ...systemNlsValues])];\r\n      console.log(\"all nls value with Hardcode :\", allNLSValues);\r\n\r\n      // First filter out System Attributes from API response\r\n      const filteredGroupData = groupData.filter(\r\n        (attr) => attr.groupNLS !== \"System Attributes\"\r\n      );\r\n\r\n      console.log(\r\n        \"Filtered out API system attributes:\",\r\n        groupData.length - filteredGroupData.length,\r\n        \"items removed\"\r\n      );\r\n\r\n      // Then merge only non-system API attributes with your hardcoded ones\r\n      const mergeAttributes = [...filteredGroupData, ...systemAttributes];\r\n\r\n      // Then continue with your other filtering if needed\r\n      const relevantAttributes =\r\n        mergeAttributes.filter(\r\n          (attr) =>\r\n            attr.deploymentExtension === true ||\r\n            (attr.groupNLS && attr.groupNLS.trim() !== \"\")\r\n        ) || [];\r\n\r\n      console.log(\"Non-system attributes from API:\", relevantAttributes.length);\r\n\r\n      const mappedData = relevantAttributes.map((attr) => ({\r\n        uiLabel: attr.nls, // UI Display Name\r\n        backendName: attr.name || attr.backendName, // Backend Name (or name)\r\n        group: attr.groupNLS || \"General\", // Default group if not specified\r\n      }));\r\n\r\n      // Create a filtered version for dropdown that excludes System Attributes\r\n      const dropdownOptions = mappedData.filter(\r\n        (attr) => attr.group !== \"System Attributes\"\r\n      );\r\n      console.log(\"Mapped Attributes (total):\", mappedData);\r\n      console.log(\r\n        \"Dropdown Options (excluding System Attributes):\",\r\n        dropdownOptions\r\n      );\r\n      // Organize attributes by their groups\r\n      const attributesByGroup = {};\r\n\r\n      attributeGroups.forEach((group) => {\r\n        attributesByGroup[group] = mappedData.filter(\r\n          (attr) => attr.group === group\r\n        );\r\n      });\r\n\r\n      console.log(\"Mapped Attributes:\", mappedData);\r\n      console.log(\"All available NLS values:\", allNLSValues);\r\n      console.log(\r\n        \"Mapped Attributes (for dropdown) excluding System Attributes:\",\r\n        dropdownOptions\r\n      );\r\n      console.log(\"Attributes By Group:\", attributesByGroup);\r\n      console.log(\r\n        \"System Attributes found:\",\r\n        relevantAttributes.filter(\r\n          (attr) => attr.groupNLS === \"System Attributes\"\r\n        ).length\r\n      );\r\n      console.log(\r\n        \"Sample System Attribute:\",\r\n        relevantAttributes.find((attr) => attr.groupNLS === \"System Attributes\")\r\n      );\r\n\r\n      setMappedAttributes({\r\n        allNLSValues: allNLSValues,\r\n        dropdownOptions: dropdownOptions, // Use filtered list without System Attributes\r\n        mappedData: mappedData, // Keep full list for other purposes\r\n        attributesByGroup: attributesByGroup,\r\n        groups: attributeGroups,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching column mapping:\", error);\r\n      showErrorToast(error.message || \"Error fetching column mapping.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationChoice) {\r\n      fetchColumnMapping();\r\n    }\r\n  }, [operationChoice]);\r\n\r\n  return { mappedAttributes, refreshMapping: fetchColumnMapping };\r\n};\r\n\r\nexport default useMassUpload;\r\n","import React, { useEffect } from \"react\";\r\nimport StaticTable from \"../../components/bootsrap-table/Table\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n\r\nconst MappedList = ({\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  selectedMappings,\r\n  setSelectedMappings,\r\n  dropdownOptions,\r\n  operationChoice, // Receive operation choice\r\n}) => {\r\n  console.log(\"MappedList - Received columnHeaders:\", columnHeaders);\r\n  console.log(\r\n    \"MappedList - Received mandatoryAttributes:\",\r\n    mandatoryAttributes\r\n  );\r\n  console.log(\"MappedList - Received dropdownOptions:\", dropdownOptions);\r\n  console.log(\"MappedList - Received operationChoice:\", operationChoice);\r\n\r\n  const { mappedAttributes } = useMassUpload();\r\n  const { allNLSValues = [], dropdownOptions: massUploadDropdownOptions = [] } =\r\n    mappedAttributes || {};\r\n\r\n  useEffect(() => {\r\n    if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n      console.log(\"Mapped Attributes updated:\", mappedAttributes);\r\n    }\r\n  }, [mappedAttributes]);\r\n\r\n  // Checks if column header matches any NLS value\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) {\r\n      console.warn(\"allNLSValues is not an array:\", allNLSValues);\r\n      return false;\r\n    }\r\n\r\n    // Simple case-insensitive exact matching\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    const hasMatch = allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    console.log(\r\n      `Checking if header '${header}' matches any NLS value:`,\r\n      hasMatch\r\n    );\r\n    return hasMatch;\r\n  };\r\n\r\n  // Gets backend name for selected UI label\r\n  const getBackendNameForUILabel = (uiLabel) => {\r\n    console.log(\"Finding backend name for UI label:\", uiLabel);\r\n    console.log(\"Current dropdown options:\", dropdownOptions);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available\");\r\n      return uiLabel;\r\n    }\r\n\r\n    // Check if we're using the format from useMassUploadDocument.js or useMassUpload.js\r\n    const option = dropdownOptions.find((opt) => opt.uiLabel === uiLabel);\r\n    console.log(\"Found option:\", option);\r\n    return option ? option.backendName : uiLabel;\r\n  };\r\n\r\n  // Prepare dropdown options for the table - filter out already selected values\r\n  const prepareDropdownOptions = (currentColumnHeader) => {\r\n    console.log(\"Preparing dropdown options for column:\", currentColumnHeader);\r\n\r\n    if (\r\n      !dropdownOptions ||\r\n      !Array.isArray(dropdownOptions) ||\r\n      dropdownOptions.length === 0\r\n    ) {\r\n      console.warn(\"No dropdown options available for filtering\");\r\n      return [];\r\n    }\r\n\r\n    // Get all currently selected values except for the current column\r\n    const selectedValues = Object.entries(selectedMappings)\r\n      .filter(([header]) => header !== currentColumnHeader) // Exclude current column\r\n      .map(([_, mapping]) => mapping.uiLabel || mapping.mappedAttribute);\r\n\r\n    // Filter out options that are already selected in other columns\r\n    const filteredOptions = dropdownOptions\r\n      .filter((attr) => !selectedValues.includes(attr.uiLabel))\r\n      .map((attr) => ({\r\n        value: attr.uiLabel,\r\n        label: attr.uiLabel,\r\n      }));\r\n\r\n    return filteredOptions;\r\n  };\r\n\r\n  // Handles selection changes from Table\r\n  const handleSelectChange = (columnHeader, value) => {\r\n    console.log(\r\n      \"Selection changed for column:\",\r\n      columnHeader,\r\n      \"to value:\",\r\n      value\r\n    );\r\n\r\n    // Get backend name for the selected UI label\r\n    const backendName = getBackendNameForUILabel(value);\r\n    console.log(\"Mapped backend name:\", backendName);\r\n\r\n    setSelectedMappings((prev) => ({\r\n      ...prev,\r\n      [columnHeader]: {\r\n        columnName: columnHeader,\r\n        uiLabel: value,\r\n        mappedAttribute: backendName,\r\n        isMandatory: mandatoryAttributes.includes(columnHeader),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // Prepare column data with all needed information\r\n  const prepareColumnsData = () => {\r\n    return columnHeaders.map((header) => {\r\n      const hasNLS = hasMatchingNLS(header);\r\n      const isMandatory = mandatoryAttributes.includes(header);\r\n\r\n      return {\r\n        header,\r\n        isMandatory,\r\n        hasNLS,\r\n        currentMapping: selectedMappings[header],\r\n        defaultLabel: hasNLS ? header : \"Please select from Drop Down\",\r\n        // Only disable if BOTH conditions are true: has NLS match AND is mandatory\r\n        disabled: hasNLS && isMandatory,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <StaticTable\r\n      columnHeaders={prepareColumnsData()}\r\n      handleSelectChange={handleSelectChange}\r\n      selectedMappings={selectedMappings}\r\n      dropdownOptions={(header) => prepareDropdownOptions(header)} // Pass as a function\r\n    />\r\n  );\r\n};\r\n\r\nexport default MappedList;\r\n","// ColumnMappingModal.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport CustomModal from \"../../components/Modal/customModal\";\r\nimport ReusableAlert from \"../../components/Alert/ReusableAlert\";\r\nimport MappedList from \"../../pages/mass-upload/mappedList\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\n//import useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\n\r\nconst ColumnMappingModal = ({\r\n  show, //controls modal visibility//\r\n  onHide, //function to hide modal//\r\n  columnHeaders, //array of column names from Excel//\r\n  mandatoryAttributes, //required fields from excel//\r\n  onColumnsMapped, //callback to receive the final mapping\r\n  existingMappings = {}, // Add this prop for existing mappings\r\n  dropdownOptions, // Receive dropdownOptions\r\n  operationChoice, // Add operation choice\r\n}) => {\r\n  // Initialize with existing mappings if available\r\n  const [selectedMappings, setSelectedMappings] = useState(existingMappings);\r\n  const { mappedAttributes } = useMassUpload();\r\n\r\n  // Reset mappings when modal is opened with new existingMappings\r\n  useEffect(() => {\r\n    if (show && Object.keys(existingMappings).length > 0) {\r\n      setSelectedMappings(existingMappings);\r\n    }\r\n  }, [show, existingMappings]);\r\n\r\n  const handleOkClick = () => {\r\n    console.group(\"Column Mapping Results\");\r\n    console.log(\"Raw Mappings:\", selectedMappings);\r\n\r\n    // Create complete mappings including unmapped columns\r\n    const completeMappings = {};\r\n\r\n    // Start with existing mappings to ensure we don't lose any\r\n    const simplifiedMappings = { ...existingMappings };\r\n\r\n    const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n\r\n    // Helper function to check if column has matching NLS\r\n    const hasMatchingNLS = (header) => {\r\n      if (!Array.isArray(allNLSValues)) return false;\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      return allNLSValues.some(\r\n        (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n      );\r\n    };\r\n\r\n    // Helper function to get backend name for a column with NLS match\r\n    const getBackendNameForHeader = (header) => {\r\n      const normalizedHeader = header.toLowerCase().trim();\r\n      const matchingOption = dropdownOptions.find(\r\n        (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n      );\r\n      return matchingOption ? matchingOption.backendName : header;\r\n    };\r\n\r\n    // Special mapping for known attributes that might not have NLS matches\r\n    const specialMappings = {\r\n      \"EIN Number\": \"PartNumber\",\r\n    };\r\n\r\n    // Process all column headers\r\n    columnHeaders.forEach((columnName) => {\r\n      if (selectedMappings[columnName]) {\r\n        // Column was mapped by user - extract the proper backend name\r\n        const userMapping = selectedMappings[columnName];\r\n\r\n        // Handle both object and string mappings\r\n        if (typeof userMapping === \"object\" && userMapping !== null) {\r\n          // It's an object with mappedAttribute property\r\n          completeMappings[columnName] = userMapping;\r\n          simplifiedMappings[columnName] = userMapping.mappedAttribute;\r\n        } else {\r\n          // It's already a string\r\n          completeMappings[columnName] = {\r\n            columnName: columnName,\r\n            uiLabel: columnName,\r\n            mappedAttribute: userMapping,\r\n            isMandatory: mandatoryAttributes.includes(columnName),\r\n            autoMapped: false,\r\n          };\r\n          simplifiedMappings[columnName] = userMapping;\r\n        }\r\n      } else {\r\n        // Column was not manually mapped - check if it already has a mapping\r\n        if (existingMappings[columnName]) {\r\n          // Use existing mapping\r\n          const existingMapping = existingMappings[columnName];\r\n\r\n          if (typeof existingMapping === \"object\" && existingMapping !== null) {\r\n            // It's an object with mappedAttribute\r\n            completeMappings[columnName] = existingMapping;\r\n            simplifiedMappings[columnName] = existingMapping.mappedAttribute;\r\n          } else {\r\n            // It's a string backend name\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: existingMapping,\r\n              isMandatory: mandatoryAttributes.includes(columnName),\r\n              autoMapped: true,\r\n            };\r\n            // simplifiedMappings already has this from the spread above\r\n          }\r\n        } else {\r\n          // No existing mapping - try to create one\r\n          const hasNLS = hasMatchingNLS(columnName);\r\n          const isSpecialColumn = specialMappings[columnName];\r\n          const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n          if (hasNLS || isSpecialColumn || isMandatory) {\r\n            const mappedAttribute = isSpecialColumn\r\n              ? specialMappings[columnName]\r\n              : getBackendNameForHeader(columnName);\r\n\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: mappedAttribute,\r\n              isMandatory: isMandatory,\r\n              autoMapped: true,\r\n            };\r\n\r\n            simplifiedMappings[columnName] = mappedAttribute;\r\n          } else {\r\n            // For unmapped columns without NLS match, use column name as attribute\r\n            simplifiedMappings[columnName] = columnName;\r\n            completeMappings[columnName] = {\r\n              columnName: columnName,\r\n              uiLabel: columnName,\r\n              mappedAttribute: columnName,\r\n              isMandatory: false,\r\n              autoMapped: false,\r\n            };\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create final mapping object with complete mappings\r\n    const finalMapping = {\r\n      columnMappings: completeMappings,\r\n      totalColumns: Object.keys(completeMappings).length,\r\n    };\r\n\r\n    console.log(\"Final Mapping Object:\", finalMapping);\r\n    console.log(\"Simplified Mappings for Backend:\", simplifiedMappings);\r\n    console.groupEnd();\r\n\r\n    // Call the callback with the mappings if provided\r\n    if (onColumnsMapped) {\r\n      onColumnsMapped(simplifiedMappings, finalMapping);\r\n    }\r\n\r\n    onHide();\r\n  };\r\n\r\n  console.log(\r\n    \"ColumnMappingModal - received dropdownOptions:\",\r\n    dropdownOptions\r\n  );\r\n  console.log(\"ColumnMappingModal - operation choice:\", operationChoice);\r\n\r\n  const errorMessage = (\r\n    <>\r\n      <strong>⚠️Note:</strong> All column(s) of uploaded Spreadsheet are mapped\r\n      to valid Attribute Name. All mandatory Attribute Name is mapped to\r\n      uploaded Spreadsheet Column Name.\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <CustomModal\r\n      show={show}\r\n      onHide={onHide}\r\n      title=\"Manage Spreadsheet Columns\"\r\n      footerButtons={[\r\n        {\r\n          label: \"Ok\",\r\n          variant: \"primary\",\r\n          onClick: handleOkClick,\r\n        },\r\n        {\r\n          label: \"Cancel\",\r\n          variant: \"danger\",\r\n          onClick: onHide,\r\n        },\r\n        {\r\n          label: \"Reset\",\r\n          variant: \"secondary\",\r\n          onClick: () => setSelectedMappings({}),\r\n        },\r\n      ]}\r\n    >\r\n      <ReusableAlert\r\n        variant=\"info\"\r\n        message={errorMessage}\r\n        className=\"mapped-popup-alert\"\r\n      />\r\n      <MappedList\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        selectedMappings={selectedMappings}\r\n        setSelectedMappings={setSelectedMappings}\r\n        dropdownOptions={dropdownOptions}\r\n        operationChoice={operationChoice} // Pass operation choice\r\n      />\r\n    </CustomModal>\r\n  );\r\n};\r\n\r\nexport default ColumnMappingModal;\r\n","import { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../../utils/toastMessages\";\r\nimport useToast from \"../useToast\";\r\nimport { fetchCsrfToken } from \"../../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { callEnoviaWebService } from \"../../utils/helpers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst useFetchDocumentData = (initialOperationType) => {\r\n  const { showErrorToast } = useToast();\r\n  const [documentData, setDocumentData] = useState(null);\r\n  const [dropdownOptions, setDropdownOptions] = useState([]); // Options for dropdown\r\n  const [allNLSValues, setAllNLSValues] = useState([]); // All NLS values\r\n  const [operationType, setOperationType] = useState(initialOperationType);\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  const API_URL = `${ENOVIA_BASE_URL}/resources/v1/collabServices/authoring/createContent/typeInfo?tenant=OI000186152&xrequestedwith=xmlhttprequest`;\r\n\r\n  const fetchDocumentData = async (operation = null) => {\r\n    // Use passed operation or fall back to state\r\n    const effectiveOperation = operation || operationType;\r\n\r\n    console.log(\"fetchDocumentData called with operation:\", effectiveOperation);\r\n\r\n    if (effectiveOperation !== \"3\") {\r\n      console.log(\"Not document operation type, skipping fetch\");\r\n      return;\r\n    }\r\n\r\n    // Update state if new operation passed\r\n    if (operation && operation !== operationType) {\r\n      setOperationType(operation);\r\n    }\r\n\r\n    try {\r\n      console.log(\"Fetching document data for operation type:\", effectiveOperation);\r\n\r\n      // Get CSRF Headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        console.error(\"Failed to fetch CSRF headers.\");\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      const body = {\r\n        type: \"Document\",\r\n        preferedType: \"Document\",\r\n        typeName: \"Document\",\r\n        subTypes: true,\r\n        runUXBL: true,\r\n        metrics: {\r\n          UXName: \"New\",\r\n          client_app_domain: \"3DEXPERIENCE 3DDashboard\",\r\n          client_app_name: \"ENXWDOC_AP\",\r\n        },\r\n      };\r\n\r\n      // Fetch data from API\r\n      const response = await callEnoviaWebService(\r\n        \"POST\",\r\n        API_URL,\r\n        body,\r\n        headers\r\n      );\r\n      console.log(\"API Response for Document template:\", response);\r\n\r\n      // Validate response structure\r\n      if (response.status !== true) {\r\n        console.error(\"Invalid API response structure:\", response);\r\n        showErrorToast(\r\n          \"Failed to fetch document data. Invalid response structure.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Extract relevant data\r\n      const documentInfo = response.output.result[0];\r\n      console.log(\r\n        \"Full documentInfo structure:\",\r\n        JSON.stringify(documentInfo, null, 2)\r\n      );\r\n\r\n      // Check different possible paths for extensionAttributes\r\n      const extensionAttributes =\r\n        documentInfo?.extensionAttributes ||\r\n        documentInfo?.attributes?.extensionAttributes ||\r\n        [];\r\n\r\n      console.log(\"Found extensionAttributes:\", extensionAttributes);\r\n\r\n      // Extract dropdown options only if extensionAttributes exists\r\n      if (extensionAttributes && extensionAttributes.length > 0) {\r\n        // Extract all NLS values into a separate array\r\n        const nlsValues = extensionAttributes.map(attr => attr.nls);\r\n        console.log(\"All NLS Values:\", nlsValues);\r\n        setAllNLSValues(nlsValues);\r\n\r\n        // Create dropdown options with simplified backend names\r\n        const options = extensionAttributes.map((attr) => {\r\n          // Extract the attribute name after the dot (e.g., \"production\" from \"XP_Document_Ext.production\")\r\n          const fullName = attr.name;\r\n          const nameParts = fullName.split(\".\");\r\n          const extractedName = nameParts.length > 1 ? nameParts[1] : fullName;\r\n\r\n          return {\r\n            uiLabel: attr.nls, // Keep UI label as nls\r\n            backendName: extractedName, // Just use the part after the dot\r\n            fullName: attr.name, // Store the original full name in case we need it later\r\n          };\r\n        });\r\n\r\n        console.log(\r\n          \"Document Operation - Extracted Dropdown Options:\",\r\n          options\r\n        );\r\n        setDropdownOptions(options);\r\n      } else {\r\n        console.warn(\"No extensionAttributes found in the response\");\r\n        setDropdownOptions([]);\r\n        setAllNLSValues([]);\r\n      }\r\n\r\n      // Set the document data in state\r\n      setDocumentData(documentInfo);\r\n    } catch (error) {\r\n      console.error(\"Error fetching document data:\", error);\r\n      showErrorToast(error.message || \"Error fetching document data.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (operationType) {\r\n      fetchDocumentData();\r\n    }\r\n  }, [operationType]); // Refetch when operationType changes\r\n\r\n  // Return an object with the same structure as useMassUpload for consistency\r\n  return { \r\n    documentData, \r\n    // Create a consistent structure with useMassUpload hook\r\n    mappedAttributes: {\r\n      dropdownOptions: dropdownOptions,\r\n      allNLSValues: allNLSValues\r\n    },\r\n    refreshData: fetchDocumentData\r\n  }; \r\n};\r\n\r\nexport default useFetchDocumentData;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./Mockup.css\";\r\nimport { Form, Stack } from \"react-bootstrap\";\r\nimport CustomButton from \"../../components/Button/Button\";\r\nimport FileUpload from \"../../components/FileUploader/FileUploader\";\r\nimport { downloadTemplate } from \"../../utils/downloadTemplate\";\r\nimport useToast from \"../../hooks/useToast\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport validateFile from \"./validateFile\";\r\nimport CustomSelect from \"../../components/Select/customSelect\";\r\nimport { globalCollabSpaceTitles } from \"../../services/api/droppableService\";\r\nimport ContentErrorsModal from \"../../components/Modals/ContentErrorsModal\";\r\nimport ConfirmationModal from \"../../components/Modals/ConfirmationModal\";\r\nimport ColumnMappingModal from \"../../components/Modals/ColumnMappingModal\";\r\nimport api from \"../../utils/api\";\r\nimport useMassUpload from \"../../hooks/Mass-Upload/useMassUpload\";\r\nimport useFetchDocumentData from \"../../hooks/Mass-Upload/useMassUploadDocument\";\r\n\r\nconst API_ENDPOINTS = {\r\n  1: \"/massUpload/uploadPhysicalProduct\",\r\n  2: \"/massUpload/uploadProductStructure\",\r\n  3: \"/massUpload/uploadDocument\",\r\n  4: \"/massUpload/uploadProductDocument\",\r\n};\r\n\r\n// Replace the transformSheetDataWithMappings function with this implementation\r\n\r\nconst transformSheetDataWithMappings = (\r\n  sheetData,\r\n  columnMappings,\r\n  operationType,\r\n  mappedAttributesData // Add this parameter\r\n) => {\r\n  // Debug log column names and some sample values\r\n  if (sheetData.length > 0) {\r\n    console.log(\r\n      \"Actual column names in sheet data:\",\r\n      Object.keys(sheetData[0])\r\n    );\r\n    console.log(\"Sample row values:\", sheetData[0]);\r\n    console.log(\"Column mappings applied:\", columnMappings);\r\n  }\r\n  if (!sheetData || !columnMappings) {\r\n    console.error(\"Missing data or mappings for transformation\");\r\n    return null;\r\n  }\r\n\r\n  console.log(\"Transforming sheet data with mappings:\", columnMappings);\r\n\r\n  // Extract group information from mappedAttributes\r\n  // const { mappedData = [], attributesByGroup = {} } =\r\n  //   mappedAttributesData || {};\r\n  const mappedData = mappedAttributesData?.mappedData || [];\r\n\r\n  console.log(\"Mapped attributes data in mass upload:\", mappedAttributesData);\r\n  // console.log(\"Attributes by group in mass upload:\", attributesByGroup);\r\n  console.log(\"Mapped data in massupload:\", mappedAttributesData.mappedData);\r\n\r\n  // Debug full structure\r\n  console.log(\"Full mapped attributes structure:\", mappedAttributesData);\r\n\r\n  // Create a map of backend attribute names to their groups\r\n  // The correct data is in mappedData array, not mappedAttributesData.mappedData\r\n\r\n  // Create a map of backend attribute names to their groups\r\n  const attributeGroupMap = {};\r\n  if (Array.isArray(mappedData)) {\r\n    mappedData.forEach((option) => {\r\n      attributeGroupMap[option.backendName] = option.group || \"System\";\r\n      console.log(\r\n        `Mapping ${option.backendName} to group ${option.group || \"System\"}`\r\n      );\r\n    });\r\n  }\r\n\r\n  console.log(\r\n    \"Backend name mapping for title:\",\r\n    mappedData.find((attr) => attr.backendName === \"title\")\r\n  );\r\n  console.log(\r\n    \"Backend name mapping for description:\",\r\n    mappedData.find((attr) => attr.backendName === \"description\")\r\n  );\r\n  console.log(\r\n    \"Backend name mapping for collabspaceTitle:\",\r\n    mappedData.find((attr) => attr.backendName === \"collabspaceTitle\")\r\n  );\r\n\r\n  // Update the getPathForAttribute function in transformSheetDataWithMappings\r\n\r\n  const getPathForAttribute = (backendName, columnName) => {\r\n    // ROOT LEVEL ATTRIBUTES - These always go at the root\r\n    if (\r\n      backendName === \"title\" ||\r\n      backendName === \"type\" ||\r\n      backendName === \"classificationType\" ||\r\n      backendName === \"collabspaceTitle\" // This needs special handling\r\n    ) {\r\n      // Special case for collabspaceTitle - map to collabspace at root level\r\n      if (backendName === \"collabspaceTitle\") {\r\n        console.log(\"collabspaceTitle mapped to root collabspace\");\r\n        return \"collabspaceTitle\";\r\n      }\r\n\r\n      console.log(`${backendName} placed at root level`);\r\n      return backendName;\r\n    }\r\n\r\n    // EIN NUMBER - Always goes to dseng:EnterpriseReference.partNumber\r\n    if (\r\n      columnName === \"EIN Number\" ||\r\n      backendName === \"PartNumber\" ||\r\n      backendName === \"Part Number\"\r\n    ) {\r\n      console.log(\r\n        \"EIN Number mapped to attributes.dseng:EnterpriseReference.partNumber\"\r\n      );\r\n      return \"attributes.dseng:EnterpriseReference.partNumber\";\r\n    }\r\n\r\n    // DESCRIPTION - Always goes in attributes\r\n    if (backendName === \"description\") {\r\n      console.log(\"Description mapped to attributes.description\");\r\n      return \"attributes.description\";\r\n    }\r\n\r\n    // All other attributes based on their group\r\n    const group = attributeGroupMap[backendName];\r\n    console.log(`Attribute: ${backendName}, Group: ${group || \"unknown\"}`);\r\n\r\n    // Skip attributes with unknown groups\r\n    if (!group) {\r\n      console.log(`Skipping attribute with unknown group: ${backendName}`);\r\n      return null; // Return null instead of a path\r\n    }\r\n\r\n    if (group === \"System Attributes\") {\r\n      // System attributes go directly under attributes\r\n      return `attributes.${backendName}`;\r\n    } else {\r\n      // All other attributes go to dseno:EnterpriseAttributes\r\n      return `attributes.dseno:EnterpriseAttributes.${backendName}`;\r\n    }\r\n  };\r\n\r\n  // Transform each row in the sheet data\r\n  const transformedItems = sheetData.map((row) => {\r\n    // Initialize the structure with empty nested objects\r\n    const transformedRow = {};\r\n\r\n    // Process each cell in the row\r\n    Object.entries(row).forEach(([columnName, value]) => {\r\n      // Skip unmapped columns\r\n      if (!columnMappings[columnName]) return;\r\n\r\n      const uiLabelBackendName = columnMappings[columnName];\r\n\r\n      // Special case lookup for system attributes\r\n      const systemAttributeMappings = {\r\n        Title: \"title\",\r\n        Description: \"description\",\r\n        \"Collaborative Space\": \"collabspaceTitle\",\r\n        \"Collab Space\": \"collabspaceTitle\",\r\n        Type: \"type\",\r\n      };\r\n\r\n      // If the mapping contains a UI label instead of backend name, convert it\r\n      const backendName =\r\n        systemAttributeMappings[uiLabelBackendName] ||\r\n        mappedData.find((attr) => attr.uiLabel === uiLabelBackendName)\r\n          ?.backendName ||\r\n        uiLabelBackendName;\r\n\r\n      const path = getPathForAttribute(backendName, columnName);\r\n\r\n      // Add this debug log\r\n      if (\r\n        backendName === \"title\" ||\r\n        backendName === \"description\" ||\r\n        backendName.toLowerCase() === \"collabspace\"\r\n      ) {\r\n        console.log(`Placing ${backendName} at path: ${path}`);\r\n      }\r\n\r\n      // Skip if no path determined\r\n      if (!path) return;\r\n\r\n      // Build the nested structure\r\n      const pathParts = path.split(\".\");\r\n      let current = transformedRow;\r\n\r\n      // Create nested objects\r\n      for (let i = 0; i < pathParts.length - 1; i++) {\r\n        const part = pathParts[i];\r\n        if (!current[part]) {\r\n          current[part] = {};\r\n        }\r\n        current = current[part];\r\n      }\r\n\r\n      // Set the value at the final path location\r\n      current[pathParts[pathParts.length - 1]] = value;\r\n    });\r\n\r\n    // Handle physical product type determination\r\n    if (operationType === \"1\") {\r\n      // Find the column header regardless of case\r\n      const productTypeColumn = Object.keys(row).find(\r\n        (key) =>\r\n          key.toLowerCase().includes(\"physical product\") ||\r\n          key.toLowerCase().includes(\"raw material\")\r\n      );\r\n\r\n      if (productTypeColumn && row[productTypeColumn]) {\r\n        const productType = row[productTypeColumn].toLowerCase().trim();\r\n        transformedRow.type = productType.includes(\"physical product\")\r\n          ? \"VPMReference\"\r\n          : productType.includes(\"raw material\")\r\n          ? \"Raw_Material\"\r\n          : \"\";\r\n\r\n        console.log(\r\n          `Product type determined: ${transformedRow.type} from value: ${row[productTypeColumn]}`\r\n        );\r\n      }\r\n    }\r\n\r\n    // For document, default type to \"Document\"\r\n    if (operationType === \"3\" && !transformedRow.type) {\r\n      transformedRow.type = \"Document\";\r\n    }\r\n\r\n    return transformedRow;\r\n  });\r\n\r\n  // Add this before returning the final result\r\n  if (transformedItems.length > 0) {\r\n    console.log(\r\n      \"Sample transformed item structure:\",\r\n      JSON.stringify(transformedItems[0], null, 2)\r\n    );\r\n  }\r\n\r\n  // Prepare data in chunks for API submission\r\n  const CHUNK_SIZE = 1000;\r\n  const chunks = [];\r\n\r\n  for (let i = 0; i < transformedItems.length; i += CHUNK_SIZE) {\r\n    chunks.push(transformedItems.slice(i, i + CHUNK_SIZE));\r\n  }\r\n\r\n  return {\r\n    chunks,\r\n    totalChunks: chunks.length,\r\n    totalItems: transformedItems.length,\r\n    originalData: sheetData,\r\n    mappings: columnMappings,\r\n  };\r\n};\r\n// Generate automatic column mappings\r\nconst generateColumnMappings = (\r\n  columnHeaders,\r\n  mandatoryAttributes,\r\n  mappedAttributes\r\n) => {\r\n  const { allNLSValues = [], dropdownOptions = [] } = mappedAttributes || {};\r\n  const completeMappings = {};\r\n  const simplifiedMappings = {};\r\n\r\n  // Helper function to check if column has matching NLS\r\n  const hasMatchingNLS = (header) => {\r\n    if (!Array.isArray(allNLSValues)) return false;\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n    return allNLSValues.some(\r\n      (nls) => nls.toLowerCase().trim() === normalizedHeader\r\n    );\r\n  };\r\n\r\n  // Special mappings for system attributes to ensure they use correct backend names\r\n  const systemAttributeMappings = {\r\n    Title: \"title\",\r\n    Description: \"description\",\r\n    \"Collaborative Space\": \"collabspaceTitle\",\r\n    \"Collab Space\": \"collabspaceTitle\",\r\n    Type: \"type\",\r\n    \"EIN Number\": \"Part Number\",\r\n  };\r\n\r\n  // Then modify the getBackendNameForHeader function\r\n  const getBackendNameForHeader = (header) => {\r\n    // First check if it's a system attribute we want to hardcode\r\n    if (systemAttributeMappings[header]) {\r\n      return systemAttributeMappings[header];\r\n    }\r\n\r\n    const normalizedHeader = header.toLowerCase().trim();\r\n\r\n    // Also check case-insensitive for system attributes\r\n    const systemAttrKey = Object.keys(systemAttributeMappings).find(\r\n      (key) => key.toLowerCase() === normalizedHeader\r\n    );\r\n\r\n    if (systemAttrKey) {\r\n      return systemAttributeMappings[systemAttrKey];\r\n    }\r\n\r\n    // Otherwise use dropdown options\r\n    const matchingOption = dropdownOptions.find(\r\n      (opt) => opt.uiLabel.toLowerCase().trim() === normalizedHeader\r\n    );\r\n    return matchingOption ? matchingOption.backendName : header;\r\n  };\r\n\r\n  // Special mapping for known attributes that might not have NLS matches\r\n  const specialMappings = {\r\n    \"EIN Number\": \"PartNumber\",\r\n  };\r\n\r\n  // Process all column headers\r\n  columnHeaders.forEach((columnName) => {\r\n    // Column was not manually mapped\r\n    const hasNLS = hasMatchingNLS(columnName);\r\n    const isSpecialColumn = specialMappings[columnName];\r\n    const isMandatory = mandatoryAttributes.includes(columnName);\r\n\r\n    if (isSpecialColumn) {\r\n      const mappedAttribute = specialMappings[columnName];\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory || false,\r\n        autoMapped: true,\r\n        isSpecial: true,\r\n      };\r\n\r\n      // Also add to simplified mappings\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n    // Then handle columns with NLS matches OR mandatory columns\r\n    else if (hasNLS || isMandatory) {\r\n      const mappedAttribute = getBackendNameForHeader(columnName);\r\n\r\n      completeMappings[columnName] = {\r\n        columnName: columnName,\r\n        uiLabel: columnName,\r\n        mappedAttribute: mappedAttribute,\r\n        isMandatory: isMandatory,\r\n        autoMapped: true,\r\n      };\r\n\r\n      // Also add to simplified mappings\r\n      simplifiedMappings[columnName] = mappedAttribute;\r\n    }\r\n  });\r\n\r\n  return {\r\n    completeMappings,\r\n    simplifiedMappings,\r\n    totalColumns: Object.keys(completeMappings).length,\r\n  };\r\n};\r\n\r\nconst MassUpload = () => {\r\n  const [collabTitles, setCollabTitles] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [errorModalShow, setErrorModalShow] = useState(false);\r\n  const [showContentErrors, setShowContentErrors] = useState(false);\r\n  const [showSpreadsheetModal, setShowSpreadsheetModal] = useState(false); // New state for spreadsheet modal\r\n  const { showErrorToast, showSuccessToast } = useToast();\r\n  const [isValidating, setIsValidating] = useState(false);\r\n  const [operationChoice, setOperationChoice] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [columnHeaders, setColumnHeaders] = useState([]);\r\n  const [mandatoryAttributes, setMandatoryAttributes] = useState([]);\r\n  const fileUploaderRef = useRef(); // Add this ref\r\n  const [formattedData, setFormattedData] = useState(null);\r\n  const { mappedAttributes: massUploadAttributes, refreshMapping } =\r\n    useMassUpload();\r\n  const { mappedAttributes: documentAttributes, refreshData } =\r\n    useFetchDocumentData(operationChoice);\r\n\r\n  // Choose the appropriate attributes based on operation choice\r\n  const mappedAttributes =\r\n    operationChoice === \"3\" ? documentAttributes : massUploadAttributes;\r\n\r\n  const { documentData, dropdownOptions: documentDropdownOptions } =\r\n    useFetchDocumentData(operationChoice); // Get dropdownOptions\r\n\r\n  // Select the appropriate dropdown options based on operation type\r\n  const activeDropdownOptions =\r\n    operationChoice === \"3\"\r\n      ? documentDropdownOptions\r\n      : mappedAttributes?.dropdownOptions;\r\n\r\n  // Add console logs to track the dropdown options\r\n  console.log(\"Operation Choice:\", operationChoice);\r\n  console.log(\"Document Dropdown Options:\", documentDropdownOptions);\r\n  console.log(\r\n    \"MassUpload Dropdown Options:\",\r\n    mappedAttributes?.dropdownOptions\r\n  );\r\n  console.log(\"Active Dropdown Options:\", activeDropdownOptions);\r\n\r\n  useEffect(() => {\r\n    // Log the global variable directly to verify its contents\r\n    console.log(\r\n      \"[MassUpload.jsx] Global collabSpaceTitles:\",\r\n      globalCollabSpaceTitles\r\n    );\r\n    if (Array.isArray(globalCollabSpaceTitles)) {\r\n      setCollabTitles([...globalCollabSpaceTitles]);\r\n    } else {\r\n      console.error(\r\n        \"[MassUpload.jsx] ❌ globalCollabSpaceTitles is not an array!\",\r\n        globalCollabSpaceTitles\r\n      );\r\n    }\r\n    console.log(\"[MassUpload.jsx] Retrieved collabSpaceTitles:\", collabTitles);\r\n  }, []);\r\n\r\n  const handleFileUpload = async (files) => {\r\n    if (files.length === 0) return;\r\n\r\n    try {\r\n      setIsValidating(true);\r\n      console.log(\"Starting file validation...\");\r\n      console.log(\"Selected Operation:\", operationChoice);\r\n      console.log(\"File:\", files[0].name);\r\n\r\n      const validationResult = await validateFile(\r\n        files[0],\r\n        collabTitles,\r\n        operationChoice\r\n      );\r\n\r\n      const {\r\n        headers = [],\r\n        validationErrors = [],\r\n        mandatoryAttributes = [],\r\n        sheetData = [],\r\n      } = validationResult;\r\n\r\n      setColumnHeaders(headers);\r\n      setMandatoryAttributes(mandatoryAttributes);\r\n\r\n      // Map sheet data to JSON format with operation type\r\n      if (sheetData.length > 0) {\r\n        console.log(\"Sheet Data \", sheetData);\r\n        setFormattedData({ originalData: sheetData });\r\n\r\n        // Use the correctly named functions\r\n        if (refreshMapping) await refreshMapping(operationChoice);\r\n        if (operationChoice === \"3\" && refreshData)\r\n          await refreshData(operationChoice);\r\n\r\n        // Apply automatic column mapping (wait for mappedAttributes to be updated)\r\n        setTimeout(() => {\r\n          console.log(\r\n            \"Applying automatic column mapping with:\",\r\n            mappedAttributes\r\n          );\r\n          if (mappedAttributes && Object.keys(mappedAttributes).length > 0) {\r\n            // Generate mappings automatically\r\n            const { simplifiedMappings } = generateColumnMappings(\r\n              headers,\r\n              mandatoryAttributes,\r\n              mappedAttributes\r\n            );\r\n\r\n            console.log(\"Auto-generated mappings:\", simplifiedMappings);\r\n\r\n            // Apply mappings to transform the data\r\n            if (Object.keys(simplifiedMappings).length > 0) {\r\n              const transformedData = transformSheetDataWithMappings(\r\n                sheetData,\r\n                simplifiedMappings,\r\n                operationChoice,\r\n                mappedAttributes // Pass mappedAttributes here\r\n              );\r\n\r\n              setFormattedData(transformedData);\r\n              showSuccessToast(\r\n                `Data automatically mapped with ${\r\n                  Object.keys(simplifiedMappings).length\r\n                } columns`\r\n              );\r\n            }\r\n          }\r\n        }, 500); // Small delay to ensure mappedAttributes is ready\r\n      }\r\n\r\n      if (validationErrors.length === 0) {\r\n        setErrors([]);\r\n        showSuccessToast(\"File validated successfully!\");\r\n      } else {\r\n        setErrors(validationErrors);\r\n        setErrorModalShow(true);\r\n      }\r\n    } catch (errorResponse) {\r\n      console.error(\"Validation failed:\", errorResponse);\r\n\r\n      const {\r\n        errors: responseErrors = [\"Unknown validation error.\"],\r\n        headers: responseHeaders = [],\r\n        mandatoryAttributes: responseMandatoryAttributes = [],\r\n        isTemplateMismatch = false,\r\n      } = errorResponse;\r\n\r\n      // If there's a template mismatch, show error and reset widget\r\n      if (isTemplateMismatch) {\r\n        showErrorToast(\r\n          \"The template uploaded and the selected operation do not match\"\r\n        );\r\n        handleReset(true); // Pass true to skip success toast\r\n        // Clear the file uploader\r\n        if (fileUploaderRef.current) {\r\n          fileUploaderRef.current.handleClearFiles();\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Only set these states if it's not a template mismatch\r\n      setErrors(responseErrors);\r\n      setColumnHeaders(responseHeaders);\r\n      setMandatoryAttributes(responseMandatoryAttributes);\r\n      setErrorModalShow(true);\r\n    } finally {\r\n      setIsValidating(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadTemplate = () => {\r\n    downloadTemplate(showErrorToast)(operationChoice);\r\n  };\r\n\r\n  const handleReset = (skipSuccessToast = false) => {\r\n    // Reset all states to their initial values\r\n    setModalShow(false);\r\n    setErrorModalShow(false);\r\n    setShowContentErrors(false);\r\n    setShowSpreadsheetModal(false);\r\n    setIsValidating(false);\r\n    setOperationChoice(\"\");\r\n    setErrors([]);\r\n    setColumnHeaders([]);\r\n    setMandatoryAttributes([]);\r\n    setFormattedData(null); // Add this line\r\n\r\n    // Reset the dropdown\r\n    const selectElement = document.querySelector(\r\n      'select[aria-label=\"Choose Operations\"]'\r\n    );\r\n    if (selectElement) {\r\n      selectElement.value = \"\";\r\n    }\r\n\r\n    // Only show success toast if not skipped\r\n    if (!skipSuccessToast) {\r\n      showSuccessToast(\"Widget reset successfully!\");\r\n    }\r\n  };\r\n\r\n  const handleOpenSpreadsheetModal = () => {\r\n    setShowContentErrors(false); // Close content errors modal\r\n    setShowSpreadsheetModal(true); // Open spreadsheet modal\r\n  };\r\n\r\n  const handleOperationChange = async (value) => {\r\n    console.log(\"Operation selected:\", value);\r\n    setOperationChoice(value);\r\n\r\n    // Use the correct function names and check if they exist first\r\n    try {\r\n      if (refreshMapping) await refreshMapping(value);\r\n      if (value === \"3\" && refreshData) await refreshData(value);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing data:\", error);\r\n    }\r\n  };\r\n\r\n  // Add this useEffect to monitor state changes\r\n  useEffect(() => {\r\n    console.log(\"Operation Choice updated:\", operationChoice);\r\n  }, [operationChoice]);\r\n\r\n  // It will be disabled if no file is uploaded (no headers) or if there are validation errors.\r\n  const submitDisabled = columnHeaders.length === 0 || errors.length > 0;\r\n  const manageSpreadsheetDisabled = columnHeaders.length === 0; // Disable if no file uploaded\r\n\r\n  const handleConfirmSubmit = async () => {\r\n    try {\r\n      if (!formattedData) {\r\n        showErrorToast(\"No data to submit\");\r\n        return;\r\n      }\r\n\r\n      const endpoint = API_ENDPOINTS[operationChoice];\r\n      if (!endpoint) {\r\n        showErrorToast(\"Invalid operation type\");\r\n        return;\r\n      }\r\n\r\n      const { chunks, totalChunks } = formattedData;\r\n      let successCount = 0;\r\n      let failureCount = 0;\r\n\r\n      showSuccessToast(`Starting upload of ${totalChunks} chunks...`);\r\n\r\n      for (let i = 0; i < chunks.length; i++) {\r\n        try {\r\n          const chunk = chunks[i];\r\n          const response = await api.post(endpoint, {\r\n            items: chunk,\r\n          });\r\n\r\n          if (response.status === 200) {\r\n            successCount++;\r\n            if (i % 5 === 0) {\r\n              // Show progress every 5 chunks\r\n              showSuccessToast(\r\n                `Processed ${i + 1} of ${totalChunks} chunks...`\r\n              );\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(`Chunk ${i + 1} failed:`, error);\r\n          failureCount++;\r\n        }\r\n      }\r\n\r\n      const finalMessage = `Upload complete: ${successCount} chunks successful, ${failureCount} failed`;\r\n      if (failureCount > 0) {\r\n        showErrorToast(finalMessage);\r\n      } else {\r\n        showSuccessToast(\"Upload successful!\");\r\n        setModalShow(false);\r\n        handleReset();\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      showErrorToast(`Upload failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  console.log(\"Errors in Massupload.jsx:\", errors);\r\n\r\n  // Add this computed value for FileUpload component\r\n  const isFileUploadDisabled = !operationChoice;\r\n\r\n  return (\r\n    <>\r\n      <Stack className=\"mt-3\" gap={4}>\r\n        {/* Choose operation and download template */}\r\n        <Stack direction=\"horizontal\">\r\n          <CustomSelect\r\n            selectedValue={operationChoice}\r\n            onChange={handleOperationChange}\r\n            size=\"lg\"\r\n            className=\"w-50\"\r\n            options={{\r\n              defaultLabel: \"Choose Operations\",\r\n              list: [\r\n                { value: \"1\", label: \"Physical Product/Raw Material\" },\r\n                { value: \"2\", label: \"Physical Product Structure\" },\r\n                { value: \"3\", label: \"Document\" },\r\n                { value: \"4\", label: \"Physical Product-Document\" },\r\n              ],\r\n            }}\r\n          />\r\n          {/* Conditionally render multiple file input for Document type */}\r\n          <div className=\"p-2 ms-auto\">\r\n            {operationChoice === \"3\" && (\r\n              <Form.Group controlId=\"formFileMultiple\">\r\n                <Form.Control type=\"file\" multiple />\r\n              </Form.Group>\r\n            )}\r\n          </div>\r\n          <div className=\"p-2\">\r\n            <CustomButton\r\n              variant=\"link ms-auto\"\r\n              size=\"lg\"\r\n              onClick={handleDownloadTemplate}\r\n              text=\"Download Template\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n\r\n        {/* Drag and Drop File Upload */}\r\n        {/* Modified FileUpload with disabled state */}\r\n        <div className={isFileUploadDisabled ? \"opacity-50\" : \"\"}>\r\n          <FileUpload\r\n            ref={fileUploaderRef}\r\n            fileTypes={[\"XLSX\"]}\r\n            multiple={false}\r\n            onUpload={handleFileUpload}\r\n            onReset={handleReset}\r\n            disabled={isFileUploadDisabled}\r\n            message={\r\n              isFileUploadDisabled\r\n                ? \"Please select an operation first\"\r\n                : \"Drag & Drop your files here or Click to browse\"\r\n            }\r\n          />\r\n        </div>\r\n\r\n        {/* Show loader while validating */}\r\n        {isValidating && <Loader />}\r\n\r\n        {/* Submit Button and Content Error Button */}\r\n        <Stack direction=\"horizontal\" gap={2}>\r\n          <Form.Check\r\n            type=\"checkbox\"\r\n            label=\"Background\"\r\n            className=\"size-increase\"\r\n          />\r\n          <div className=\"ms-auto d-flex gap-5\">\r\n            {errors.length > 0 && (\r\n              <CustomButton\r\n                variant=\"danger\"\r\n                onClick={() => setShowContentErrors(true)}\r\n                text={`Content Errors (${errors.length})`}\r\n              />\r\n            )}\r\n\r\n            <CustomButton\r\n              variant={manageSpreadsheetDisabled ? \"secondary\" : \"info\"}\r\n              onClick={handleOpenSpreadsheetModal}\r\n              text=\"Manage Spreadsheet Columns\"\r\n              disabled={manageSpreadsheetDisabled}\r\n            />\r\n\r\n            <CustomButton\r\n              variant={submitDisabled ? \"secondary\" : \"primary\"}\r\n              disabled={submitDisabled}\r\n              size=\"lg\"\r\n              onClick={() => setModalShow(true)}\r\n              text=\"Submit\"\r\n            />\r\n          </div>\r\n        </Stack>\r\n      </Stack>\r\n\r\n      {/* Content Errors Modal */}\r\n      <ContentErrorsModal\r\n        show={showContentErrors}\r\n        onHide={() => setShowContentErrors(false)}\r\n        errors={errors}\r\n      />\r\n\r\n      {/* Confirmation Modal */}\r\n\r\n      <ConfirmationModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        onConfirm={handleConfirmSubmit}\r\n      />\r\n\r\n      {/* Column Mapping */}\r\n\r\n      <ColumnMappingModal\r\n        show={showSpreadsheetModal}\r\n        onHide={() => setShowSpreadsheetModal(false)}\r\n        columnHeaders={columnHeaders}\r\n        mandatoryAttributes={mandatoryAttributes}\r\n        existingMappings={formattedData?.mappings ? formattedData.mappings : {}}\r\n        dropdownOptions={activeDropdownOptions} // Pass the active dropdown options\r\n        operationChoice={operationChoice} // Pass operation choice\r\n        onColumnsMapped={(mappings, finalMapping) => {\r\n          console.log(\"Column mappings received:\", mappings);\r\n\r\n          // Store the column mappings\r\n          const columnMappings = mappings;\r\n\r\n          // Transform the sheet data using the column mappings\r\n          if (formattedData && formattedData.originalData) {\r\n            const transformedData = transformSheetDataWithMappings(\r\n              formattedData.originalData,\r\n              columnMappings,\r\n              operationChoice,\r\n              mappedAttributes // Pass mappedAttributes here\r\n            );\r\n\r\n            setFormattedData(transformedData);\r\n            showSuccessToast(\r\n              `Data mapped successfully with ${\r\n                Object.keys(mappings).length\r\n              } columns`\r\n            );\r\n          } else {\r\n            showErrorToast(\r\n              \"No sheet data available to transform with mappings\"\r\n            );\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MassUpload;\r\n","import { MSG_DROPDOWN_NOT_SELECTED } from \"./toastMessages\";\r\n\r\nexport const downloadTemplate = (showErrorToast) => (operationChoice) => {\r\n  let url = \"\";\r\n  switch (operationChoice) {\r\n    case \"1\": // Physical Product/Raw Material\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"2\": // Physical Product Structure\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProductStructureSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"3\": // Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    case \"4\": // Physical Product-Document\r\n      url =\r\n        \"https://khanfarzan17.github.io/mass-upload-testing/PhysicalProduct-DocumentSpreadSheetTemplate.xlsx\";\r\n      break;\r\n    default:\r\n      showErrorToast(MSG_DROPDOWN_NOT_SELECTED);\r\n      return;\r\n  }\r\n  window.open(url, \"_blank\");\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./index.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport \"./styles/variables.css\";\r\nimport MassUpload from \"./pages/mass-upload/massUpload\";\r\n\r\n// This function mounts the React app.\r\nlet root = null; // Global React root\r\nfunction start() {\r\n  requirejs([\"DS/PlatformAPI/PlatformAPI\"], (PlatformAPI) => {\r\n    window.PlatformAPI = PlatformAPI;\r\n  });\r\n  // console.log(\"[index.js] start() called. Mounting React app.\");\r\n  // Find the root element within the widget's body (if available)\r\n  let rootElement =\r\n    window.widget?.body?.querySelector(\"#root\") ||\r\n    document.getElementById(\"root\");\r\n\r\n  // If no root element exists, create one and append it to the widget body or document body.\r\n  if (!rootElement) {\r\n    rootElement = document.createElement(\"div\");\r\n    rootElement.id = \"root\";\r\n    if (window.widget && window.widget.body) {\r\n      window.widget.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to widget.body.\");\r\n    } else {\r\n      document.body.appendChild(rootElement);\r\n      // console.log(\"[index.js] Root element appended to document.body.\");\r\n    }\r\n  } else {\r\n    // console.log(\"[index.js] Root element found.\");\r\n  }\r\n\r\n  if (!root) {\r\n    // console.log(\"[index.js] Creating new React root.\");\r\n    root = ReactDOM.createRoot(rootElement);\r\n  } else {\r\n    // console.log(\"[index.js] Reusing existing React root.\");\r\n  }\r\n\r\n  root.render(\r\n    <Provider store={store}>\r\n      <MassUpload />\r\n      <ToastContainer />\r\n    </Provider>\r\n\r\n    //  <div>hi i am just a div {console.log(\"no worries\")}</div>\r\n  );\r\n  // console.log(\"[index.js] React app rendered.\");\r\n}\r\n\r\nexport default function () {\r\n  // console.log(\"[index.js] 🔍 Checking if widget is available...\");\r\n\r\n  if (window.widget) {\r\n    // console.log(\"[index.js] ✅ Widget detected! Registering onLoad event...\");\r\n\r\n    let hasOnLoadRun = false; // Prevent duplicate execution\r\n\r\n    window.widget.addEvent(\"onLoad\", () => {\r\n      if (hasOnLoadRun) {\r\n        console.warn(\r\n          \"[index.js] ⏳ onLoad was already executed. Ignoring duplicate trigger.\"\r\n        );\r\n        return;\r\n      }\r\n      hasOnLoadRun = true;\r\n\r\n      // console.log(\r\n      //   \"[index.js] ✅ First-time onLoad event fired. Initializing app...\"\r\n      // );\r\n\r\n      start(); // This will initialize the React app\r\n    });\r\n  } else {\r\n    console.error(\r\n      \"[index.js] ❌ Widget not detected! onLoad cannot be registered.\"\r\n    );\r\n  }\r\n}\r\n\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","Loader","show","onHide","footerButtons","Modal","centered","Header","closeButton","Title","Body","Footer","map","btn","index","label","useToast","showToast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","transition","Bounce","otherOptions","toast","showSuccessToast","options","arguments","length","undefined","showErrorToast","showInfoToast","showWarningToast","forwardRef","ref","fileTypes","multiple","onUpload","onReset","files","setFiles","useState","useImperativeHandle","handleClearFiles","skipSuccessToast","handleClearFile","current","concat","FileUploader","handleChange","selectedFiles","fileArray","name","types","hoverTitle","file","display","alignItems","background","border","cursor","color","opacity","validateFile","collabSpaceTitles","selectedOperation","Promise","resolve","reject","_config$MassUpload$ma","_config$MassUpload$ma2","console","log","operation","fileName","matchedOperation","expectedHeaders","config","fileHeaders","mandatoryAttributes","errors","headers","Array","isArray","error","reader","FileReader","readAsBinaryString","onload","async","workbook","XLSX","e","target","result","dense","cellDates","cellNF","cellText","sheetName","SheetNames","worksheet","Sheets","uploadedHeaders","sheet_to_json","header","every","includes","isTemplateMismatch","allSheetData","defval","chunks","data","chunkSize","i","push","slice","processDataInChunks","validationErrors","invalidPrefixes","errorStats","mandatory","collabSpace","einPrefix","docPrefix","lowerCaseCollabSpaceTitles","toLowerCase","chunkIndex","chunk","progress","Math","round","forEach","row","indexInChunk","globalRowIndex","field","toString","trim","_row$CollaborativeSp","userCollabSpace","firstRow","levelValue","levelStr","String","Number","valueToValidate","columnName","_row$columnName","some","prefix","startsWith","_row$columnName2","_row$columnName3","quantityValue","numQuantity","isNaN","processedRows","totalRows","currentErrors","collaborativeSpace","documentPrefix","total","byType","sheetData","onerror","selectedValue","onChange","Form","Select","value","defaultLabel","list","option","attrIndex","Alert","processedErrors","useMemo","errorGroups","reduce","groups","rowMatch","match","columnMatch","errorMsg","split","join","rowNumber","columns","Object","values","sort","a","b","cache","CellMeasurerCache","fixedWidth","defaultHeight","rowRenderer","_ref2","key","parent","CellMeasurer","columnIndex","rowIndex","column","err","ReusableAlert","_Fragment","AutoSizer","_ref3","List","rowCount","rowHeight","deferredMeasurementCache","CustomModal","ErrorPopup","onConfirm","columnHeaders","handleSelectChange","dropdownOptions","Table","bordered","currentMapping","filteredOptions","CustomSelect","uiLabel","initialOperationChoice","mappedAttributes","setMappedAttributes","operationChoice","setOperationChoice","ENOVIA_BASE_URL","process","fetchColumnMapping","_metadataResponse$out","_metadataResponse$out2","_metadataResponse$out3","_attributeResponse$ou","_attributeResponse$ou2","effectiveOperation","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","metadataResponse","callEnoviaWebService","output","Error","member","objectId","id","attributeResponse","busIDs","groupData","results","item","nls","systemAttributes","groupNLS","attributeGroups","apiNlsValues","systemNlsValues","allNLSValues","Set","filteredGroupData","filter","attr","relevantAttributes","deploymentExtension","mappedData","backendName","group","attributesByGroup","find","useEffect","refreshMapping","selectedMappings","setSelectedMappings","useMassUpload","massUploadDropdownOptions","keys","StaticTable","hasNLS","warn","normalizedHeader","hasMatch","hasMatchingNLS","isMandatory","columnHeader","opt","getBackendNameForUILabel","prev","mappedAttribute","currentColumnHeader","selectedValues","entries","_","mapping","prepareDropdownOptions","onColumnsMapped","existingMappings","errorMessage","handleOkClick","completeMappings","simplifiedMappings","specialMappings","userMapping","autoMapped","existingMapping","isSpecialColumn","matchingOption","getBackendNameForHeader","finalMapping","columnMappings","totalColumns","groupEnd","MappedList","initialOperationType","documentData","setDocumentData","setDropdownOptions","setAllNLSValues","operationType","setOperationType","API_URL","fetchDocumentData","_documentInfo$attribu","body","preferedType","typeName","subTypes","runUXBL","metrics","UXName","client_app_domain","client_app_name","response","status","documentInfo","JSON","stringify","extensionAttributes","attributes","nlsValues","fullName","nameParts","extractedName","refreshData","API_ENDPOINTS","transformSheetDataWithMappings","mappedAttributesData","attributeGroupMap","transformedItems","transformedRow","_mappedData$find","uiLabelBackendName","Description","Type","path","getPathForAttribute","pathParts","part","productTypeColumn","productType","totalChunks","totalItems","originalData","mappings","generateColumnMappings","systemAttributeMappings","isSpecial","systemAttrKey","MassUpload","collabTitles","setCollabTitles","modalShow","setModalShow","errorModalShow","setErrorModalShow","showContentErrors","setShowContentErrors","showSpreadsheetModal","setShowSpreadsheetModal","isValidating","setIsValidating","setErrors","setColumnHeaders","setMandatoryAttributes","fileUploaderRef","useRef","formattedData","setFormattedData","massUploadAttributes","documentAttributes","useFetchDocumentData","documentDropdownOptions","activeDropdownOptions","globalCollabSpaceTitles","handleReset","selectElement","document","querySelector","submitDisabled","manageSpreadsheetDisabled","isFileUploadDisabled","Stack","gap","direction","Group","controlId","Control","CustomButton","handleDownloadTemplate","url","MSG_DROPDOWN_NOT_SELECTED","window","open","downloadTemplate","FileUpload","validationResult","setTimeout","transformedData","errorResponse","responseErrors","responseHeaders","responseMandatoryAttributes","Check","handleOpenSpreadsheetModal","ContentErrorsModal","ConfirmationModal","endpoint","successCount","failureCount","api","post","items","finalMessage","ColumnMappingModal","root","widget","hasOnLoadRun","addEvent","_window$widget","_window$widget$body","requirejs","PlatformAPI","rootElement","getElementById","createElement","appendChild","ReactDOM","render","Provider","store","ToastContainer","start","securityContext1","getValue","WAFData","loadWAFData","csrfURL","authenticatedRequest","method","onComplete","onFailure","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue"],"sourceRoot":""}